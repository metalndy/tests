
C:/Users/Igor/git/tests/test_u54/src/debug/empty.elf:     file format elf64-littleriscv
C:/Users/Igor/git/tests/test_u54/src/debug/empty.elf
architecture: riscv:rv64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000080000000

Program Header:
    LOAD off    0x0000000000001000 vaddr 0x0000000080000000 paddr 0x0000000080000000 align 2**12
         filesz 0x00000000000008e0 memsz 0x00000000000008e0 flags rwx
    LOAD off    0x0000000000001c88 vaddr 0x0000000080005c88 paddr 0x0000000080005c88 align 2**12
         filesz 0x0000000000000f68 memsz 0x0000000000000f68 flags rw-
     TLS off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**3
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags ---
    LOAD off    0x0000000000002bf0 vaddr 0x0000000080006bf0 paddr 0x0000000080006bf0 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000d80 flags rw-
    LOAD off    0x0000000000002bf0 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags ---
    LOAD off    0x0000000000003900 vaddr 0x0000000080000900 paddr 0x0000000080000900 align 2**12
         filesz 0x0000000000005388 memsz 0x0000000000005388 flags r-x

Sections:
Idx Name              Size      VMA               LMA               File off  Algn  Flags
  0 .init             000002ea  0000000080000000  0000000080000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init_array       00000008  00000000800002f0  00000000800002f0  000012f0  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .ctors            00000024  00000000800002f8  00000000800002f8  000012f8  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata           000005c0  0000000080000320  0000000080000320  00001320  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text             00005388  0000000080000900  0000000080000900  00003900  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data             00000f68  0000000080005c88  0000000080005c88  00001c88  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss              00000174  0000000080006bf0  0000000080006bf0  00002bf0  2**3  ALLOC
  7 .stack            00000400  0000000080006d70  0000000080006d70  00002bf0  2**4  ALLOC
  8 .heap             00000800  0000000080007170  0000000080007170  00002bf0  2**2  ALLOC
  9 .debug_info       000175e8  0000000000000000  0000000000000000  00008c88  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev     000028a7  0000000000000000  0000000000000000  00020270  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges    000012e0  0000000000000000  0000000000000000  00022b20  2**4  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges     00001160  0000000000000000  0000000000000000  00023e00  2**4  CONTENTS, READONLY, DEBUGGING
 13 .debug_line       00008399  0000000000000000  0000000000000000  00024f60  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_str        00003b7d  0000000000000000  0000000000000000  0002d2f9  2**0  CONTENTS, READONLY, DEBUGGING
 15 .comment          00000028  0000000000000000  0000000000000000  00030e76  2**0  CONTENTS, READONLY
 16 .riscv.attributes 0000003b  0000000000000000  0000000000000000  00030e9e  2**0  CONTENTS, READONLY
 17 .debug_frame      00003990  0000000000000000  0000000000000000  00030ee0  2**3  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000000080000000 l    d  .init	0000000000000000 .init
00000000800002f0 l    d  .init_array	0000000000000000 .init_array
00000000800002f8 l    d  .ctors	0000000000000000 .ctors
0000000080000320 l    d  .rodata	0000000000000000 .rodata
0000000080000900 l    d  .text	0000000000000000 .text
0000000080005c88 l    d  .data	0000000000000000 .data
0000000080006bf0 l    d  .bss	0000000000000000 .bss
0000000080006d70 l    d  .stack	0000000000000000 .stack
0000000080007170 l    d  .heap	0000000000000000 .heap
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_ranges	0000000000000000 .debug_ranges
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .riscv.attributes	0000000000000000 .riscv.attributes
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    df *ABS*	0000000000000000 scrub.o
0000000080000094 l     F .init	0000000000000000 _metal_memory_scrub
0000000080000182 l       .init	0000000000000000 skip_scrub
000000008000017a l       .init	0000000000000000 wait_scrub
00000000800000f4 l       .init	0000000000000000 dtim_scrub
000000008000010c l       .init	0000000000000000 ils_scrub
0000000080000124 l       .init	0000000000000000 dls_scrub
000000008000013c l       .init	0000000000000000 sram_scrub
0000000080000154 l       .init	0000000000000000 memory_scrub
000000008000016c l       .init	0000000000000000 done_scrub
0000000000000000 l    df *ABS*	0000000000000000 synchronize_harts.c
0000000000000000 l    df *ABS*	0000000000000000 crt0.o
0000000080000260 l       .init	0000000000000000 _skip_init
00000000800008c0 l       .rodata	0000000000000000 argv
00000000800008c8 l       .rodata	0000000000000000 envp
00000000800008d0 l       .rodata	0000000000000000 name
0000000000000000 l    df *ABS*	0000000000000000 tty.c
0000000000000000 l    df *ABS*	0000000000000000 main.c
0000000000000000 l    df *ABS*	0000000000000000 findfp.c
00000000800011b0 l     F .text	0000000000000066 std
0000000000000000 l    df *ABS*	0000000000000000 riscv_clint0.c
0000000080001b4e l     F .text	000000000000002a __metal_driver_sifive_clint0_control_base
0000000080001b78 l     F .text	0000000000000028 __metal_driver_sifive_clint0_num_interrupts
0000000080001ba0 l     F .text	0000000000000044 __metal_driver_sifive_clint0_interrupt_parents
0000000080001be4 l     F .text	0000000000000038 __metal_driver_sifive_clint0_interrupt_lines
0000000080001d26 l     F .text	0000000000000036 _get_cpu_intc
0000000000000000 l    df *ABS*	0000000000000000 riscv_cpu.c
0000000080002312 l     F .text	0000000000000028 __metal_driver_cpu_hartid
000000008000233a l     F .text	000000000000002e __metal_driver_cpu_timebase
0000000080002368 l     F .text	000000000000002e __metal_driver_cpu_interrupt_controller
0000000080002396 l     F .text	0000000000000028 __metal_driver_cpu_buserror
0000000000000000 l    df *ABS*	0000000000000000 riscv_plic0.c
0000000080004292 l     F .text	000000000000002a __metal_driver_sifive_plic0_control_base
00000000800042bc l     F .text	000000000000002a __metal_driver_sifive_plic0_num_interrupts
00000000800042e6 l     F .text	0000000000000028 __metal_driver_sifive_plic0_max_priority
000000008000430e l     F .text	0000000000000044 __metal_driver_sifive_plic0_interrupt_parents
0000000080004352 l     F .text	0000000000000038 __metal_driver_sifive_plic0_interrupt_lines
000000008000438a l     F .text	0000000000000022 __metal_driver_sifive_plic0_context_ids
0000000000000000 l    df *ABS*	0000000000000000 sifive_uart0.c
0000000080004cf8 l     F .text	000000000000002a __metal_driver_sifive_uart0_control_base
0000000080004d22 l     F .text	000000000000002e __metal_driver_sifive_uart0_interrupt_parent
0000000080004d50 l     F .text	0000000000000028 __metal_driver_sifive_uart0_interrupt_line
0000000080004d78 l     F .text	0000000000000028 __metal_driver_sifive_uart0_clock
0000000080004da0 l     F .text	0000000000000028 __metal_driver_sifive_uart0_pinmux
0000000080004dc8 l     F .text	0000000000000028 __metal_driver_sifive_uart0_pinmux_output_selector
0000000080004df0 l     F .text	0000000000000028 __metal_driver_sifive_uart0_pinmux_source_selector
0000000080005244 l     F .text	00000000000000ec pre_rate_change_callback_func
0000000080005330 l     F .text	0000000000000032 post_rate_change_callback_func
0000000000000000 l    df *ABS*	0000000000000000 putchar.c
0000000000000000 l    df *ABS*	0000000000000000 putc.c
0000000000000000 l    df *ABS*	0000000000000000 puts.c
0000000000000000 l    df *ABS*	0000000000000000 strlen.c
0000000000000000 l    df *ABS*	0000000000000000 wbuf.c
0000000000000000 l    df *ABS*	0000000000000000 wsetup.c
0000000000000000 l    df *ABS*	0000000000000000 fflush.c
0000000000000000 l    df *ABS*	0000000000000000 fwalk.c
0000000000000000 l    df *ABS*	0000000000000000 makebuf.c
0000000000000000 l    df *ABS*	0000000000000000 nano-mallocr.c
0000000000000000 l    df *ABS*	0000000000000000 nano-mallocr.c
0000000000000000 l    df *ABS*	0000000000000000 sbrkr.c
0000000000000000 l    df *ABS*	0000000000000000 stdio.c
0000000000000000 l    df *ABS*	0000000000000000 writer.c
0000000000000000 l    df *ABS*	0000000000000000 closer.c
0000000000000000 l    df *ABS*	0000000000000000 fstatr.c
0000000000000000 l    df *ABS*	0000000000000000 isattyr.c
0000000000000000 l    df *ABS*	0000000000000000 lseekr.c
0000000000000000 l    df *ABS*	0000000000000000 mlock.c
0000000000000000 l    df *ABS*	0000000000000000 readr.c
0000000000000000 l    df *ABS*	0000000000000000 cpu.c
0000000000000000 l    df *ABS*	0000000000000000 interrupt.c
0000000000000000 l    df *ABS*	0000000000000000 uart.c
0000000000000000 l    df *ABS*	0000000000000000 sifive_test0.c
0000000080004c7c l     F .text	0000000000000026 __metal_driver_sifive_test0_base
0000000000000000 l    df *ABS*	0000000000000000 clock.c
0000000000000000 l    df *ABS*	0000000000000000 shutdown.c
0000000000000000 l    df *ABS*	0000000000000000 vector.o
0000000080005600 l       .text	0000000000000000 IRQ_0
0000000080005604 l       .text	0000000000000000 IRQ_1
0000000080005608 l       .text	0000000000000000 IRQ_2
000000008000560c l       .text	0000000000000000 IRQ_3
0000000080005610 l       .text	0000000000000000 IRQ_4
0000000080005614 l       .text	0000000000000000 IRQ_5
0000000080005618 l       .text	0000000000000000 IRQ_6
000000008000561c l       .text	0000000000000000 IRQ_7
0000000080005620 l       .text	0000000000000000 IRQ_8
0000000080005624 l       .text	0000000000000000 IRQ_9
0000000080005628 l       .text	0000000000000000 IRQ_10
000000008000562c l       .text	0000000000000000 IRQ_11
0000000080005630 l       .text	0000000000000000 IRQ_12
0000000080005634 l       .text	0000000000000000 IRQ_13
0000000080005638 l       .text	0000000000000000 IRQ_14
000000008000563c l       .text	0000000000000000 IRQ_15
0000000080005640 l       .text	0000000000000000 IRQ_LC0
0000000080005644 l       .text	0000000000000000 IRQ_LC1
0000000080005648 l       .text	0000000000000000 IRQ_LC2
000000008000564c l       .text	0000000000000000 IRQ_LC3
0000000080005650 l       .text	0000000000000000 IRQ_LC4
0000000080005654 l       .text	0000000000000000 IRQ_LC5
0000000080005658 l       .text	0000000000000000 IRQ_LC6
000000008000565c l       .text	0000000000000000 IRQ_LC7
0000000080005660 l       .text	0000000000000000 IRQ_LC8
0000000080005664 l       .text	0000000000000000 IRQ_LC9
0000000080005668 l       .text	0000000000000000 IRQ_LC10
000000008000566c l       .text	0000000000000000 IRQ_LC11
0000000080005670 l       .text	0000000000000000 IRQ_LC12
0000000080005674 l       .text	0000000000000000 IRQ_LC13
0000000080005678 l       .text	0000000000000000 IRQ_LC14
000000008000567c l       .text	0000000000000000 IRQ_LC15
0000000000000000 l    df *ABS*	0000000000000000 sys_close.c
0000000000000000 l    df *ABS*	0000000000000000 sys_fstat.c
0000000000000000 l    df *ABS*	0000000000000000 sys_isatty.c
0000000000000000 l    df *ABS*	0000000000000000 sys_lseek.c
0000000000000000 l    df *ABS*	0000000000000000 sys_read.c
0000000000000000 l    df *ABS*	0000000000000000 sys_sbrk.c
0000000080006be8 l     O .data	0000000000000008 __brk
0000000000000000 l    df *ABS*	0000000000000000 sys_write.c
0000000000000000 l    df *ABS*	0000000000000000 atexit.c
0000000000000000 l    df *ABS*	0000000000000000 errno.c
0000000000000000 l    df *ABS*	0000000000000000 exit.c
0000000000000000 l    df *ABS*	0000000000000000 fini.c
0000000000000000 l    df *ABS*	0000000000000000 init.c
0000000000000000 l    df *ABS*	0000000000000000 __atexit.c
0000000080006c10 l     O .bss	0000000000000118 _global_atexit0
0000000000000000 l    df *ABS*	0000000000000000 __call_atexit.c
0000000000000000 l    df *ABS*	0000000000000000 init.c
0000000080006c08 l     O .bss	0000000000000004 init_done.1567
0000000080006c0c l     O .bss	0000000000000004 fini_done.1576
0000000000000000 l    df *ABS*	0000000000000000 sys_exit.c
0000000000000000 l    df *ABS*	0000000000000000 impure.c
0000000080005c88 l     O .data	00000000000000b0 impure_data
0000000000000000 l    df *ABS*	0000000000000000 inline.c
0000000000000000 l    df *ABS*	0000000000000000 
00000000800002f8 l       .init_array	0000000000000000 metal_constructors_end
00000000800002f8 l       .init_array	0000000000000000 __fini_array_end
00000000800002f8 l       .init_array	0000000000000000 metal_destructors_end
00000000800002f8 l       .init_array	0000000000000000 metal_destructors_start
00000000800002f8 l       .init_array	0000000000000000 __fini_array_start
00000000800002f0 l       .init_array	0000000000000000 __init_array_end
00000000800002f0 l       .init_array	0000000000000000 __preinit_array_end
00000000800002f0 l       .init_array	0000000000000000 __init_array_start
00000000800002f0 l       .init_array	0000000000000000 metal_constructors_start
00000000800002f0 l       .init_array	0000000000000000 __preinit_array_start
0000000080000c80 g     F .text	000000000000002a putchar
0000000080000840 g     O .rodata	0000000000000080 __metal_driver_vtable_sifive_uart0
0000000080001908 g     F .text	0000000000000026 metal_cpu_timer_get_interrupt_id
0000000080001804 g     F .text	000000000000002a _isatty_r
0000000080002dfe  w    F .text	00000000000000e2 metal_lc4_interrupt_vector_handler
0000000080000d30 g     F .text	00000000000000e8 _puts_r
000000008000182e g     F .text	000000000000002e _lseek_r
000000008000518c g     F .text	00000000000000b8 __metal_driver_sifive_uart0_set_baud_rate
0000000080001f40 g     F .text	0000000000000064 __metal_driver_riscv_clint0_set_vector_mode
0000000080006d28 g     O .bss	0000000000000008 uart0
0000000080004f9c g     F .text	000000000000005e __metal_driver_sifive_uart0_set_tx_watermark
0000000080002d1c  w    F .text	00000000000000e2 metal_lc3_interrupt_vector_handler
0000000080003992 g     F .text	0000000000000082 __metal_valid_interrupt_id
0000000080003e54 g     F .text	000000000000001e __metal_driver_riscv_cpu_controller_get_vector_mode
00000000800073a8 g       .data	0000000000000000 __global_pointer$
00000000800002f8 g     F .ctors	0000000000000024 metal_tty_init
00000000800018e2 g     F .text	0000000000000026 metal_cpu_timer_interrupt_controller
000000008000543e g     F .text	0000000000000054 _metal_clock_append_to_callbacks
00000000800043ee g     F .text	000000000000004e __metal_plic0_complete_interrupt
0000000080003c24 g     F .text	00000000000001d4 __metal_driver_riscv_cpu_controller_interrupt_register
0000000080001742 g     F .text	0000000000000038 __sseek
0000000080001268 g     F .text	0000000000000072 __sinit
0000000080000e34 g     F .text	00000000000000c6 __swbuf_r
0000000080006bf0 g       .data	0000000000000000 __tls_base
0000000080001220 g     F .text	0000000000000048 __sfmoreglue
0000000080006d30 g     O .bss	0000000000000004 custom_lock
000000008000185e g     F .text	0000000000000002 __malloc_unlock
0000000080001954 g     F .text	000000000000002e metal_cpu_get
00000000800004c8 g     O .rodata	00000000000000c8 __metal_driver_vtable_riscv_clint0
0000000080006d64 g       .bss	0000000000000000 metal_segment_bss_target_end
0000000080001c1c g     F .text	000000000000006c __metal_clint0_mtime_get
0000000080004202 g     F .text	0000000000000032 __metal_driver_cpu_get_instruction_length
0000000000000001 g       *ABS*	0000000000000000 __metal_chicken_bit
0000000080005092 g     F .text	000000000000003a __metal_driver_sifive_uart0_get_rx_watermark
0000000080004ca2 g     F .text	0000000000000056 __metal_driver_sifive_test0_exit
00000000800058c4 g     F .text	0000000000000008 __errno
00000000800008e0 g       .rodata	0000000000000000 metal_segment_itim_target_start
0000000080004f64 g     F .text	0000000000000038 __metal_driver_sifive_uart0_txready
0000000080004ede g     F .text	0000000000000044 __metal_driver_sifive_uart0_rx_interrupt_enable
0000000080006ba8 g     O .data	0000000000000008 uart0_msg
0000000080000196 g     F .init	000000000000000e __metal_synchronize_harts
000000008000098c g     F .text	0000000000000030 lock
0000000080006bf0 g       .data	0000000000000000 metal_segment_bss_target_start
0000000080001c88 g     F .text	000000000000009e __metal_driver_riscv_clint0_mtimecmp_set
00000000800017d8 g     F .text	000000000000002c _fstat_r
0000000080006d60 g     O .bss	0000000000000004 errno
0000000000000400 g       *ABS*	0000000000000000 __stack_size
0000000080005492 g     F .text	0000000000000032 metal_clock_register_pre_rate_change_callback
0000000080003268  w    F .text	00000000000000e2 metal_lc9_interrupt_vector_handler
00000000800000a0  w    F .init	0000000000000000 __metal_before_start
0000000080005be0  w    F .text	0000000000000016 metal_init_run
0000000080000778 g     O .rodata	00000000000000c8 __metal_driver_vtable_riscv_plic0
00000000800006f0 g     O .rodata	0000000000000088 __metal_driver_vtable_cpu
0000000080001aee g     F .text	0000000000000032 metal_uart_set_baud_rate
0000000080005362 g     F .text	00000000000000dc __metal_driver_sifive_uart0_init
0000000000000000 g       *ABS*	0000000000000000 __metal_eccscrub_bit
0000000080006d38 g     O .bss	0000000000000008 cpu
0000000080003ef0 g     F .text	0000000000000022 __metal_driver_cpu_mcycle_get
0000000080007170 g       .heap	0000000000000000 metal_segment_heap_target_start
0000000080001216 g     F .text	000000000000000a _cleanup_r
0000000080005d48 g     O .data	0000000000000010 __metal_dt_cpu_0
0000000080003186  w    F .text	00000000000000e2 metal_lc8_interrupt_vector_handler
0000000080004bce g     F .text	0000000000000082 __metal_driver_riscv_plic0_affinity_set_threshold
0000000080000e18 g     F .text	000000000000000a puts
00000000800035f0  w    F .text	00000000000000e2 metal_lc13_interrupt_vector_handler
0000000080001b20 g     F .text	000000000000002e metal_uart_get_device
0000000080002534 g     F .text	000000000000001a __metal_default_exception_handler
0000000080005726 g     F .text	000000000000002a _fstat
00000000800022da g     F .text	0000000000000038 __metal_driver_riscv_clint0_set_interrupt
0000000080003e72 g     F .text	0000000000000060 __metal_driver_riscv_cpu_controller_set_vector_mode
00000000800023be g     F .text	0000000000000030 __metal_driver_cpu_get
0000000080000628 g     O .rodata	00000000000000c8 __metal_driver_vtable_riscv_cpu_intc
0000000080002420 g     F .text	0000000000000018 __metal_interrupt_global_disable
0000000080004c50 g     F .text	000000000000002c __metal_driver_riscv_plic0_affinity_get_threshold
00000000800030a4  w    F .text	00000000000000e2 metal_lc7_interrupt_vector_handler
000000008000334a  w    F .text	00000000000000e2 metal_lc10_interrupt_vector_handler
0000000080001696 g     F .text	000000000000002a _sbrk_r
00000000800049b6 g     F .text	000000000000005a __metal_driver_riscv_plic0_disable
0000000080003af2 g     F .text	0000000000000054 __metal_exception_register
0000000080005ae8 g     F .text	000000000000007c metal_init
0000000080001860 g     F .text	000000000000002e _read_r
000000008000400c g     F .text	000000000000001a __metal_driver_cpu_timer_controller_interrupt
0000000080010000 g       *ABS*	0000000000000000 metal_memory_0_memory_end
00000000800026a0 g     F .text	000000000000006c __metal_default_sw_handler
00000000800054c4 g     F .text	0000000000000032 metal_clock_register_post_rate_change_callback
0000000080004e18 g     F .text	0000000000000020 __metal_driver_sifive_uart0_interrupt_controller
0000000080005750 g     F .text	000000000000002c _isatty
0000000080004e58 g     F .text	0000000000000044 __metal_driver_sifive_uart0_tx_interrupt_enable
0000000080006bd0  w    O .data	0000000000000008 __metal_uart_table
0000000080006bc0 g     O .data	0000000000000008 _global_impure_ptr
000000008000270c  w    F .text	00000000000000e2 metal_timer_interrupt_vector_handler
000000008000592e g     F .text	000000000000006a __libc_init_array
000000008000342c  w    F .text	00000000000000e2 metal_lc11_interrupt_vector_handler
0000000080003df8 g     F .text	000000000000002e __metal_driver_riscv_cpu_controller_interrupt_enable
00000000800057dc g     F .text	0000000000000064 _sbrk
00000000800002c8 g     F .init	0000000000000002 _init
0000000080002482 g     F .text	000000000000001a __metal_interrupt_timer_disable
00000000800040ce g     F .text	0000000000000066 __metal_driver_cpu_clear_sw_ipi
0000000080004e9c g     F .text	0000000000000042 __metal_driver_sifive_uart0_tx_interrupt_disable
00000000800058f6 g     F .text	0000000000000038 __libc_fini_array
0000000080005b64 g     F .text	000000000000007c metal_fini
0000000080004054 g     F .text	0000000000000014 __metal_driver_cpu_get_sw_interrupt_id
0000000080004272 g     F .text	0000000000000020 __metal_driver_cpu_get_buserror
0000000080005c88 g       .data	0000000000000000 metal_segment_data_target_start
00000000800024d4 g     F .text	0000000000000030 __metal_interrupt_local_enable
00000000800022a2 g     F .text	0000000000000038 __metal_driver_riscv_clint0_clear_interrupt
0000000080005c0c g     F .text	0000000000000038 metal_tty_putc
0000000080006bb0 g     O .data	0000000000000008 irq_msg
000000008000464e g     F .text	000000000000001a __metal_plic0_default_handler
0000000080005840  w    F .text	000000000000007a write
0000000080000caa g     F .text	0000000000000086 _putc_r
0000000000000000 g       *ABS*	0000000000000000 __tbss_size
0000000000000800 g       *ABS*	0000000000000000 __heap_size
0000000080004a10 g     F .text	0000000000000036 __metal_driver_riscv_plic0_set_threshold
00000000800027ee g     F .text	0000000000000018 __metal_default_beu_handler
0000000080000420 g     O .rodata	0000000000000038 __sf_fake_stderr
0000000080000000 g       *ABS*	0000000000000000 metal_memory_0_memory_start
000000008000188e g     F .text	0000000000000026 metal_cpu_get_mtime
00000000800024b8 g     F .text	000000000000001c __metal_interrupt_external_disable
00000000800009bc g     F .text	000000000000001a unlock
0000000080004e38 g     F .text	0000000000000020 __metal_driver_sifive_uart0_get_interrupt_id
0000000080003ed2 g     F .text	000000000000001e __metal_driver_riscv_cpu_controller_command_request
0000000080001ac8 g     F .text	0000000000000026 metal_uart_txready
0000000080003b46 g     F .text	00000000000000de __metal_driver_riscv_cpu_controller_interrupt_init
00000000800041b8 g     F .text	000000000000004a __metal_driver_cpu_exception_register
0000000080002438 g     F .text	0000000000000018 __metal_interrupt_software_enable
0000000080002b58  w    F .text	00000000000000e2 metal_lc1_interrupt_vector_handler
00000000800014f0 g     F .text	00000000000000ae _free_r
0000000080006c00 g     O .bss	0000000000000008 _global_atexit
00000000800044ca g     F .text	0000000000000076 __metal_driver_riscv_plic0_set_priority
0000000080000924 g     F .text	0000000000000068 send_message
0000000080003896 g     F .text	0000000000000050 __metal_controller_interrupt_vector_mode
0000000080005a22 g     F .text	00000000000000c6 __call_exitprocs
0000000080007170 g       .stack	0000000000000000 _sp
00000000800002f0 g     O .init_array	0000000000000008 _metal_tty_init_ptr
00000000800001a4 g     F .init	0000000000000000 _start
000000008000577c g     F .text	0000000000000032 _lseek
0000000080004198 g     F .text	0000000000000020 __metal_driver_cpu_controller_interrupt
0000000080004234 g     F .text	000000000000001e __metal_driver_cpu_get_exception_pc
000000008000249c g     F .text	000000000000001c __metal_interrupt_external_enable
0000000080005998 g     F .text	000000000000008a __register_exitproc
00000000800050cc g     F .text	0000000000000044 __metal_driver_sifive_uart0_putc
0000000080004722 g     F .text	0000000000000176 __metal_driver_riscv_plic0_init
000000008000495c g     F .text	000000000000005a __metal_driver_riscv_plic0_enable
0000000080002fc2  w    F .text	00000000000000e2 metal_lc6_interrupt_vector_handler
00000000800023ee g     F .text	000000000000001a __metal_myhart_id
00000000800025be  w    F .text	00000000000000e2 metal_software_interrupt_vector_handler
0000000080003e26 g     F .text	000000000000002e __metal_driver_riscv_cpu_controller_interrupt_disable
00000000800017ae g     F .text	000000000000002a _close_r
0000000080006d40 g     O .bss	0000000000000004 irq_msg_len
000000008000516a g     F .text	0000000000000022 __metal_driver_sifive_uart0_get_baud_rate
0000000080001df8 g     F .text	0000000000000100 __metal_driver_riscv_clint0_register
0000000080005d38 g     O .data	0000000000000010 __metal_dt_clint_2000000
0000000080000efa g     F .text	0000000000000112 __swsetup_r
00000000800019c0 g     F .text	0000000000000042 metal_interrupt_register_handler
00000000800012da g     F .text	000000000000009c __sfp
00000000800016c0 g     F .text	0000000000000032 __sread
00000000800002ca  w    F .init	0000000000000000 secondary_main
0000000080002568  w    F .text	0000000000000056 metal_interrupt_vector_handler
000000008000185c g     F .text	0000000000000002 __malloc_lock
0000000080004f22 g     F .text	0000000000000042 __metal_driver_sifive_uart0_rx_interrupt_disable
0000000080006d48 g     O .bss	0000000000000008 tmr_intr
000000008000114a g     F .text	0000000000000066 _fflush_r
000000008000448a g     F .text	0000000000000040 __metal_plic0_get_threshold
0000000080000458 g     O .rodata	0000000000000038 __sf_fake_stdin
0000000080003a14 g     F .text	00000000000000de __metal_local_interrupt_enable
0000000080002148 g     F .text	000000000000015a __metal_driver_riscv_clint0_command_request
00000000800014e0 g     F .text	0000000000000010 memset
0000000080002ee0  w    F .text	00000000000000e2 metal_lc5_interrupt_vector_handler
0000000080000a6e g     F .text	0000000000000212 main
0000000080006bf0 g       .data	0000000000000000 metal_segment_data_target_end
0000000080005034 g     F .text	000000000000005e __metal_driver_sifive_uart0_set_rx_watermark
0000000080004068 g     F .text	0000000000000066 __metal_driver_cpu_set_sw_ipi
0000000080004134 g     F .text	0000000000000064 __metal_driver_cpu_get_msip
000000008000551c g     F .text	000000000000001c metal_shutdown
00000000800008e0 g       .rodata	0000000000000000 metal_segment_itim_target_end
0000000080004252 g     F .text	0000000000000020 __metal_driver_cpu_set_exception_pc
00000000800043ac g     F .text	0000000000000042 __metal_plic0_claim_interrupt
0000000080004ffa g     F .text	000000000000003a __metal_driver_sifive_uart0_get_tx_watermark
000000008000177a g     F .text	0000000000000006 __sclose
000000008000350e  w    F .text	00000000000000e2 metal_lc12_interrupt_vector_handler
000000008000159e g     F .text	00000000000000f8 _malloc_r
0000000080001f22 g     F .text	000000000000001e __metal_driver_riscv_clint0_get_vector_mode
0000000080003f12 g     F .text	0000000000000032 __metal_driver_cpu_timebase_get
0000000080004b20 g     F .text	00000000000000ae __metal_driver_riscv_plic0_affinity_disable
0000000080000000 g       .init	0000000000000000 _enter
0000000080001982 g     F .text	000000000000001a metal_cpu_get_current_hartid
0000000080005600 g       .text	0000000000000000 __metal_vector_table
00000000800008e0 g       *ABS*	0000000000000000 metal_segment_itim_source_start
0000000080006bc8  w    O .data	0000000000000008 __metal_cpu_table
0000000080005d58 g     O .data	0000000000000590 __metal_dt_cpu_0_interrupt_controller
00000000800002c8 g     F .init	0000000000000002 _fini
0000000080004540 g     F .text	000000000000003e __metal_driver_riscv_plic0_get_priority
0000000080000900 g     F .text	0000000000000024 display_banner
0000000080002408 g     F .text	0000000000000018 __metal_interrupt_global_enable
00000000800058ba g     F .text	000000000000000a atexit
0000000080005c44 g     F .text	000000000000002c metal_tty_putc_raw
0000000080001780 g     F .text	000000000000002e _write_r
0000000080002468 g     F .text	000000000000001a __metal_interrupt_timer_enable
0000000080005110 g     F .text	000000000000005a __metal_driver_sifive_uart0_getc
0000000080002076 g     F .text	00000000000000d2 __metal_driver_riscv_clint0_disable
0000000080006bb8 g     O .data	0000000000000008 _impure_ptr
0000000080003f9c g     F .text	0000000000000070 __metal_driver_cpu_mtimecmp_set
000000008000100c g     F .text	000000000000013e __sflush_r
00000000800054f6 g     F .text	0000000000000026 __metal_shutdown_exit
0000000080004a46 g     F .text	000000000000002c __metal_driver_riscv_plic0_get_threshold
0000000080006d50 g     O .bss	0000000000000008 cpu_intr
0000000080001fa4 g     F .text	00000000000000d2 __metal_driver_riscv_clint0_enable
0000000080006be0 g     O .data	0000000000000008 __metal_driver_vtable_sifive_test0
0000000080005c88 g       *ABS*	0000000000000000 metal_segment_data_source_start
0000000080000188 g       .init	0000000000000000 early_trap_vector
0000000080007970 g       .heap	0000000000000000 metal_segment_heap_target_end
0000000080006b68 g     O .data	0000000000000040 __metal_dt_uart_10013000
00000000800038e6 g     F .text	00000000000000ac __metal_controller_interrupt_vector
00000000800062e8 g     O .data	0000000000000880 __metal_dt_interrupt_controller_c000000
00000000800013e4 g     F .text	000000000000005a __swhatbuf_r
0000000080002806 g     F .text	000000000000004a __metal_default_timer_handler
0000000080005840 g     F .text	000000000000007a _write
0000000080004668 g     F .text	00000000000000ba __metal_plic0_handler
0000000080002c3a  w    F .text	00000000000000e2 metal_lc2_interrupt_vector_handler
00000000800037b4  w    F .text	00000000000000e2 metal_lc15_interrupt_vector_handler
000000008000192e g     F .text	0000000000000026 metal_cpu_interrupt_controller
0000000080006bd8 g     O .data	0000000000000008 __metal_dt_test_100000
000000008000199c g     F .text	0000000000000024 metal_interrupt_init
00000000800016f2 g     F .text	0000000000000050 __swrite
00000000800018b4 g     F .text	000000000000002e metal_cpu_set_mtimecmp
00000000800058cc g     F .text	000000000000002a exit
0000000080001376 g     F .text	000000000000006e _fwalk_reent
0000000080000490 g     O .rodata	0000000000000038 __sf_fake_stdout
000000008000254e g     F .text	000000000000001a __metal_default_interrupt_handler
0000000080001a02 g     F .text	0000000000000032 metal_interrupt_enable
00000000800057ae g     F .text	000000000000002e _read
0000000080001a96 g     F .text	0000000000000032 metal_uart_putc
0000000080005bf6  w    F .text	0000000000000016 metal_fini_run
0000000080002880 g     F .text	00000000000001d4 __metal_exception_handler
0000000080002a76  w    F .text	00000000000000e2 metal_lc0_interrupt_vector_handler
0000000080005c70 g     F .text	0000000000000018 _exit
00000000800009d6 g     F .text	0000000000000098 timer_isr
0000000080003f44 g     F .text	0000000000000058 __metal_driver_cpu_mtime_get
000000008000143e g     F .text	00000000000000a2 __smakebuf_r
0000000080001ef8 g     F .text	000000000000002a __metal_driver_riscv_clint0_vector_register
0000000080000e22 g     F .text	0000000000000012 strlen
0000000080006bf8 g     O .bss	0000000000000008 __malloc_sbrk_start
00000000800036d2  w    F .text	00000000000000e2 metal_lc14_interrupt_vector_handler
0000000080001d5c g     F .text	000000000000009c __metal_driver_riscv_clint0_init
0000000080006bf0 g     O .bss	0000000000000008 __malloc_free_list
0000000080006d58 g     O .bss	0000000000000004 uart0_msg_len
0000000080006d5c g     O .bss	0000000000000004 tmr_id
0000000080004026 g     F .text	0000000000000014 __metal_driver_cpu_get_timer_interrupt_id
000000008000457e g     F .text	00000000000000d0 __metal_plic0_enable
0000000080000092  w      .init	0000000000000000 __register_frame_info
000000008000403a g     F .text	000000000000001a __metal_driver_cpu_sw_controller_interrupt
0000000080002504 g     F .text	0000000000000030 __metal_interrupt_local_disable
0000000080002450 g     F .text	0000000000000018 __metal_interrupt_software_disable
0000000080001a66 g     F .text	0000000000000030 metal_uart_init
000000008000443c g     F .text	000000000000004e __metal_plic0_set_threshold
0000000080004a72 g     F .text	00000000000000ae __metal_driver_riscv_plic0_affinity_enable
0000000080005700 g     F .text	0000000000000026 _close
0000000000000000 g       *ABS*	0000000000000000 __metal_boot_hart
0000000080004898 g     F .text	00000000000000c4 __metal_driver_riscv_plic0_register
0000000080001a34 g     F .text	0000000000000032 metal_interrupt_disable



Disassembly of section .init:

0000000080000000 <_enter>:
_enter():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
    80000000:	00007197          	auipc	gp,0x7
    80000004:	3a818193          	addi	gp,gp,936 # 800073a8 <__global_pointer$>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:28
.option pop

    /* trap over the chicken bit register clearing, aloe & fe310 dont have it */
    la t0, 1f
    80000008:	00000297          	auipc	t0,0x0
    8000000c:	01828293          	addi	t0,t0,24 # 80000020 <_enter+0x20>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:29
    csrw mtvec, t0
    80000010:	30529073          	csrw	mtvec,t0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:31
    /* chicken bit is enable if core are sifive series. */
    la t0, __metal_chicken_bit
    80000014:	00100293          	li	t0,1
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:32
    beqz t0, 1f
    80000018:	00028463          	beqz	t0,80000020 <_enter+0x20>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:34
    /* If set, always clear the feature disable register for all cores series */
    csrwi 0x7C1, 0
    8000001c:	7c105073          	csrwi	0x7c1,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:39
.align 4
1:
    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
    80000020:	00000297          	auipc	t0,0x0
    80000024:	16828293          	addi	t0,t0,360 # 80000188 <early_trap_vector>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:40
    csrw mtvec, t0
    80000028:	30529073          	csrw	mtvec,t0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:48
     * C, so here we set up a C environment. First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
    8000002c:	80000117          	auipc	sp,0x80000
    80000030:	fd410113          	addi	sp,sp,-44 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:55
   /* The METAL is designed for a bare-metal environment and therefore is expected
    * to define its own stack pointer. We also align the stack pointer here
    * because the only RISC-V ABI that's currently defined, mandates 16-byte
    * stack alignment. */

    bne sp, zero, 1f
    80000034:	00011463          	bnez	sp,8000003c <_enter+0x3c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:56
    la sp, _sp
    80000038:	dc818113          	addi	sp,gp,-568 # 80007170 <_sp>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:59
1:
    /* Increment by hartid number of stack sizes */
    csrr a0, mhartid
    8000003c:	f1402573          	csrr	a0,mhartid
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:60
    li t0, 0
    80000040:	4281                	li	t0,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:61
    la t1, __stack_size
    80000042:	40000313          	li	t1,1024
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:63
1:
    andi sp, sp, -16
    80000046:	ff017113          	andi	sp,sp,-16
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:64
    beq t0, a0, 1f
    8000004a:	00a28563          	beq	t0,a0,80000054 <_enter+0x54>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:65
    add sp, sp, t1
    8000004e:	911a                	add	sp,sp,t1
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:66
    addi t0, t0, 1
    80000050:	0285                	addi	t0,t0,1
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:67
    j 1b
    80000052:	bfd5                	j	80000046 <_enter+0x46>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:76
     * just skip over the call entirely.   Note that __metal_initialize isn't
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    la ra, __metal_before_start
    80000054:	00000097          	auipc	ra,0x0
    80000058:	04c08093          	addi	ra,ra,76 # 800000a0 <__metal_before_start>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:77
    beqz ra, 1f
    8000005c:	00008363          	beqz	ra,80000062 <_enter+0x62>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:78
    jalr ra
    80000060:	9082                	jalr	ra
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:84
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
    80000062:	f1402573          	csrr	a0,mhartid
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:85
    li a1, 0
    80000066:	4581                	li	a1,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:86
    li a2, 0
    80000068:	4601                	li	a2,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:87
    call _start
    8000006a:	13a000ef          	jal	ra,800001a4 <_start>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:92

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
    8000006e:	80000097          	auipc	ra,0x80000
    80000072:	f9208093          	addi	ra,ra,-110 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:93
    beqz ra, 1f
    80000076:	00008363          	beqz	ra,8000007c <_enter+0x7c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:94
    jalr ra
    8000007a:	9082                	jalr	ra
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:99
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
    8000007c:	00000297          	auipc	t0,0x0
    80000080:	00c28293          	addi	t0,t0,12 # 80000088 <_enter+0x88>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:100
     csrw mtvec, t0
    80000084:	30529073          	csrw	mtvec,t0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:102
1:
     lw t1, 0(x0)
    80000088:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:103
     j 1b
    8000008c:	bff5                	j	80000088 <_enter+0x88>
    8000008e:	0000                	unimp
	...

0000000080000092 <__register_frame_info>:
__register_frame_info():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/entry.S:117
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
    80000092:	8082                	ret

0000000080000094 <_metal_memory_scrub>:
_metal_memory_scrub():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:23
#if __riscv_xlen == 32
    sw      x0, 0(t1)
    addi    t1, t1, 4
    blt     t1, t2, 1b
#else
    sd      x0, 0(t1)
    80000094:	00033023          	sd	zero,0(t1)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:24
    addi    t1, t1, 8
    80000098:	0321                	addi	t1,t1,8
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:25
    blt     t1, t2, 1b
    8000009a:	fe734de3          	blt	t1,t2,80000094 <_metal_memory_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:27
#endif
    ret
    8000009e:	8082                	ret

00000000800000a0 <__metal_before_start>:
__metal_before_start():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:38
.weak __metal_before_start
.global __metal_before_start
.type __metal_before_start, @function
__metal_before_start:
    /* Save caller ra */
    mv      s0, ra
    800000a0:	8406                	mv	s0,ra
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:40

    la      t0, __metal_eccscrub_bit
    800000a2:	80000297          	auipc	t0,0x80000
    800000a6:	f5e28293          	addi	t0,t0,-162 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:41
    beqz    t0, skip_scrub
    800000aa:	0c028c63          	beqz	t0,80000182 <skip_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:43

    la      t0, __metal_boot_hart
    800000ae:	80000297          	auipc	t0,0x80000
    800000b2:	f5228293          	addi	t0,t0,-174 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:44
    csrr    a5, mhartid
    800000b6:	f14027f3          	csrr	a5,mhartid
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:46
    /* Disable machine interrupts to be safe */
    li      a3, 8
    800000ba:	46a1                	li	a3,8
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:47
    csrc    mstatus, a3
    800000bc:	3006b073          	csrc	mstatus,a3
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:48
    bne     a5, t0, wait_scrub
    800000c0:	0a579d63          	bne	a5,t0,8000017a <wait_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:53

    /* Zero out itim memory. */
    .weak metal_itim_0_memory_start
    .weak metal_itim_0_memory_end
    la      t1, metal_itim_0_memory_start
    800000c4:	80000317          	auipc	t1,0x80000
    800000c8:	f3c30313          	addi	t1,t1,-196 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:54
    la      t2, metal_itim_0_memory_end
    800000cc:	80000397          	auipc	t2,0x80000
    800000d0:	f3438393          	addi	t2,t2,-204 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:55
    beq     t1, t2, dtim_scrub
    800000d4:	02730063          	beq	t1,t2,800000f4 <dtim_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:56
    jal     _metal_memory_scrub
    800000d8:	fbdff0ef          	jal	ra,80000094 <_metal_memory_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:59
    .weak metal_itim_1_memory_start
    .weak metal_itim_1_memory_end
    la      t1, metal_itim_1_memory_start
    800000dc:	80000317          	auipc	t1,0x80000
    800000e0:	f2430313          	addi	t1,t1,-220 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:60
    la      t2, metal_itim_1_memory_end
    800000e4:	80000397          	auipc	t2,0x80000
    800000e8:	f1c38393          	addi	t2,t2,-228 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:61
    beq     t1, t2, dtim_scrub
    800000ec:	00730463          	beq	t1,t2,800000f4 <dtim_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:62
    jal     _metal_memory_scrub
    800000f0:	fa5ff0ef          	jal	ra,80000094 <_metal_memory_scrub>

00000000800000f4 <dtim_scrub>:
dtim_scrub():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:68

dtim_scrub:
    /* Zero out dtim memory. */
    .weak metal_dtim_0_memory_start
    .weak metal_dtim_0_memory_end
    la      t1, metal_dtim_0_memory_start
    800000f4:	80000317          	auipc	t1,0x80000
    800000f8:	f0c30313          	addi	t1,t1,-244 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:69
    la      t2, metal_dtim_0_memory_end
    800000fc:	80000397          	auipc	t2,0x80000
    80000100:	f0438393          	addi	t2,t2,-252 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:70
    beq     t1, t2, ils_scrub
    80000104:	00730463          	beq	t1,t2,8000010c <ils_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:71
    jal     _metal_memory_scrub
    80000108:	f8dff0ef          	jal	ra,80000094 <_metal_memory_scrub>

000000008000010c <ils_scrub>:
ils_scrub():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:77

ils_scrub:
    /* Zero out ils memory. */
    .weak metal_ils_0_memory_start
    .weak metal_ils_0_memory_end
    la      t1, metal_ils_0_memory_start
    8000010c:	80000317          	auipc	t1,0x80000
    80000110:	ef430313          	addi	t1,t1,-268 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:78
    la      t2, metal_ils_0_memory_end
    80000114:	80000397          	auipc	t2,0x80000
    80000118:	eec38393          	addi	t2,t2,-276 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:79
    beq     t1, t2, dls_scrub
    8000011c:	00730463          	beq	t1,t2,80000124 <dls_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:80
    jal     _metal_memory_scrub
    80000120:	f75ff0ef          	jal	ra,80000094 <_metal_memory_scrub>

0000000080000124 <dls_scrub>:
dls_scrub():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:86

dls_scrub:
    /* Zero out dls memory. */
    .weak metal_dls_0_memory_start
    .weak metal_dls_0_memory_end
    la      t1, metal_dls_0_memory_start
    80000124:	80000317          	auipc	t1,0x80000
    80000128:	edc30313          	addi	t1,t1,-292 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:87
    la      t2, metal_dls_0_memory_end
    8000012c:	80000397          	auipc	t2,0x80000
    80000130:	ed438393          	addi	t2,t2,-300 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:88
    beq     t1, t2, sram_scrub
    80000134:	00730463          	beq	t1,t2,8000013c <sram_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:89
    jal     _metal_memory_scrub
    80000138:	f5dff0ef          	jal	ra,80000094 <_metal_memory_scrub>

000000008000013c <sram_scrub>:
sram_scrub():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:95

sram_scrub:
    /* Zero out sram memory. */
    .weak metal_sys_sram_0_memory_start
    .weak metal_sys_sram_0_memory_end
    la      t1, metal_sys_sram_0_memory_start
    8000013c:	80000317          	auipc	t1,0x80000
    80000140:	ec430313          	addi	t1,t1,-316 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:96
    la      t2, metal_sys_sram_0_memory_end
    80000144:	80000397          	auipc	t2,0x80000
    80000148:	ebc38393          	addi	t2,t2,-324 # 0 <__metal_boot_hart>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:97
    beq     t1, t2, memory_scrub
    8000014c:	00730463          	beq	t1,t2,80000154 <memory_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:98
    jal     _metal_memory_scrub
    80000150:	f45ff0ef          	jal	ra,80000094 <_metal_memory_scrub>

0000000080000154 <memory_scrub>:
memory_scrub():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:104

memory_scrub:
    /* Zero out main memory. */
    .weak metal_memory_0_memory_start
    .weak metal_memory_0_memory_end
    la      t1, metal_memory_0_memory_start
    80000154:	00000317          	auipc	t1,0x0
    80000158:	eac30313          	addi	t1,t1,-340 # 80000000 <_enter>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:105
    la      t2, metal_memory_0_memory_end
    8000015c:	00010397          	auipc	t2,0x10
    80000160:	ea438393          	addi	t2,t2,-348 # 80010000 <metal_memory_0_memory_end>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:106
    beq     t1, t2, done_scrub
    80000164:	00730463          	beq	t1,t2,8000016c <done_scrub>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:107
    jal     _metal_memory_scrub
    80000168:	f2dff0ef          	jal	ra,80000094 <_metal_memory_scrub>

000000008000016c <done_scrub>:
done_scrub():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:110

done_scrub:
    lui     a4, 0x2000
    8000016c:	02000737          	lui	a4,0x2000
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:111
    li      a5,1
    80000170:	4785                	li	a5,1
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:112
    sw      a5,0(a4)
    80000172:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:113
    fence   w,rw
    80000174:	0130000f          	fence	w,rw
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:114
    j skip_scrub
    80000178:	a029                	j	80000182 <skip_scrub>

000000008000017a <wait_scrub>:
wait_scrub():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:117

wait_scrub:
    lui     a4, 0x2000
    8000017a:	02000737          	lui	a4,0x2000
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:118
    lw      a5, 0(a4)
    8000017e:	431c                	lw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:119
    beqz    a5, wait_scrub
    80000180:	dfed                	beqz	a5,8000017a <wait_scrub>

0000000080000182 <skip_scrub>:
skip_scrub():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:123

skip_scrub:
    /* Restore caller ra */
    mv      ra, s0
    80000182:	80a2                	mv	ra,s0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/scrub.S:124
    ret
    80000184:	8082                	ret
	...

0000000080000188 <early_trap_vector>:
early_trap_vector():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/trap.S:64
.section .text.metal.init.trapvec
.global early_trap_vector
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
    80000188:	342022f3          	csrr	t0,mcause
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/trap.S:65
    csrr t1, mepc
    8000018c:	34102373          	csrr	t1,mepc
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/trap.S:66
    csrr t2, mtval
    80000190:	343023f3          	csrr	t2,mtval
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/trap.S:67
    j early_trap_vector
    80000194:	bfd5                	j	80000188 <early_trap_vector>

0000000080000196 <__metal_synchronize_harts>:
__metal_synchronize_harts():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/synchronize_harts.c:19
/*
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init"))) void __metal_synchronize_harts() {
    80000196:	1141                	addi	sp,sp,-16
    80000198:	e422                	sd	s0,8(sp)
    8000019a:	0800                	addi	s0,sp,16
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/synchronize_harts.c:66
        while (METAL_MSIP(msip_base, hart) == 1)
            ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
    8000019c:	0001                	nop
    8000019e:	6422                	ld	s0,8(sp)
    800001a0:	0141                	addi	sp,sp,16
    800001a2:	8082                	ret

00000000800001a4 <_start>:
_start():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
    800001a4:	8406                	mv	s0,ra
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
    800001a6:	00007197          	auipc	gp,0x7
    800001aa:	20218193          	addi	gp,gp,514 # 800073a8 <__global_pointer$>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:50
.option pop

  /* Stack pointer is expected to be initialized before _start */

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
    800001ae:	00000293          	li	t0,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:51
  bne a0, t0, _skip_init
    800001b2:	0a551763          	bne	a0,t0,80000260 <_skip_init>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:60
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
    800001b6:	00006297          	auipc	t0,0x6
    800001ba:	ad228293          	addi	t0,t0,-1326 # 80005c88 <metal_segment_data_source_start>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:61
  la t1, metal_segment_data_target_start
    800001be:	00006317          	auipc	t1,0x6
    800001c2:	aca30313          	addi	t1,t1,-1334 # 80005c88 <metal_segment_data_source_start>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:62
  la t2, metal_segment_data_target_end
    800001c6:	00007397          	auipc	t2,0x7
    800001ca:	a2a38393          	addi	t2,t2,-1494 # 80006bf0 <__tls_base>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:64

  beq t0, t1, 2f
    800001ce:	00628c63          	beq	t0,t1,800001e6 <_start+0x42>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:65
  bge t1, t2, 2f
    800001d2:	00735a63          	bge	t1,t2,800001e6 <_start+0x42>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:75
  addi t0, t0, 4
  sw   a0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  ld   a0, 0(t0)
    800001d6:	0002b503          	ld	a0,0(t0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:76
  addi t0, t0, 8
    800001da:	02a1                	addi	t0,t0,8
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:77
  sd   a0, 0(t1)
    800001dc:	00a33023          	sd	a0,0(t1)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:78
  addi t1, t1, 8
    800001e0:	0321                	addi	t1,t1,8
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:79
  blt  t1, t2, 1b
    800001e2:	fe734ae3          	blt	t1,t2,800001d6 <_start+0x32>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:84
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
    800001e6:	00000297          	auipc	t0,0x0
    800001ea:	6fa28293          	addi	t0,t0,1786 # 800008e0 <metal_segment_itim_source_start>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:85
  la t1, metal_segment_itim_target_start
    800001ee:	00000317          	auipc	t1,0x0
    800001f2:	6f230313          	addi	t1,t1,1778 # 800008e0 <metal_segment_itim_source_start>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:86
  la t2, metal_segment_itim_target_end
    800001f6:	00000397          	auipc	t2,0x0
    800001fa:	6ea38393          	addi	t2,t2,1770 # 800008e0 <metal_segment_itim_source_start>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:88

  beq t0, t1, 2f
    800001fe:	00628c63          	beq	t0,t1,80000216 <_start+0x72>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:89
  bge t1, t2, 2f
    80000202:	00735a63          	bge	t1,t2,80000216 <_start+0x72>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:99
  addi t0, t0, 4
  sw   a0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  ld   a0, 0(t0)
    80000206:	0002b503          	ld	a0,0(t0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:100
  addi t0, t0, 8
    8000020a:	02a1                	addi	t0,t0,8
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:101
  sd   a0, 0(t1)
    8000020c:	00a33023          	sd	a0,0(t1)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:102
  addi t1, t1, 8
    80000210:	0321                	addi	t1,t1,8
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:103
  blt  t1, t2, 1b
    80000212:	fe734ae3          	blt	t1,t2,80000206 <_start+0x62>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:109
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
    80000216:	0000100f          	fence.i
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:112

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
    8000021a:	00007317          	auipc	t1,0x7
    8000021e:	9d630313          	addi	t1,t1,-1578 # 80006bf0 <__tls_base>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:113
  la t2, metal_segment_bss_target_end
    80000222:	9bc18393          	addi	t2,gp,-1604 # 80006d64 <metal_segment_bss_target_end>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:115

  bge t1, t2, 2f
    80000226:	00735763          	bge	t1,t2,80000234 <_start+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:123
#if __riscv_xlen == 32
  sw   x0, 0(t1)
  addi t1, t1, 4
  blt  t1, t2, 1b
#else
  sd   x0, 0(t1)
    8000022a:	00033023          	sd	zero,0(t1)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:124
  addi t1, t1, 8
    8000022e:	0321                	addi	t1,t1,8
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:125
  blt  t1, t2, 1b
    80000230:	fe734de3          	blt	t1,t2,8000022a <_start+0x86>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:131
#endif
2:

  /* Set TLS pointer */
  .weak __tls_base	
  la tp, __tls_base
    80000234:	00007217          	auipc	tp,0x7
    80000238:	9bc20213          	addi	tp,tp,-1604 # 80006bf0 <__tls_base>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:136

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
    8000023c:	c211                	beqz	a2,80000240 <_start+0x9c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:137
  jalr a2
    8000023e:	9602                	jalr	a2
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:141
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
    80000240:	00005517          	auipc	a0,0x5
    80000244:	6b650513          	addi	a0,a0,1718 # 800058f6 <__libc_fini_array>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:142
  call atexit
    80000248:	672050ef          	jal	ra,800058ba <atexit>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:143
  call __libc_init_array
    8000024c:	6e2050ef          	jal	ra,8000592e <__libc_init_array>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:147

  /* Register metal_fini_run as a destructor and call metal_init_run to
   * run and setup Metal constructors */
  la a0, metal_fini_run
    80000250:	00006517          	auipc	a0,0x6
    80000254:	9a650513          	addi	a0,a0,-1626 # 80005bf6 <metal_fini_run>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:148
  call atexit
    80000258:	662050ef          	jal	ra,800058ba <atexit>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:149
  call metal_init_run
    8000025c:	185050ef          	jal	ra,80005be0 <metal_init_run>

0000000080000260 <_skip_init>:
_skip_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:155

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
    80000260:	f37ff0ef          	jal	ra,80000196 <__metal_synchronize_harts>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:158

  /* Disable and clear all interrupt sources */
  li   a3, -1
    80000264:	56fd                	li	a3,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:159
  csrc mie, a3
    80000266:	3046b073          	csrc	mie,a3
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:160
  csrc mip, a3
    8000026a:	3446b073          	csrc	mip,a3
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:164

  /* The delegation CSRs exist if user mode interrupts (N extension) or
   * supervisor mode (S extension) are supported */
  csrr a5, misa
    8000026e:	301027f3          	csrr	a5,misa
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:165
  lui  a4, 0x42
    80000272:	00042737          	lui	a4,0x42
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:166
  and  a4, a4, a5
    80000276:	8f7d                	and	a4,a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:167
  beqz a4, 1f
    80000278:	c709                	beqz	a4,80000282 <_skip_init+0x22>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:168
  csrc mideleg, a3
    8000027a:	3036b073          	csrc	mideleg,a3
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:169
  csrc medeleg, a3
    8000027e:	3026b073          	csrc	medeleg,a3
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:173
1:

  /* The satp CSR exists if supervisor mode (S extension) is supported */
  lui  a4, 0x40
    80000282:	00040737          	lui	a4,0x40
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:174
  and  a4, a4, a5
    80000286:	8f7d                	and	a4,a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:175
  beqz a4, 1f
    80000288:	c319                	beqz	a4,8000028e <_skip_init+0x2e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:176
  csrc satp, a3
    8000028a:	1806b073          	csrc	satp,a3
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:180
1:

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  li   a4, 0x10028
    8000028e:	00010737          	lui	a4,0x10
    80000292:	0287071b          	addiw	a4,a4,40
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:181
  and  a5, a5, a4
    80000296:	8ff9                	and	a5,a5,a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:182
  beqz a5, 1f
    80000298:	cb89                	beqz	a5,800002aa <_skip_init+0x4a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:183
  csrr a5, mstatus
    8000029a:	300027f3          	csrr	a5,mstatus
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:184
  lui  a4, 0x2
    8000029e:	6709                	lui	a4,0x2
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:185
  or   a5, a5, a4
    800002a0:	8fd9                	or	a5,a5,a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:186
  csrw mstatus, a5
    800002a2:	30079073          	csrw	mstatus,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:187
  csrwi fcsr, 0
    800002a6:	00305073          	csrwi	fcsr,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:193
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
    800002aa:	4505                	li	a0,1
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:194
  la a1, argv  /* argv = {"libgloss", NULL} */
    800002ac:	00000597          	auipc	a1,0x0
    800002b0:	61458593          	addi	a1,a1,1556 # 800008c0 <argv>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:195
  la a2, envp  /* envp = {NULL} */
    800002b4:	00000617          	auipc	a2,0x0
    800002b8:	61460613          	addi	a2,a2,1556 # 800008c8 <envp>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:196
  call secondary_main
    800002bc:	00e000ef          	jal	ra,800002ca <secondary_main>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:202

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
    800002c0:	60c050ef          	jal	ra,800058cc <exit>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:207

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
    800002c4:	80a2                	mv	ra,s0
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:208
  ret
    800002c6:	8082                	ret

00000000800002c8 <_fini>:
_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:220
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
    800002c8:	8082                	ret

00000000800002ca <secondary_main>:
secondary_main():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:231
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
    800002ca:	1141                	addi	sp,sp,-16
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:235
#if __riscv_xlen == 32
  sw ra, 4(sp)
#else
  sd ra, 8(sp)
    800002cc:	e406                	sd	ra,8(sp)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:237
#endif
  csrr t0, mhartid
    800002ce:	f14022f3          	csrr	t0,mhartid
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:238
  la t1, __metal_boot_hart
    800002d2:	00000313          	li	t1,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:239
  beq t0, t1, 2f
    800002d6:	00628563          	beq	t0,t1,800002e0 <secondary_main+0x16>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:241
1:
  wfi
    800002da:	10500073          	wfi
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:242
  j 1b
    800002de:	bff5                	j	800002da <secondary_main+0x10>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:244
2:
  call main
    800002e0:	78e000ef          	jal	ra,80000a6e <main>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:248
#if __riscv_xlen == 32
  lw ra, 4(sp)
#else
  ld ra, 8(sp)
    800002e4:	60a2                	ld	ra,8(sp)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:250
#endif
  addi sp, sp, 16
    800002e6:	0141                	addi	sp,sp,16
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/crt0.S:251
  ret
    800002e8:	8082                	ret

Disassembly of section .ctors:

00000000800002f8 <metal_tty_init>:
metal_tty_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:35

#ifndef __METAL_DT_STDOUT_UART_BAUD
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

METAL_CONSTRUCTOR(metal_tty_init) {
    800002f8:	1141                	addi	sp,sp,-16
    800002fa:	e406                	sd	ra,8(sp)
    800002fc:	e022                	sd	s0,0(sp)
    800002fe:	0800                	addi	s0,sp,16
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:36
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
    80000300:	67f1                	lui	a5,0x1c
    80000302:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
    80000306:	00007517          	auipc	a0,0x7
    8000030a:	86250513          	addi	a0,a0,-1950 # 80006b68 <__metal_dt_uart_10013000>
    8000030e:	758010ef          	jal	ra,80001a66 <metal_uart_init>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:37
}
    80000312:	0001                	nop
    80000314:	60a2                	ld	ra,8(sp)
    80000316:	6402                	ld	s0,0(sp)
    80000318:	0141                	addi	sp,sp,16
    8000031a:	8082                	ret

Disassembly of section .text:

0000000080000900 <display_banner>:
display_banner():
C:\Users\Igor\git\tests\test_u54\src/main.c:28
char *uart0_msg = "Main Uart0.\n";
int uart0_msg_len;
char *irq_msg = "IRQ Handler - Uart0.\n";
int irq_msg_len;

void display_banner (void) {
    80000900:	1141                	addi	sp,sp,-16
    80000902:	e406                	sd	ra,8(sp)
    80000904:	e022                	sd	s0,0(sp)
    80000906:	0800                	addi	s0,sp,16
C:\Users\Igor\git\tests\test_u54\src/main.c:30

    printf("\n");
    80000908:	4529                	li	a0,10
    8000090a:	376000ef          	jal	ra,80000c80 <putchar>
C:\Users\Igor\git\tests\test_u54\src/main.c:31
    printf("               Welcome to SiFive!\n");
    8000090e:	00000517          	auipc	a0,0x0
    80000912:	a3a50513          	addi	a0,a0,-1478 # 80000348 <__fini_array_end+0x50>
    80000916:	502000ef          	jal	ra,80000e18 <puts>
C:\Users\Igor\git\tests\test_u54\src/main.c:33

}
    8000091a:	0001                	nop
    8000091c:	60a2                	ld	ra,8(sp)
    8000091e:	6402                	ld	s0,0(sp)
    80000920:	0141                	addi	sp,sp,16
    80000922:	8082                	ret

0000000080000924 <send_message>:
send_message():
C:\Users\Igor\git\tests\test_u54\src/main.c:35

void send_message (struct metal_uart *uart, char *msg, int len) {
    80000924:	7139                	addi	sp,sp,-64
    80000926:	fc06                	sd	ra,56(sp)
    80000928:	f822                	sd	s0,48(sp)
    8000092a:	0080                	addi	s0,sp,64
    8000092c:	fca43c23          	sd	a0,-40(s0)
    80000930:	fcb43823          	sd	a1,-48(s0)
    80000934:	87b2                	mv	a5,a2
    80000936:	fcf42623          	sw	a5,-52(s0)
C:\Users\Igor\git\tests\test_u54\src/main.c:37
   // transmitting message
   for (int i = 0; i < len; i++) {
    8000093a:	fe042623          	sw	zero,-20(s0)
    8000093e:	a815                	j	80000972 <send_message+0x4e>
C:\Users\Igor\git\tests\test_u54\src/main.c:38
	 metal_uart_putc(uart, msg[i]);
    80000940:	fec42783          	lw	a5,-20(s0)
    80000944:	fd043703          	ld	a4,-48(s0)
    80000948:	97ba                	add	a5,a5,a4
    8000094a:	0007c783          	lbu	a5,0(a5)
    8000094e:	2781                	sext.w	a5,a5
    80000950:	85be                	mv	a1,a5
    80000952:	fd843503          	ld	a0,-40(s0)
    80000956:	140010ef          	jal	ra,80001a96 <metal_uart_putc>
C:\Users\Igor\git\tests\test_u54\src/main.c:39
	 while (metal_uart_txready(uart) != 0) {};
    8000095a:	0001                	nop
C:\Users\Igor\git\tests\test_u54\src/main.c:39 (discriminator 1)
    8000095c:	fd843503          	ld	a0,-40(s0)
    80000960:	168010ef          	jal	ra,80001ac8 <metal_uart_txready>
    80000964:	87aa                	mv	a5,a0
    80000966:	fbfd                	bnez	a5,8000095c <send_message+0x38>
C:\Users\Igor\git\tests\test_u54\src/main.c:37 (discriminator 2)
   for (int i = 0; i < len; i++) {
    80000968:	fec42783          	lw	a5,-20(s0)
    8000096c:	2785                	addiw	a5,a5,1
    8000096e:	fef42623          	sw	a5,-20(s0)
C:\Users\Igor\git\tests\test_u54\src/main.c:37 (discriminator 1)
    80000972:	fec42703          	lw	a4,-20(s0)
    80000976:	fcc42783          	lw	a5,-52(s0)
    8000097a:	2701                	sext.w	a4,a4
    8000097c:	2781                	sext.w	a5,a5
    8000097e:	fcf741e3          	blt	a4,a5,80000940 <send_message+0x1c>
C:\Users\Igor\git\tests\test_u54\src/main.c:41
   }
}
    80000982:	0001                	nop
    80000984:	70e2                	ld	ra,56(sp)
    80000986:	7442                	ld	s0,48(sp)
    80000988:	6121                	addi	sp,sp,64
    8000098a:	8082                	ret

000000008000098c <lock>:
lock():
C:\Users\Igor\git\tests\test_u54\src/main.c:43

void lock(volatile unsigned int *lock) {
    8000098c:	7179                	addi	sp,sp,-48
    8000098e:	f422                	sd	s0,40(sp)
    80000990:	1800                	addi	s0,sp,48
    80000992:	fca43c23          	sd	a0,-40(s0)
C:\Users\Igor\git\tests\test_u54\src/main.c:45
	int t0, t1;
	__asm__ __volatile__(
    80000996:	fd843683          	ld	a3,-40(s0)
    8000099a:	fd843783          	ld	a5,-40(s0)
    8000099e:	4705                	li	a4,1
    800009a0:	4290                	lw	a2,0(a3)
    800009a2:	fe7d                	bnez	a2,800009a0 <lock+0x14>
    800009a4:	0ce6a62f          	amoswap.w.aq	a2,a4,(a3)
    800009a8:	fe65                	bnez	a2,800009a0 <lock+0x14>
    800009aa:	87b2                	mv	a5,a2
    800009ac:	fee42623          	sw	a4,-20(s0)
    800009b0:	fef42423          	sw	a5,-24(s0)
C:\Users\Igor\git\tests\test_u54\src/main.c:55
	        "   amoswap.w.aq %2, %1, %0\n"
	        "   bnez %2, 1b\n"
	        : "+A" (*lock), "=&r" (t0), "=&r" (t1)
	    	:: "memory"
	    );
}
    800009b4:	0001                	nop
    800009b6:	7422                	ld	s0,40(sp)
    800009b8:	6145                	addi	sp,sp,48
    800009ba:	8082                	ret

00000000800009bc <unlock>:
unlock():
C:\Users\Igor\git\tests\test_u54\src/main.c:57

void unlock(volatile unsigned int *lock) {
    800009bc:	1101                	addi	sp,sp,-32
    800009be:	ec22                	sd	s0,24(sp)
    800009c0:	1000                	addi	s0,sp,32
    800009c2:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\src/main.c:58
	__asm__ __volatile__(
    800009c6:	fe843783          	ld	a5,-24(s0)
    800009ca:	0a07a02f          	amoswap.w.rl	zero,zero,(a5)
C:\Users\Igor\git\tests\test_u54\src/main.c:63
	        "   amoswap.w.rl x0, x0, %0\n"
	        : "=A" (*lock)
	    	:: "memory"
	    );
}
    800009ce:	0001                	nop
    800009d0:	6462                	ld	s0,24(sp)
    800009d2:	6105                	addi	sp,sp,32
    800009d4:	8082                	ret

00000000800009d6 <timer_isr>:
timer_isr():
C:\Users\Igor\git\tests\test_u54\src/main.c:65

void timer_isr (int id, void *data) {
    800009d6:	7179                	addi	sp,sp,-48
    800009d8:	f406                	sd	ra,40(sp)
    800009da:	f022                	sd	s0,32(sp)
    800009dc:	ec26                	sd	s1,24(sp)
    800009de:	1800                	addi	s0,sp,48
    800009e0:	87aa                	mv	a5,a0
    800009e2:	fcb43823          	sd	a1,-48(s0)
    800009e6:	fcf42e23          	sw	a5,-36(s0)
C:\Users\Igor\git\tests\test_u54\src/main.c:68

    // Disable Timer interrupt
    metal_interrupt_disable(tmr_intr, tmr_id);
    800009ea:	9a018793          	addi	a5,gp,-1632 # 80006d48 <tmr_intr>
    800009ee:	6398                	ld	a4,0(a5)
    800009f0:	9b418793          	addi	a5,gp,-1612 # 80006d5c <tmr_id>
    800009f4:	439c                	lw	a5,0(a5)
    800009f6:	85be                	mv	a1,a5
    800009f8:	853a                	mv	a0,a4
    800009fa:	03a010ef          	jal	ra,80001a34 <metal_interrupt_disable>
C:\Users\Igor\git\tests\test_u54\src/main.c:71

    // lock
    lock(&custom_lock);
    800009fe:	98818513          	addi	a0,gp,-1656 # 80006d30 <custom_lock>
    80000a02:	f8bff0ef          	jal	ra,8000098c <lock>
C:\Users\Igor\git\tests\test_u54\src/main.c:76

    //printf("IRQ handler.\n");

    // transmitting message
    send_message(uart0, irq_msg, irq_msg_len);
    80000a06:	98018793          	addi	a5,gp,-1664 # 80006d28 <uart0>
    80000a0a:	6398                	ld	a4,0(a5)
    80000a0c:	00006797          	auipc	a5,0x6
    80000a10:	1a478793          	addi	a5,a5,420 # 80006bb0 <irq_msg>
    80000a14:	6394                	ld	a3,0(a5)
    80000a16:	99818793          	addi	a5,gp,-1640 # 80006d40 <irq_msg_len>
    80000a1a:	439c                	lw	a5,0(a5)
    80000a1c:	863e                	mv	a2,a5
    80000a1e:	85b6                	mv	a1,a3
    80000a20:	853a                	mv	a0,a4
    80000a22:	f03ff0ef          	jal	ra,80000924 <send_message>
C:\Users\Igor\git\tests\test_u54\src/main.c:79

    // unlock
    unlock(&custom_lock);
    80000a26:	98818513          	addi	a0,gp,-1656 # 80006d30 <custom_lock>
    80000a2a:	f93ff0ef          	jal	ra,800009bc <unlock>
C:\Users\Igor\git\tests\test_u54\src/main.c:82

    // set timer
    metal_cpu_set_mtimecmp(cpu, metal_cpu_get_mtime(cpu) + RTC_FREQ);
    80000a2e:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000a32:	6384                	ld	s1,0(a5)
    80000a34:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000a38:	639c                	ld	a5,0(a5)
    80000a3a:	853e                	mv	a0,a5
    80000a3c:	653000ef          	jal	ra,8000188e <metal_cpu_get_mtime>
    80000a40:	872a                	mv	a4,a0
    80000a42:	67a1                	lui	a5,0x8
    80000a44:	97ba                	add	a5,a5,a4
    80000a46:	85be                	mv	a1,a5
    80000a48:	8526                	mv	a0,s1
    80000a4a:	66b000ef          	jal	ra,800018b4 <metal_cpu_set_mtimecmp>
C:\Users\Igor\git\tests\test_u54\src/main.c:85

    // Enable Timer interrupt
    metal_interrupt_enable(tmr_intr, tmr_id);
    80000a4e:	9a018793          	addi	a5,gp,-1632 # 80006d48 <tmr_intr>
    80000a52:	6398                	ld	a4,0(a5)
    80000a54:	9b418793          	addi	a5,gp,-1612 # 80006d5c <tmr_id>
    80000a58:	439c                	lw	a5,0(a5)
    80000a5a:	85be                	mv	a1,a5
    80000a5c:	853a                	mv	a0,a4
    80000a5e:	7a5000ef          	jal	ra,80001a02 <metal_interrupt_enable>
C:\Users\Igor\git\tests\test_u54\src/main.c:86
}
    80000a62:	0001                	nop
    80000a64:	70a2                	ld	ra,40(sp)
    80000a66:	7402                	ld	s0,32(sp)
    80000a68:	64e2                	ld	s1,24(sp)
    80000a6a:	6145                	addi	sp,sp,48
    80000a6c:	8082                	ret

0000000080000a6e <main>:
main():
C:\Users\Igor\git\tests\test_u54\src/main.c:90


int main (void)
{
    80000a6e:	7179                	addi	sp,sp,-48
    80000a70:	f406                	sd	ra,40(sp)
    80000a72:	f022                	sd	s0,32(sp)
    80000a74:	ec26                	sd	s1,24(sp)
    80000a76:	1800                	addi	s0,sp,48
C:\Users\Igor\git\tests\test_u54\src/main.c:94
    int rc;

    // Lets go
    uart0_msg_len = strlen(uart0_msg);
    80000a78:	00006797          	auipc	a5,0x6
    80000a7c:	13078793          	addi	a5,a5,304 # 80006ba8 <uart0_msg>
    80000a80:	639c                	ld	a5,0(a5)
    80000a82:	853e                	mv	a0,a5
    80000a84:	39e000ef          	jal	ra,80000e22 <strlen>
    80000a88:	87aa                	mv	a5,a0
    80000a8a:	0007871b          	sext.w	a4,a5
    80000a8e:	9b018793          	addi	a5,gp,-1616 # 80006d58 <uart0_msg_len>
    80000a92:	c398                	sw	a4,0(a5)
C:\Users\Igor\git\tests\test_u54\src/main.c:95
    irq_msg_len = strlen(irq_msg);
    80000a94:	00006797          	auipc	a5,0x6
    80000a98:	11c78793          	addi	a5,a5,284 # 80006bb0 <irq_msg>
    80000a9c:	639c                	ld	a5,0(a5)
    80000a9e:	853e                	mv	a0,a5
    80000aa0:	382000ef          	jal	ra,80000e22 <strlen>
    80000aa4:	87aa                	mv	a5,a0
    80000aa6:	0007871b          	sext.w	a4,a5
    80000aaa:	99818793          	addi	a5,gp,-1640 # 80006d40 <irq_msg_len>
    80000aae:	c398                	sw	a4,0(a5)
C:\Users\Igor\git\tests\test_u54\src/main.c:96
    custom_lock = 0;
    80000ab0:	98818793          	addi	a5,gp,-1656 # 80006d30 <custom_lock>
    80000ab4:	0007a023          	sw	zero,0(a5)
C:\Users\Igor\git\tests\test_u54\src/main.c:99

    // Lets get the CPU and and its interrupt
    cpu = metal_cpu_get(metal_cpu_get_current_hartid());
    80000ab8:	6cb000ef          	jal	ra,80001982 <metal_cpu_get_current_hartid>
    80000abc:	87aa                	mv	a5,a0
    80000abe:	2781                	sext.w	a5,a5
    80000ac0:	853e                	mv	a0,a5
    80000ac2:	693000ef          	jal	ra,80001954 <metal_cpu_get>
    80000ac6:	872a                	mv	a4,a0
    80000ac8:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000acc:	e398                	sd	a4,0(a5)
C:\Users\Igor\git\tests\test_u54\src/main.c:100
    if (cpu == NULL) {
    80000ace:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000ad2:	639c                	ld	a5,0(a5)
    80000ad4:	eb89                	bnez	a5,80000ae6 <main+0x78>
C:\Users\Igor\git\tests\test_u54\src/main.c:101
        printf("CPU null.\n");
    80000ad6:	00000517          	auipc	a0,0x0
    80000ada:	89a50513          	addi	a0,a0,-1894 # 80000370 <__fini_array_end+0x78>
    80000ade:	33a000ef          	jal	ra,80000e18 <puts>
C:\Users\Igor\git\tests\test_u54\src/main.c:102
        return 2;
    80000ae2:	4789                	li	a5,2
    80000ae4:	aa41                	j	80000c74 <main+0x206>
C:\Users\Igor\git\tests\test_u54\src/main.c:104
    }
    cpu_intr = metal_cpu_interrupt_controller(cpu);
    80000ae6:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000aea:	639c                	ld	a5,0(a5)
    80000aec:	853e                	mv	a0,a5
    80000aee:	641000ef          	jal	ra,8000192e <metal_cpu_interrupt_controller>
    80000af2:	872a                	mv	a4,a0
    80000af4:	9a818793          	addi	a5,gp,-1624 # 80006d50 <cpu_intr>
    80000af8:	e398                	sd	a4,0(a5)
C:\Users\Igor\git\tests\test_u54\src/main.c:105
    if (cpu_intr == NULL) {
    80000afa:	9a818793          	addi	a5,gp,-1624 # 80006d50 <cpu_intr>
    80000afe:	639c                	ld	a5,0(a5)
    80000b00:	eb89                	bnez	a5,80000b12 <main+0xa4>
C:\Users\Igor\git\tests\test_u54\src/main.c:106
        printf("CPU interrupt controller is null.\n");
    80000b02:	00000517          	auipc	a0,0x0
    80000b06:	87e50513          	addi	a0,a0,-1922 # 80000380 <__fini_array_end+0x88>
    80000b0a:	30e000ef          	jal	ra,80000e18 <puts>
C:\Users\Igor\git\tests\test_u54\src/main.c:107
        return 3;
    80000b0e:	478d                	li	a5,3
    80000b10:	a295                	j	80000c74 <main+0x206>
C:\Users\Igor\git\tests\test_u54\src/main.c:109
    }
    metal_interrupt_init(cpu_intr);
    80000b12:	9a818793          	addi	a5,gp,-1624 # 80006d50 <cpu_intr>
    80000b16:	639c                	ld	a5,0(a5)
    80000b18:	853e                	mv	a0,a5
    80000b1a:	683000ef          	jal	ra,8000199c <metal_interrupt_init>
C:\Users\Igor\git\tests\test_u54\src/main.c:112

    // display welcome banner
    display_banner();
    80000b1e:	de3ff0ef          	jal	ra,80000900 <display_banner>
C:\Users\Igor\git\tests\test_u54\src/main.c:115

    // Setup Timer and its interrupt
    tmr_intr = metal_cpu_timer_interrupt_controller(cpu);
    80000b22:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000b26:	639c                	ld	a5,0(a5)
    80000b28:	853e                	mv	a0,a5
    80000b2a:	5b9000ef          	jal	ra,800018e2 <metal_cpu_timer_interrupt_controller>
    80000b2e:	872a                	mv	a4,a0
    80000b30:	9a018793          	addi	a5,gp,-1632 # 80006d48 <tmr_intr>
    80000b34:	e398                	sd	a4,0(a5)
C:\Users\Igor\git\tests\test_u54\src/main.c:116
    if (tmr_intr == NULL) {
    80000b36:	9a018793          	addi	a5,gp,-1632 # 80006d48 <tmr_intr>
    80000b3a:	639c                	ld	a5,0(a5)
    80000b3c:	eb89                	bnez	a5,80000b4e <main+0xe0>
C:\Users\Igor\git\tests\test_u54\src/main.c:117
        printf("TIMER interrupt controller is  null.\n");
    80000b3e:	00000517          	auipc	a0,0x0
    80000b42:	86a50513          	addi	a0,a0,-1942 # 800003a8 <__fini_array_end+0xb0>
    80000b46:	2d2000ef          	jal	ra,80000e18 <puts>
C:\Users\Igor\git\tests\test_u54\src/main.c:118
        return 4;
    80000b4a:	4791                	li	a5,4
    80000b4c:	a225                	j	80000c74 <main+0x206>
C:\Users\Igor\git\tests\test_u54\src/main.c:120
    }
    metal_interrupt_init(tmr_intr);
    80000b4e:	9a018793          	addi	a5,gp,-1632 # 80006d48 <tmr_intr>
    80000b52:	639c                	ld	a5,0(a5)
    80000b54:	853e                	mv	a0,a5
    80000b56:	647000ef          	jal	ra,8000199c <metal_interrupt_init>
C:\Users\Igor\git\tests\test_u54\src/main.c:121
    tmr_id = metal_cpu_timer_get_interrupt_id(cpu);
    80000b5a:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000b5e:	639c                	ld	a5,0(a5)
    80000b60:	853e                	mv	a0,a5
    80000b62:	5a7000ef          	jal	ra,80001908 <metal_cpu_timer_get_interrupt_id>
    80000b66:	87aa                	mv	a5,a0
    80000b68:	873e                	mv	a4,a5
    80000b6a:	9b418793          	addi	a5,gp,-1612 # 80006d5c <tmr_id>
    80000b6e:	c398                	sw	a4,0(a5)
C:\Users\Igor\git\tests\test_u54\src/main.c:122
    rc = metal_interrupt_register_handler(tmr_intr, tmr_id, timer_isr, cpu);
    80000b70:	9a018793          	addi	a5,gp,-1632 # 80006d48 <tmr_intr>
    80000b74:	6398                	ld	a4,0(a5)
    80000b76:	9b418793          	addi	a5,gp,-1612 # 80006d5c <tmr_id>
    80000b7a:	438c                	lw	a1,0(a5)
    80000b7c:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000b80:	639c                	ld	a5,0(a5)
    80000b82:	86be                	mv	a3,a5
    80000b84:	00000617          	auipc	a2,0x0
    80000b88:	e5260613          	addi	a2,a2,-430 # 800009d6 <timer_isr>
    80000b8c:	853a                	mv	a0,a4
    80000b8e:	633000ef          	jal	ra,800019c0 <metal_interrupt_register_handler>
    80000b92:	87aa                	mv	a5,a0
    80000b94:	fcf42e23          	sw	a5,-36(s0)
C:\Users\Igor\git\tests\test_u54\src/main.c:123
    if (rc < 0) {
    80000b98:	fdc42783          	lw	a5,-36(s0)
    80000b9c:	2781                	sext.w	a5,a5
    80000b9e:	0007de63          	bgez	a5,80000bba <main+0x14c>
C:\Users\Igor\git\tests\test_u54\src/main.c:124
        printf("TIMER interrupt handler registration failed\n");
    80000ba2:	00000517          	auipc	a0,0x0
    80000ba6:	82e50513          	addi	a0,a0,-2002 # 800003d0 <__fini_array_end+0xd8>
    80000baa:	26e000ef          	jal	ra,80000e18 <puts>
C:\Users\Igor\git\tests\test_u54\src/main.c:125
        return (rc * -1);
    80000bae:	fdc42783          	lw	a5,-36(s0)
    80000bb2:	40f007bb          	negw	a5,a5
    80000bb6:	2781                	sext.w	a5,a5
    80000bb8:	a875                	j	80000c74 <main+0x206>
C:\Users\Igor\git\tests\test_u54\src/main.c:129
    }

    // Lastly CPU interrupt
    if (metal_interrupt_enable(cpu_intr, 0) == -1) {
    80000bba:	9a818793          	addi	a5,gp,-1624 # 80006d50 <cpu_intr>
    80000bbe:	639c                	ld	a5,0(a5)
    80000bc0:	4581                	li	a1,0
    80000bc2:	853e                	mv	a0,a5
    80000bc4:	63f000ef          	jal	ra,80001a02 <metal_interrupt_enable>
    80000bc8:	87aa                	mv	a5,a0
    80000bca:	873e                	mv	a4,a5
    80000bcc:	57fd                	li	a5,-1
    80000bce:	00f71a63          	bne	a4,a5,80000be2 <main+0x174>
C:\Users\Igor\git\tests\test_u54\src/main.c:130
        printf("CPU interrupt enable failed\n");
    80000bd2:	00000517          	auipc	a0,0x0
    80000bd6:	82e50513          	addi	a0,a0,-2002 # 80000400 <__fini_array_end+0x108>
    80000bda:	23e000ef          	jal	ra,80000e18 <puts>
C:\Users\Igor\git\tests\test_u54\src/main.c:131
        return 6;
    80000bde:	4799                	li	a5,6
    80000be0:	a851                	j	80000c74 <main+0x206>
C:\Users\Igor\git\tests\test_u54\src/main.c:135
    }

    // Set timer
    metal_cpu_set_mtimecmp(cpu, metal_cpu_get_mtime(cpu) + RTC_FREQ);
    80000be2:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000be6:	6384                	ld	s1,0(a5)
    80000be8:	99018793          	addi	a5,gp,-1648 # 80006d38 <cpu>
    80000bec:	639c                	ld	a5,0(a5)
    80000bee:	853e                	mv	a0,a5
    80000bf0:	49f000ef          	jal	ra,8000188e <metal_cpu_get_mtime>
    80000bf4:	872a                	mv	a4,a0
    80000bf6:	67a1                	lui	a5,0x8
    80000bf8:	97ba                	add	a5,a5,a4
    80000bfa:	85be                	mv	a1,a5
    80000bfc:	8526                	mv	a0,s1
    80000bfe:	4b7000ef          	jal	ra,800018b4 <metal_cpu_set_mtimecmp>
C:\Users\Igor\git\tests\test_u54\src/main.c:137
    // Enable Timer interrupt
    metal_interrupt_enable(tmr_intr, tmr_id);
    80000c02:	9a018793          	addi	a5,gp,-1632 # 80006d48 <tmr_intr>
    80000c06:	6398                	ld	a4,0(a5)
    80000c08:	9b418793          	addi	a5,gp,-1612 # 80006d5c <tmr_id>
    80000c0c:	439c                	lw	a5,0(a5)
    80000c0e:	85be                	mv	a1,a5
    80000c10:	853a                	mv	a0,a4
    80000c12:	5f1000ef          	jal	ra,80001a02 <metal_interrupt_enable>
C:\Users\Igor\git\tests\test_u54\src/main.c:140

    // Setup UART 0
    uart0 = metal_uart_get_device(0);
    80000c16:	4501                	li	a0,0
    80000c18:	709000ef          	jal	ra,80001b20 <metal_uart_get_device>
    80000c1c:	872a                	mv	a4,a0
    80000c1e:	98018793          	addi	a5,gp,-1664 # 80006d28 <uart0>
    80000c22:	e398                	sd	a4,0(a5)
C:\Users\Igor\git\tests\test_u54\src/main.c:141
    metal_uart_init(uart0, 115200);
    80000c24:	98018793          	addi	a5,gp,-1664 # 80006d28 <uart0>
    80000c28:	6398                	ld	a4,0(a5)
    80000c2a:	67f1                	lui	a5,0x1c
    80000c2c:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
    80000c30:	853a                	mv	a0,a4
    80000c32:	635000ef          	jal	ra,80001a66 <metal_uart_init>
C:\Users\Igor\git\tests\test_u54\src/main.c:147 (discriminator 1)

    // do work here

    while (1) {
    	// lock
    	lock(&custom_lock);
    80000c36:	98818513          	addi	a0,gp,-1656 # 80006d30 <custom_lock>
    80000c3a:	d53ff0ef          	jal	ra,8000098c <lock>
C:\Users\Igor\git\tests\test_u54\src/main.c:152 (discriminator 1)

    	//printf("Main cycle.\n");

        // transmitting message
        send_message(uart0, uart0_msg, uart0_msg_len);
    80000c3e:	98018793          	addi	a5,gp,-1664 # 80006d28 <uart0>
    80000c42:	6398                	ld	a4,0(a5)
    80000c44:	00006797          	auipc	a5,0x6
    80000c48:	f6478793          	addi	a5,a5,-156 # 80006ba8 <uart0_msg>
    80000c4c:	6394                	ld	a3,0(a5)
    80000c4e:	9b018793          	addi	a5,gp,-1616 # 80006d58 <uart0_msg_len>
    80000c52:	439c                	lw	a5,0(a5)
    80000c54:	863e                	mv	a2,a5
    80000c56:	85b6                	mv	a1,a3
    80000c58:	853a                	mv	a0,a4
    80000c5a:	ccbff0ef          	jal	ra,80000924 <send_message>
C:\Users\Igor\git\tests\test_u54\src/main.c:155 (discriminator 1)

    	// unlock
        unlock(&custom_lock);
    80000c5e:	98818513          	addi	a0,gp,-1656 # 80006d30 <custom_lock>
    80000c62:	d5bff0ef          	jal	ra,800009bc <unlock>
C:\Users\Igor\git\tests\test_u54\src/main.c:159 (discriminator 1)


    	// delay 3 cpu cycle - without delay frezes up
    	__asm__("wfi");
    80000c66:	10500073          	wfi
C:\Users\Igor\git\tests\test_u54\src/main.c:160 (discriminator 1)
    	__asm__("wfi");
    80000c6a:	10500073          	wfi
C:\Users\Igor\git\tests\test_u54\src/main.c:161 (discriminator 1)
    	__asm__("wfi");
    80000c6e:	10500073          	wfi
C:\Users\Igor\git\tests\test_u54\src/main.c:147 (discriminator 1)
    	lock(&custom_lock);
    80000c72:	b7d1                	j	80000c36 <main+0x1c8>
C:\Users\Igor\git\tests\test_u54\src/main.c:167

    }

    // return
    return 0;
}
    80000c74:	853e                	mv	a0,a5
    80000c76:	70a2                	ld	ra,40(sp)
    80000c78:	7402                	ld	s0,32(sp)
    80000c7a:	64e2                	ld	s1,24(sp)
    80000c7c:	6145                	addi	sp,sp,48
    80000c7e:	8082                	ret

0000000080000c80 <putchar>:
putchar():
    80000c80:	1101                	addi	sp,sp,-32
    80000c82:	81018793          	addi	a5,gp,-2032 # 80006bb8 <_impure_ptr>
    80000c86:	e822                	sd	s0,16(sp)
    80000c88:	6380                	ld	s0,0(a5)
    80000c8a:	ec06                	sd	ra,24(sp)
    80000c8c:	85aa                	mv	a1,a0
    80000c8e:	c801                	beqz	s0,80000c9e <putchar+0x1e>
    80000c90:	581c                	lw	a5,48(s0)
    80000c92:	e791                	bnez	a5,80000c9e <putchar+0x1e>
    80000c94:	e42a                	sd	a0,8(sp)
    80000c96:	8522                	mv	a0,s0
    80000c98:	5d0000ef          	jal	ra,80001268 <__sinit>
    80000c9c:	65a2                	ld	a1,8(sp)
    80000c9e:	6810                	ld	a2,16(s0)
    80000ca0:	8522                	mv	a0,s0
    80000ca2:	6442                	ld	s0,16(sp)
    80000ca4:	60e2                	ld	ra,24(sp)
    80000ca6:	6105                	addi	sp,sp,32
    80000ca8:	a009                	j	80000caa <_putc_r>

0000000080000caa <_putc_r>:
_putc_r():
    80000caa:	1101                	addi	sp,sp,-32
    80000cac:	e822                	sd	s0,16(sp)
    80000cae:	ec06                	sd	ra,24(sp)
    80000cb0:	842a                	mv	s0,a0
    80000cb2:	c909                	beqz	a0,80000cc4 <_putc_r+0x1a>
    80000cb4:	591c                	lw	a5,48(a0)
    80000cb6:	e799                	bnez	a5,80000cc4 <_putc_r+0x1a>
    80000cb8:	e432                	sd	a2,8(sp)
    80000cba:	e02e                	sd	a1,0(sp)
    80000cbc:	5ac000ef          	jal	ra,80001268 <__sinit>
    80000cc0:	6622                	ld	a2,8(sp)
    80000cc2:	6582                	ld	a1,0(sp)
    80000cc4:	fffff797          	auipc	a5,0xfffff
    80000cc8:	79478793          	addi	a5,a5,1940 # 80000458 <__sf_fake_stdin>
    80000ccc:	02f61663          	bne	a2,a5,80000cf8 <_putc_r+0x4e>
    80000cd0:	6410                	ld	a2,8(s0)
    80000cd2:	465c                	lw	a5,12(a2)
    80000cd4:	fff7871b          	addiw	a4,a5,-1
    80000cd8:	c658                	sw	a4,12(a2)
    80000cda:	02075f63          	bgez	a4,80000d18 <_putc_r+0x6e>
    80000cde:	561c                	lw	a5,40(a2)
    80000ce0:	00f74763          	blt	a4,a5,80000cee <_putc_r+0x44>
    80000ce4:	0ff5f793          	andi	a5,a1,255
    80000ce8:	4729                	li	a4,10
    80000cea:	02e79763          	bne	a5,a4,80000d18 <_putc_r+0x6e>
    80000cee:	8522                	mv	a0,s0
    80000cf0:	6442                	ld	s0,16(sp)
    80000cf2:	60e2                	ld	ra,24(sp)
    80000cf4:	6105                	addi	sp,sp,32
    80000cf6:	aa3d                	j	80000e34 <__swbuf_r>
    80000cf8:	fffff797          	auipc	a5,0xfffff
    80000cfc:	79878793          	addi	a5,a5,1944 # 80000490 <__sf_fake_stdout>
    80000d00:	00f61463          	bne	a2,a5,80000d08 <_putc_r+0x5e>
    80000d04:	6810                	ld	a2,16(s0)
    80000d06:	b7f1                	j	80000cd2 <_putc_r+0x28>
    80000d08:	fffff797          	auipc	a5,0xfffff
    80000d0c:	71878793          	addi	a5,a5,1816 # 80000420 <__sf_fake_stderr>
    80000d10:	fcf611e3          	bne	a2,a5,80000cd2 <_putc_r+0x28>
    80000d14:	6c10                	ld	a2,24(s0)
    80000d16:	bf75                	j	80000cd2 <_putc_r+0x28>
    80000d18:	621c                	ld	a5,0(a2)
    80000d1a:	0ff5f513          	andi	a0,a1,255
    80000d1e:	00178713          	addi	a4,a5,1
    80000d22:	e218                	sd	a4,0(a2)
    80000d24:	00b78023          	sb	a1,0(a5)
    80000d28:	60e2                	ld	ra,24(sp)
    80000d2a:	6442                	ld	s0,16(sp)
    80000d2c:	6105                	addi	sp,sp,32
    80000d2e:	8082                	ret

0000000080000d30 <_puts_r>:
_puts_r():
    80000d30:	7179                	addi	sp,sp,-48
    80000d32:	ec26                	sd	s1,24(sp)
    80000d34:	e84a                	sd	s2,16(sp)
    80000d36:	f406                	sd	ra,40(sp)
    80000d38:	f022                	sd	s0,32(sp)
    80000d3a:	e44e                	sd	s3,8(sp)
    80000d3c:	e052                	sd	s4,0(sp)
    80000d3e:	84aa                	mv	s1,a0
    80000d40:	892e                	mv	s2,a1
    80000d42:	c509                	beqz	a0,80000d4c <_puts_r+0x1c>
    80000d44:	591c                	lw	a5,48(a0)
    80000d46:	e399                	bnez	a5,80000d4c <_puts_r+0x1c>
    80000d48:	520000ef          	jal	ra,80001268 <__sinit>
    80000d4c:	589c                	lw	a5,48(s1)
    80000d4e:	6880                	ld	s0,16(s1)
    80000d50:	e781                	bnez	a5,80000d58 <_puts_r+0x28>
    80000d52:	8526                	mv	a0,s1
    80000d54:	514000ef          	jal	ra,80001268 <__sinit>
    80000d58:	fffff797          	auipc	a5,0xfffff
    80000d5c:	70078793          	addi	a5,a5,1792 # 80000458 <__sf_fake_stdin>
    80000d60:	02f41f63          	bne	s0,a5,80000d9e <_puts_r+0x6e>
    80000d64:	6480                	ld	s0,8(s1)
    80000d66:	01045783          	lhu	a5,16(s0)
    80000d6a:	8ba1                	andi	a5,a5,8
    80000d6c:	cba9                	beqz	a5,80000dbe <_puts_r+0x8e>
    80000d6e:	6c1c                	ld	a5,24(s0)
    80000d70:	c7b9                	beqz	a5,80000dbe <_puts_r+0x8e>
    80000d72:	59fd                	li	s3,-1
    80000d74:	4a29                	li	s4,10
    80000d76:	4458                	lw	a4,12(s0)
    80000d78:	00094583          	lbu	a1,0(s2)
    80000d7c:	fff7079b          	addiw	a5,a4,-1
    80000d80:	873e                	mv	a4,a5
    80000d82:	eda1                	bnez	a1,80000dda <_puts_r+0xaa>
    80000d84:	c45c                	sw	a5,12(s0)
    80000d86:	0807d163          	bgez	a5,80000e08 <_puts_r+0xd8>
    80000d8a:	8622                	mv	a2,s0
    80000d8c:	45a9                	li	a1,10
    80000d8e:	8526                	mv	a0,s1
    80000d90:	0a4000ef          	jal	ra,80000e34 <__swbuf_r>
    80000d94:	57fd                	li	a5,-1
    80000d96:	02f50963          	beq	a0,a5,80000dc8 <_puts_r+0x98>
    80000d9a:	4529                	li	a0,10
    80000d9c:	a03d                	j	80000dca <_puts_r+0x9a>
    80000d9e:	fffff797          	auipc	a5,0xfffff
    80000da2:	6f278793          	addi	a5,a5,1778 # 80000490 <__sf_fake_stdout>
    80000da6:	00f41463          	bne	s0,a5,80000dae <_puts_r+0x7e>
    80000daa:	6880                	ld	s0,16(s1)
    80000dac:	bf6d                	j	80000d66 <_puts_r+0x36>
    80000dae:	fffff797          	auipc	a5,0xfffff
    80000db2:	67278793          	addi	a5,a5,1650 # 80000420 <__sf_fake_stderr>
    80000db6:	faf418e3          	bne	s0,a5,80000d66 <_puts_r+0x36>
    80000dba:	6c80                	ld	s0,24(s1)
    80000dbc:	b76d                	j	80000d66 <_puts_r+0x36>
    80000dbe:	85a2                	mv	a1,s0
    80000dc0:	8526                	mv	a0,s1
    80000dc2:	138000ef          	jal	ra,80000efa <__swsetup_r>
    80000dc6:	d555                	beqz	a0,80000d72 <_puts_r+0x42>
    80000dc8:	557d                	li	a0,-1
    80000dca:	70a2                	ld	ra,40(sp)
    80000dcc:	7402                	ld	s0,32(sp)
    80000dce:	64e2                	ld	s1,24(sp)
    80000dd0:	6942                	ld	s2,16(sp)
    80000dd2:	69a2                	ld	s3,8(sp)
    80000dd4:	6a02                	ld	s4,0(sp)
    80000dd6:	6145                	addi	sp,sp,48
    80000dd8:	8082                	ret
    80000dda:	c458                	sw	a4,12(s0)
    80000ddc:	0905                	addi	s2,s2,1
    80000dde:	0007d763          	bgez	a5,80000dec <_puts_r+0xbc>
    80000de2:	5418                	lw	a4,40(s0)
    80000de4:	00e7cb63          	blt	a5,a4,80000dfa <_puts_r+0xca>
    80000de8:	01458963          	beq	a1,s4,80000dfa <_puts_r+0xca>
    80000dec:	601c                	ld	a5,0(s0)
    80000dee:	00178713          	addi	a4,a5,1
    80000df2:	e018                	sd	a4,0(s0)
    80000df4:	00b78023          	sb	a1,0(a5)
    80000df8:	bfbd                	j	80000d76 <_puts_r+0x46>
    80000dfa:	8622                	mv	a2,s0
    80000dfc:	8526                	mv	a0,s1
    80000dfe:	036000ef          	jal	ra,80000e34 <__swbuf_r>
    80000e02:	f7351ae3          	bne	a0,s3,80000d76 <_puts_r+0x46>
    80000e06:	b7c9                	j	80000dc8 <_puts_r+0x98>
    80000e08:	601c                	ld	a5,0(s0)
    80000e0a:	00178713          	addi	a4,a5,1
    80000e0e:	e018                	sd	a4,0(s0)
    80000e10:	4729                	li	a4,10
    80000e12:	00e78023          	sb	a4,0(a5)
    80000e16:	b751                	j	80000d9a <_puts_r+0x6a>

0000000080000e18 <puts>:
puts():
    80000e18:	81018793          	addi	a5,gp,-2032 # 80006bb8 <_impure_ptr>
    80000e1c:	85aa                	mv	a1,a0
    80000e1e:	6388                	ld	a0,0(a5)
    80000e20:	bf01                	j	80000d30 <_puts_r>

0000000080000e22 <strlen>:
strlen():
    80000e22:	87aa                	mv	a5,a0
    80000e24:	0785                	addi	a5,a5,1
    80000e26:	fff7c703          	lbu	a4,-1(a5)
    80000e2a:	ff6d                	bnez	a4,80000e24 <strlen+0x2>
    80000e2c:	40a78533          	sub	a0,a5,a0
    80000e30:	157d                	addi	a0,a0,-1
    80000e32:	8082                	ret

0000000080000e34 <__swbuf_r>:
__swbuf_r():
    80000e34:	7179                	addi	sp,sp,-48
    80000e36:	f022                	sd	s0,32(sp)
    80000e38:	ec26                	sd	s1,24(sp)
    80000e3a:	e84a                	sd	s2,16(sp)
    80000e3c:	f406                	sd	ra,40(sp)
    80000e3e:	e44e                	sd	s3,8(sp)
    80000e40:	84aa                	mv	s1,a0
    80000e42:	892e                	mv	s2,a1
    80000e44:	8432                	mv	s0,a2
    80000e46:	c509                	beqz	a0,80000e50 <__swbuf_r+0x1c>
    80000e48:	591c                	lw	a5,48(a0)
    80000e4a:	e399                	bnez	a5,80000e50 <__swbuf_r+0x1c>
    80000e4c:	41c000ef          	jal	ra,80001268 <__sinit>
    80000e50:	fffff797          	auipc	a5,0xfffff
    80000e54:	60878793          	addi	a5,a5,1544 # 80000458 <__sf_fake_stdin>
    80000e58:	06f41a63          	bne	s0,a5,80000ecc <__swbuf_r+0x98>
    80000e5c:	6480                	ld	s0,8(s1)
    80000e5e:	541c                	lw	a5,40(s0)
    80000e60:	c45c                	sw	a5,12(s0)
    80000e62:	01045783          	lhu	a5,16(s0)
    80000e66:	8ba1                	andi	a5,a5,8
    80000e68:	c3d1                	beqz	a5,80000eec <__swbuf_r+0xb8>
    80000e6a:	6c1c                	ld	a5,24(s0)
    80000e6c:	c3c1                	beqz	a5,80000eec <__swbuf_r+0xb8>
    80000e6e:	6c1c                	ld	a5,24(s0)
    80000e70:	6008                	ld	a0,0(s0)
    80000e72:	0ff97993          	andi	s3,s2,255
    80000e76:	894e                	mv	s2,s3
    80000e78:	9d1d                	subw	a0,a0,a5
    80000e7a:	501c                	lw	a5,32(s0)
    80000e7c:	00f54763          	blt	a0,a5,80000e8a <__swbuf_r+0x56>
    80000e80:	85a2                	mv	a1,s0
    80000e82:	8526                	mv	a0,s1
    80000e84:	2c6000ef          	jal	ra,8000114a <_fflush_r>
    80000e88:	e53d                	bnez	a0,80000ef6 <__swbuf_r+0xc2>
    80000e8a:	445c                	lw	a5,12(s0)
    80000e8c:	2505                	addiw	a0,a0,1
    80000e8e:	37fd                	addiw	a5,a5,-1
    80000e90:	c45c                	sw	a5,12(s0)
    80000e92:	601c                	ld	a5,0(s0)
    80000e94:	00178713          	addi	a4,a5,1
    80000e98:	e018                	sd	a4,0(s0)
    80000e9a:	01378023          	sb	s3,0(a5)
    80000e9e:	501c                	lw	a5,32(s0)
    80000ea0:	00a78963          	beq	a5,a0,80000eb2 <__swbuf_r+0x7e>
    80000ea4:	01045783          	lhu	a5,16(s0)
    80000ea8:	8b85                	andi	a5,a5,1
    80000eaa:	cb89                	beqz	a5,80000ebc <__swbuf_r+0x88>
    80000eac:	47a9                	li	a5,10
    80000eae:	00f91763          	bne	s2,a5,80000ebc <__swbuf_r+0x88>
    80000eb2:	85a2                	mv	a1,s0
    80000eb4:	8526                	mv	a0,s1
    80000eb6:	294000ef          	jal	ra,8000114a <_fflush_r>
    80000eba:	ed15                	bnez	a0,80000ef6 <__swbuf_r+0xc2>
    80000ebc:	70a2                	ld	ra,40(sp)
    80000ebe:	7402                	ld	s0,32(sp)
    80000ec0:	854a                	mv	a0,s2
    80000ec2:	64e2                	ld	s1,24(sp)
    80000ec4:	6942                	ld	s2,16(sp)
    80000ec6:	69a2                	ld	s3,8(sp)
    80000ec8:	6145                	addi	sp,sp,48
    80000eca:	8082                	ret
    80000ecc:	fffff797          	auipc	a5,0xfffff
    80000ed0:	5c478793          	addi	a5,a5,1476 # 80000490 <__sf_fake_stdout>
    80000ed4:	00f41463          	bne	s0,a5,80000edc <__swbuf_r+0xa8>
    80000ed8:	6880                	ld	s0,16(s1)
    80000eda:	b751                	j	80000e5e <__swbuf_r+0x2a>
    80000edc:	fffff797          	auipc	a5,0xfffff
    80000ee0:	54478793          	addi	a5,a5,1348 # 80000420 <__sf_fake_stderr>
    80000ee4:	f6f41de3          	bne	s0,a5,80000e5e <__swbuf_r+0x2a>
    80000ee8:	6c80                	ld	s0,24(s1)
    80000eea:	bf95                	j	80000e5e <__swbuf_r+0x2a>
    80000eec:	85a2                	mv	a1,s0
    80000eee:	8526                	mv	a0,s1
    80000ef0:	00a000ef          	jal	ra,80000efa <__swsetup_r>
    80000ef4:	dd2d                	beqz	a0,80000e6e <__swbuf_r+0x3a>
    80000ef6:	597d                	li	s2,-1
    80000ef8:	b7d1                	j	80000ebc <__swbuf_r+0x88>

0000000080000efa <__swsetup_r>:
__swsetup_r():
    80000efa:	1101                	addi	sp,sp,-32
    80000efc:	81018793          	addi	a5,gp,-2032 # 80006bb8 <_impure_ptr>
    80000f00:	e426                	sd	s1,8(sp)
    80000f02:	6384                	ld	s1,0(a5)
    80000f04:	e822                	sd	s0,16(sp)
    80000f06:	e04a                	sd	s2,0(sp)
    80000f08:	ec06                	sd	ra,24(sp)
    80000f0a:	892a                	mv	s2,a0
    80000f0c:	842e                	mv	s0,a1
    80000f0e:	c491                	beqz	s1,80000f1a <__swsetup_r+0x20>
    80000f10:	589c                	lw	a5,48(s1)
    80000f12:	e781                	bnez	a5,80000f1a <__swsetup_r+0x20>
    80000f14:	8526                	mv	a0,s1
    80000f16:	352000ef          	jal	ra,80001268 <__sinit>
    80000f1a:	fffff797          	auipc	a5,0xfffff
    80000f1e:	53e78793          	addi	a5,a5,1342 # 80000458 <__sf_fake_stdin>
    80000f22:	02f41c63          	bne	s0,a5,80000f5a <__swsetup_r+0x60>
    80000f26:	6480                	ld	s0,8(s1)
    80000f28:	01041703          	lh	a4,16(s0)
    80000f2c:	03071793          	slli	a5,a4,0x30
    80000f30:	93c1                	srli	a5,a5,0x30
    80000f32:	0087f693          	andi	a3,a5,8
    80000f36:	eebd                	bnez	a3,80000fb4 <__swsetup_r+0xba>
    80000f38:	0107f693          	andi	a3,a5,16
    80000f3c:	ee9d                	bnez	a3,80000f7a <__swsetup_r+0x80>
    80000f3e:	47a5                	li	a5,9
    80000f40:	00f92023          	sw	a5,0(s2)
    80000f44:	04076713          	ori	a4,a4,64
    80000f48:	00e41823          	sh	a4,16(s0)
    80000f4c:	557d                	li	a0,-1
    80000f4e:	60e2                	ld	ra,24(sp)
    80000f50:	6442                	ld	s0,16(sp)
    80000f52:	64a2                	ld	s1,8(sp)
    80000f54:	6902                	ld	s2,0(sp)
    80000f56:	6105                	addi	sp,sp,32
    80000f58:	8082                	ret
    80000f5a:	fffff797          	auipc	a5,0xfffff
    80000f5e:	53678793          	addi	a5,a5,1334 # 80000490 <__sf_fake_stdout>
    80000f62:	00f41463          	bne	s0,a5,80000f6a <__swsetup_r+0x70>
    80000f66:	6880                	ld	s0,16(s1)
    80000f68:	b7c1                	j	80000f28 <__swsetup_r+0x2e>
    80000f6a:	fffff797          	auipc	a5,0xfffff
    80000f6e:	4b678793          	addi	a5,a5,1206 # 80000420 <__sf_fake_stderr>
    80000f72:	faf41be3          	bne	s0,a5,80000f28 <__swsetup_r+0x2e>
    80000f76:	6c80                	ld	s0,24(s1)
    80000f78:	bf45                	j	80000f28 <__swsetup_r+0x2e>
    80000f7a:	8b91                	andi	a5,a5,4
    80000f7c:	c795                	beqz	a5,80000fa8 <__swsetup_r+0xae>
    80000f7e:	702c                	ld	a1,96(s0)
    80000f80:	c991                	beqz	a1,80000f94 <__swsetup_r+0x9a>
    80000f82:	07c40793          	addi	a5,s0,124
    80000f86:	00f58563          	beq	a1,a5,80000f90 <__swsetup_r+0x96>
    80000f8a:	854a                	mv	a0,s2
    80000f8c:	564000ef          	jal	ra,800014f0 <_free_r>
    80000f90:	06043023          	sd	zero,96(s0)
    80000f94:	01045783          	lhu	a5,16(s0)
    80000f98:	00042423          	sw	zero,8(s0)
    80000f9c:	fdb7f793          	andi	a5,a5,-37
    80000fa0:	00f41823          	sh	a5,16(s0)
    80000fa4:	6c1c                	ld	a5,24(s0)
    80000fa6:	e01c                	sd	a5,0(s0)
    80000fa8:	01045783          	lhu	a5,16(s0)
    80000fac:	0087e793          	ori	a5,a5,8
    80000fb0:	00f41823          	sh	a5,16(s0)
    80000fb4:	6c1c                	ld	a5,24(s0)
    80000fb6:	ef89                	bnez	a5,80000fd0 <__swsetup_r+0xd6>
    80000fb8:	01045783          	lhu	a5,16(s0)
    80000fbc:	20000713          	li	a4,512
    80000fc0:	2807f793          	andi	a5,a5,640
    80000fc4:	00e78663          	beq	a5,a4,80000fd0 <__swsetup_r+0xd6>
    80000fc8:	85a2                	mv	a1,s0
    80000fca:	854a                	mv	a0,s2
    80000fcc:	472000ef          	jal	ra,8000143e <__smakebuf_r>
    80000fd0:	01045783          	lhu	a5,16(s0)
    80000fd4:	0017f713          	andi	a4,a5,1
    80000fd8:	c705                	beqz	a4,80001000 <__swsetup_r+0x106>
    80000fda:	501c                	lw	a5,32(s0)
    80000fdc:	00042623          	sw	zero,12(s0)
    80000fe0:	40f007bb          	negw	a5,a5
    80000fe4:	d41c                	sw	a5,40(s0)
    80000fe6:	6c1c                	ld	a5,24(s0)
    80000fe8:	4501                	li	a0,0
    80000fea:	f3b5                	bnez	a5,80000f4e <__swsetup_r+0x54>
    80000fec:	01041783          	lh	a5,16(s0)
    80000ff0:	0807f713          	andi	a4,a5,128
    80000ff4:	df29                	beqz	a4,80000f4e <__swsetup_r+0x54>
    80000ff6:	0407e793          	ori	a5,a5,64
    80000ffa:	00f41823          	sh	a5,16(s0)
    80000ffe:	b7b9                	j	80000f4c <__swsetup_r+0x52>
    80001000:	8b89                	andi	a5,a5,2
    80001002:	4701                	li	a4,0
    80001004:	e391                	bnez	a5,80001008 <__swsetup_r+0x10e>
    80001006:	5018                	lw	a4,32(s0)
    80001008:	c458                	sw	a4,12(s0)
    8000100a:	bff1                	j	80000fe6 <__swsetup_r+0xec>

000000008000100c <__sflush_r>:
__sflush_r():
    8000100c:	0105d783          	lhu	a5,16(a1)
    80001010:	7179                	addi	sp,sp,-48
    80001012:	f022                	sd	s0,32(sp)
    80001014:	ec26                	sd	s1,24(sp)
    80001016:	f406                	sd	ra,40(sp)
    80001018:	e84a                	sd	s2,16(sp)
    8000101a:	e44e                	sd	s3,8(sp)
    8000101c:	0087f713          	andi	a4,a5,8
    80001020:	84aa                	mv	s1,a0
    80001022:	842e                	mv	s0,a1
    80001024:	ef79                	bnez	a4,80001102 <__sflush_r+0xf6>
    80001026:	4598                	lw	a4,8(a1)
    80001028:	00e04d63          	bgtz	a4,80001042 <__sflush_r+0x36>
    8000102c:	5db8                	lw	a4,120(a1)
    8000102e:	00e04a63          	bgtz	a4,80001042 <__sflush_r+0x36>
    80001032:	4501                	li	a0,0
    80001034:	70a2                	ld	ra,40(sp)
    80001036:	7402                	ld	s0,32(sp)
    80001038:	64e2                	ld	s1,24(sp)
    8000103a:	6942                	ld	s2,16(sp)
    8000103c:	69a2                	ld	s3,8(sp)
    8000103e:	6145                	addi	sp,sp,48
    80001040:	8082                	ret
    80001042:	6838                	ld	a4,80(s0)
    80001044:	d77d                	beqz	a4,80001032 <__sflush_r+0x26>
    80001046:	0004a903          	lw	s2,0(s1)
    8000104a:	03379693          	slli	a3,a5,0x33
    8000104e:	0004a023          	sw	zero,0(s1)
    80001052:	0606de63          	bgez	a3,800010ce <__sflush_r+0xc2>
    80001056:	6c50                	ld	a2,152(s0)
    80001058:	01045783          	lhu	a5,16(s0)
    8000105c:	8b91                	andi	a5,a5,4
    8000105e:	c799                	beqz	a5,8000106c <__sflush_r+0x60>
    80001060:	441c                	lw	a5,8(s0)
    80001062:	8e1d                	sub	a2,a2,a5
    80001064:	703c                	ld	a5,96(s0)
    80001066:	c399                	beqz	a5,8000106c <__sflush_r+0x60>
    80001068:	5c3c                	lw	a5,120(s0)
    8000106a:	8e1d                	sub	a2,a2,a5
    8000106c:	683c                	ld	a5,80(s0)
    8000106e:	7c0c                	ld	a1,56(s0)
    80001070:	4681                	li	a3,0
    80001072:	8526                	mv	a0,s1
    80001074:	9782                	jalr	a5
    80001076:	57fd                	li	a5,-1
    80001078:	01045703          	lhu	a4,16(s0)
    8000107c:	00f51d63          	bne	a0,a5,80001096 <__sflush_r+0x8a>
    80001080:	4094                	lw	a3,0(s1)
    80001082:	47f5                	li	a5,29
    80001084:	06d7e963          	bltu	a5,a3,800010f6 <__sflush_r+0xea>
    80001088:	204007b7          	lui	a5,0x20400
    8000108c:	0785                	addi	a5,a5,1
    8000108e:	00d7d7b3          	srl	a5,a5,a3
    80001092:	8b85                	andi	a5,a5,1
    80001094:	c3ad                	beqz	a5,800010f6 <__sflush_r+0xea>
    80001096:	6c1c                	ld	a5,24(s0)
    80001098:	00042423          	sw	zero,8(s0)
    8000109c:	e01c                	sd	a5,0(s0)
    8000109e:	03371793          	slli	a5,a4,0x33
    800010a2:	0007d863          	bgez	a5,800010b2 <__sflush_r+0xa6>
    800010a6:	57fd                	li	a5,-1
    800010a8:	00f51463          	bne	a0,a5,800010b0 <__sflush_r+0xa4>
    800010ac:	409c                	lw	a5,0(s1)
    800010ae:	e391                	bnez	a5,800010b2 <__sflush_r+0xa6>
    800010b0:	ec48                	sd	a0,152(s0)
    800010b2:	702c                	ld	a1,96(s0)
    800010b4:	0124a023          	sw	s2,0(s1)
    800010b8:	ddad                	beqz	a1,80001032 <__sflush_r+0x26>
    800010ba:	07c40793          	addi	a5,s0,124
    800010be:	00f58563          	beq	a1,a5,800010c8 <__sflush_r+0xbc>
    800010c2:	8526                	mv	a0,s1
    800010c4:	42c000ef          	jal	ra,800014f0 <_free_r>
    800010c8:	06043023          	sd	zero,96(s0)
    800010cc:	b79d                	j	80001032 <__sflush_r+0x26>
    800010ce:	7c0c                	ld	a1,56(s0)
    800010d0:	4601                	li	a2,0
    800010d2:	4685                	li	a3,1
    800010d4:	8526                	mv	a0,s1
    800010d6:	9702                	jalr	a4
    800010d8:	57fd                	li	a5,-1
    800010da:	862a                	mv	a2,a0
    800010dc:	f6f51ee3          	bne	a0,a5,80001058 <__sflush_r+0x4c>
    800010e0:	409c                	lw	a5,0(s1)
    800010e2:	dbbd                	beqz	a5,80001058 <__sflush_r+0x4c>
    800010e4:	4775                	li	a4,29
    800010e6:	00e78563          	beq	a5,a4,800010f0 <__sflush_r+0xe4>
    800010ea:	4759                	li	a4,22
    800010ec:	04e79463          	bne	a5,a4,80001134 <__sflush_r+0x128>
    800010f0:	0124a023          	sw	s2,0(s1)
    800010f4:	bf3d                	j	80001032 <__sflush_r+0x26>
    800010f6:	04076713          	ori	a4,a4,64
    800010fa:	00e41823          	sh	a4,16(s0)
    800010fe:	557d                	li	a0,-1
    80001100:	bf15                	j	80001034 <__sflush_r+0x28>
    80001102:	0185b983          	ld	s3,24(a1)
    80001106:	f20986e3          	beqz	s3,80001032 <__sflush_r+0x26>
    8000110a:	0005b903          	ld	s2,0(a1)
    8000110e:	8b8d                	andi	a5,a5,3
    80001110:	0135b023          	sd	s3,0(a1)
    80001114:	4139093b          	subw	s2,s2,s3
    80001118:	4701                	li	a4,0
    8000111a:	e391                	bnez	a5,8000111e <__sflush_r+0x112>
    8000111c:	5198                	lw	a4,32(a1)
    8000111e:	c458                	sw	a4,12(s0)
    80001120:	f12059e3          	blez	s2,80001032 <__sflush_r+0x26>
    80001124:	643c                	ld	a5,72(s0)
    80001126:	7c0c                	ld	a1,56(s0)
    80001128:	86ca                	mv	a3,s2
    8000112a:	864e                	mv	a2,s3
    8000112c:	8526                	mv	a0,s1
    8000112e:	9782                	jalr	a5
    80001130:	00a04963          	bgtz	a0,80001142 <__sflush_r+0x136>
    80001134:	01045783          	lhu	a5,16(s0)
    80001138:	0407e793          	ori	a5,a5,64
    8000113c:	00f41823          	sh	a5,16(s0)
    80001140:	bf7d                	j	800010fe <__sflush_r+0xf2>
    80001142:	99aa                	add	s3,s3,a0
    80001144:	40a9093b          	subw	s2,s2,a0
    80001148:	bfe1                	j	80001120 <__sflush_r+0x114>

000000008000114a <_fflush_r>:
_fflush_r():
    8000114a:	6d9c                	ld	a5,24(a1)
    8000114c:	c3a5                	beqz	a5,800011ac <_fflush_r+0x62>
    8000114e:	1101                	addi	sp,sp,-32
    80001150:	e822                	sd	s0,16(sp)
    80001152:	ec06                	sd	ra,24(sp)
    80001154:	842a                	mv	s0,a0
    80001156:	c519                	beqz	a0,80001164 <_fflush_r+0x1a>
    80001158:	591c                	lw	a5,48(a0)
    8000115a:	e789                	bnez	a5,80001164 <_fflush_r+0x1a>
    8000115c:	e42e                	sd	a1,8(sp)
    8000115e:	10a000ef          	jal	ra,80001268 <__sinit>
    80001162:	65a2                	ld	a1,8(sp)
    80001164:	fffff797          	auipc	a5,0xfffff
    80001168:	2f478793          	addi	a5,a5,756 # 80000458 <__sf_fake_stdin>
    8000116c:	00f59b63          	bne	a1,a5,80001182 <_fflush_r+0x38>
    80001170:	640c                	ld	a1,8(s0)
    80001172:	01059783          	lh	a5,16(a1)
    80001176:	c795                	beqz	a5,800011a2 <_fflush_r+0x58>
    80001178:	8522                	mv	a0,s0
    8000117a:	6442                	ld	s0,16(sp)
    8000117c:	60e2                	ld	ra,24(sp)
    8000117e:	6105                	addi	sp,sp,32
    80001180:	b571                	j	8000100c <__sflush_r>
    80001182:	fffff797          	auipc	a5,0xfffff
    80001186:	30e78793          	addi	a5,a5,782 # 80000490 <__sf_fake_stdout>
    8000118a:	00f59463          	bne	a1,a5,80001192 <_fflush_r+0x48>
    8000118e:	680c                	ld	a1,16(s0)
    80001190:	b7cd                	j	80001172 <_fflush_r+0x28>
    80001192:	fffff797          	auipc	a5,0xfffff
    80001196:	28e78793          	addi	a5,a5,654 # 80000420 <__sf_fake_stderr>
    8000119a:	fcf59ce3          	bne	a1,a5,80001172 <_fflush_r+0x28>
    8000119e:	6c0c                	ld	a1,24(s0)
    800011a0:	bfc9                	j	80001172 <_fflush_r+0x28>
    800011a2:	60e2                	ld	ra,24(sp)
    800011a4:	6442                	ld	s0,16(sp)
    800011a6:	4501                	li	a0,0
    800011a8:	6105                	addi	sp,sp,32
    800011aa:	8082                	ret
    800011ac:	4501                	li	a0,0
    800011ae:	8082                	ret

00000000800011b0 <std>:
std():
    800011b0:	1141                	addi	sp,sp,-16
    800011b2:	e022                	sd	s0,0(sp)
    800011b4:	e406                	sd	ra,8(sp)
    800011b6:	842a                	mv	s0,a0
    800011b8:	00b51823          	sh	a1,16(a0)
    800011bc:	00c51923          	sh	a2,18(a0)
    800011c0:	00053023          	sd	zero,0(a0)
    800011c4:	00053423          	sd	zero,8(a0)
    800011c8:	0a052623          	sw	zero,172(a0)
    800011cc:	00053c23          	sd	zero,24(a0)
    800011d0:	02052023          	sw	zero,32(a0)
    800011d4:	02052423          	sw	zero,40(a0)
    800011d8:	4621                	li	a2,8
    800011da:	4581                	li	a1,0
    800011dc:	0a450513          	addi	a0,a0,164
    800011e0:	300000ef          	jal	ra,800014e0 <memset>
    800011e4:	00000797          	auipc	a5,0x0
    800011e8:	4dc78793          	addi	a5,a5,1244 # 800016c0 <__sread>
    800011ec:	e03c                	sd	a5,64(s0)
    800011ee:	00000797          	auipc	a5,0x0
    800011f2:	50478793          	addi	a5,a5,1284 # 800016f2 <__swrite>
    800011f6:	e43c                	sd	a5,72(s0)
    800011f8:	00000797          	auipc	a5,0x0
    800011fc:	54a78793          	addi	a5,a5,1354 # 80001742 <__sseek>
    80001200:	e83c                	sd	a5,80(s0)
    80001202:	00000797          	auipc	a5,0x0
    80001206:	57878793          	addi	a5,a5,1400 # 8000177a <__sclose>
    8000120a:	fc00                	sd	s0,56(s0)
    8000120c:	ec3c                	sd	a5,88(s0)
    8000120e:	60a2                	ld	ra,8(sp)
    80001210:	6402                	ld	s0,0(sp)
    80001212:	0141                	addi	sp,sp,16
    80001214:	8082                	ret

0000000080001216 <_cleanup_r>:
_cleanup_r():
    80001216:	00000597          	auipc	a1,0x0
    8000121a:	f3458593          	addi	a1,a1,-204 # 8000114a <_fflush_r>
    8000121e:	aaa1                	j	80001376 <_fwalk_reent>

0000000080001220 <__sfmoreglue>:
__sfmoreglue():
    80001220:	1101                	addi	sp,sp,-32
    80001222:	e426                	sd	s1,8(sp)
    80001224:	0b000613          	li	a2,176
    80001228:	fff5849b          	addiw	s1,a1,-1
    8000122c:	02c484b3          	mul	s1,s1,a2
    80001230:	e04a                	sd	s2,0(sp)
    80001232:	892e                	mv	s2,a1
    80001234:	e822                	sd	s0,16(sp)
    80001236:	ec06                	sd	ra,24(sp)
    80001238:	0c848593          	addi	a1,s1,200
    8000123c:	362000ef          	jal	ra,8000159e <_malloc_r>
    80001240:	842a                	mv	s0,a0
    80001242:	cd01                	beqz	a0,8000125a <__sfmoreglue+0x3a>
    80001244:	00053023          	sd	zero,0(a0)
    80001248:	01252423          	sw	s2,8(a0)
    8000124c:	0561                	addi	a0,a0,24
    8000124e:	e808                	sd	a0,16(s0)
    80001250:	0b048613          	addi	a2,s1,176
    80001254:	4581                	li	a1,0
    80001256:	28a000ef          	jal	ra,800014e0 <memset>
    8000125a:	8522                	mv	a0,s0
    8000125c:	60e2                	ld	ra,24(sp)
    8000125e:	6442                	ld	s0,16(sp)
    80001260:	64a2                	ld	s1,8(sp)
    80001262:	6902                	ld	s2,0(sp)
    80001264:	6105                	addi	sp,sp,32
    80001266:	8082                	ret

0000000080001268 <__sinit>:
__sinit():
    80001268:	591c                	lw	a5,48(a0)
    8000126a:	e7bd                	bnez	a5,800012d8 <__sinit+0x70>
    8000126c:	1141                	addi	sp,sp,-16
    8000126e:	e406                	sd	ra,8(sp)
    80001270:	e022                	sd	s0,0(sp)
    80001272:	00000797          	auipc	a5,0x0
    80001276:	fa478793          	addi	a5,a5,-92 # 80001216 <_cleanup_r>
    8000127a:	e53c                	sd	a5,72(a0)
    8000127c:	81818793          	addi	a5,gp,-2024 # 80006bc0 <_global_impure_ptr>
    80001280:	639c                	ld	a5,0(a5)
    80001282:	08053023          	sd	zero,128(a0)
    80001286:	08052423          	sw	zero,136(a0)
    8000128a:	08053823          	sd	zero,144(a0)
    8000128e:	00f51463          	bne	a0,a5,80001296 <__sinit+0x2e>
    80001292:	4785                	li	a5,1
    80001294:	d91c                	sw	a5,48(a0)
    80001296:	842a                	mv	s0,a0
    80001298:	042000ef          	jal	ra,800012da <__sfp>
    8000129c:	e408                	sd	a0,8(s0)
    8000129e:	8522                	mv	a0,s0
    800012a0:	03a000ef          	jal	ra,800012da <__sfp>
    800012a4:	e808                	sd	a0,16(s0)
    800012a6:	8522                	mv	a0,s0
    800012a8:	032000ef          	jal	ra,800012da <__sfp>
    800012ac:	ec08                	sd	a0,24(s0)
    800012ae:	6408                	ld	a0,8(s0)
    800012b0:	4601                	li	a2,0
    800012b2:	4591                	li	a1,4
    800012b4:	efdff0ef          	jal	ra,800011b0 <std>
    800012b8:	6808                	ld	a0,16(s0)
    800012ba:	4605                	li	a2,1
    800012bc:	45a5                	li	a1,9
    800012be:	ef3ff0ef          	jal	ra,800011b0 <std>
    800012c2:	6c08                	ld	a0,24(s0)
    800012c4:	4609                	li	a2,2
    800012c6:	45c9                	li	a1,18
    800012c8:	ee9ff0ef          	jal	ra,800011b0 <std>
    800012cc:	4785                	li	a5,1
    800012ce:	d81c                	sw	a5,48(s0)
    800012d0:	60a2                	ld	ra,8(sp)
    800012d2:	6402                	ld	s0,0(sp)
    800012d4:	0141                	addi	sp,sp,16
    800012d6:	8082                	ret
    800012d8:	8082                	ret

00000000800012da <__sfp>:
__sfp():
    800012da:	1101                	addi	sp,sp,-32
    800012dc:	81818793          	addi	a5,gp,-2024 # 80006bc0 <_global_impure_ptr>
    800012e0:	e426                	sd	s1,8(sp)
    800012e2:	6384                	ld	s1,0(a5)
    800012e4:	e04a                	sd	s2,0(sp)
    800012e6:	ec06                	sd	ra,24(sp)
    800012e8:	589c                	lw	a5,48(s1)
    800012ea:	e822                	sd	s0,16(sp)
    800012ec:	892a                	mv	s2,a0
    800012ee:	e781                	bnez	a5,800012f6 <__sfp+0x1c>
    800012f0:	8526                	mv	a0,s1
    800012f2:	f77ff0ef          	jal	ra,80001268 <__sinit>
    800012f6:	08048493          	addi	s1,s1,128
    800012fa:	6880                	ld	s0,16(s1)
    800012fc:	449c                	lw	a5,8(s1)
    800012fe:	37fd                	addiw	a5,a5,-1
    80001300:	0007d663          	bgez	a5,8000130c <__sfp+0x32>
    80001304:	609c                	ld	a5,0(s1)
    80001306:	cfa9                	beqz	a5,80001360 <__sfp+0x86>
    80001308:	6084                	ld	s1,0(s1)
    8000130a:	bfc5                	j	800012fa <__sfp+0x20>
    8000130c:	01041703          	lh	a4,16(s0)
    80001310:	e729                	bnez	a4,8000135a <__sfp+0x80>
    80001312:	77c1                	lui	a5,0xffff0
    80001314:	0785                	addi	a5,a5,1
    80001316:	0a042623          	sw	zero,172(s0)
    8000131a:	00043023          	sd	zero,0(s0)
    8000131e:	00043423          	sd	zero,8(s0)
    80001322:	c81c                	sw	a5,16(s0)
    80001324:	00043c23          	sd	zero,24(s0)
    80001328:	02042023          	sw	zero,32(s0)
    8000132c:	02042423          	sw	zero,40(s0)
    80001330:	4621                	li	a2,8
    80001332:	4581                	li	a1,0
    80001334:	0a440513          	addi	a0,s0,164
    80001338:	1a8000ef          	jal	ra,800014e0 <memset>
    8000133c:	06043023          	sd	zero,96(s0)
    80001340:	06042423          	sw	zero,104(s0)
    80001344:	08043023          	sd	zero,128(s0)
    80001348:	08042423          	sw	zero,136(s0)
    8000134c:	8522                	mv	a0,s0
    8000134e:	60e2                	ld	ra,24(sp)
    80001350:	6442                	ld	s0,16(sp)
    80001352:	64a2                	ld	s1,8(sp)
    80001354:	6902                	ld	s2,0(sp)
    80001356:	6105                	addi	sp,sp,32
    80001358:	8082                	ret
    8000135a:	0b040413          	addi	s0,s0,176
    8000135e:	b745                	j	800012fe <__sfp+0x24>
    80001360:	4591                	li	a1,4
    80001362:	854a                	mv	a0,s2
    80001364:	ebdff0ef          	jal	ra,80001220 <__sfmoreglue>
    80001368:	e088                	sd	a0,0(s1)
    8000136a:	842a                	mv	s0,a0
    8000136c:	fd51                	bnez	a0,80001308 <__sfp+0x2e>
    8000136e:	47b1                	li	a5,12
    80001370:	00f92023          	sw	a5,0(s2)
    80001374:	bfe1                	j	8000134c <__sfp+0x72>

0000000080001376 <_fwalk_reent>:
_fwalk_reent():
    80001376:	715d                	addi	sp,sp,-80
    80001378:	e0a2                	sd	s0,64(sp)
    8000137a:	fc26                	sd	s1,56(sp)
    8000137c:	f052                	sd	s4,32(sp)
    8000137e:	ec56                	sd	s5,24(sp)
    80001380:	e85a                	sd	s6,16(sp)
    80001382:	e45e                	sd	s7,8(sp)
    80001384:	e486                	sd	ra,72(sp)
    80001386:	f84a                	sd	s2,48(sp)
    80001388:	f44e                	sd	s3,40(sp)
    8000138a:	8a2a                	mv	s4,a0
    8000138c:	8aae                	mv	s5,a1
    8000138e:	08050493          	addi	s1,a0,128
    80001392:	4401                	li	s0,0
    80001394:	4b05                	li	s6,1
    80001396:	5bfd                	li	s7,-1
    80001398:	ec89                	bnez	s1,800013b2 <_fwalk_reent+0x3c>
    8000139a:	8522                	mv	a0,s0
    8000139c:	60a6                	ld	ra,72(sp)
    8000139e:	6406                	ld	s0,64(sp)
    800013a0:	74e2                	ld	s1,56(sp)
    800013a2:	7942                	ld	s2,48(sp)
    800013a4:	79a2                	ld	s3,40(sp)
    800013a6:	7a02                	ld	s4,32(sp)
    800013a8:	6ae2                	ld	s5,24(sp)
    800013aa:	6b42                	ld	s6,16(sp)
    800013ac:	6ba2                	ld	s7,8(sp)
    800013ae:	6161                	addi	sp,sp,80
    800013b0:	8082                	ret
    800013b2:	0104b903          	ld	s2,16(s1)
    800013b6:	0084a983          	lw	s3,8(s1)
    800013ba:	39fd                	addiw	s3,s3,-1
    800013bc:	0009d463          	bgez	s3,800013c4 <_fwalk_reent+0x4e>
    800013c0:	6084                	ld	s1,0(s1)
    800013c2:	bfd9                	j	80001398 <_fwalk_reent+0x22>
    800013c4:	01095783          	lhu	a5,16(s2)
    800013c8:	00fb7b63          	bgeu	s6,a5,800013de <_fwalk_reent+0x68>
    800013cc:	01291783          	lh	a5,18(s2)
    800013d0:	01778763          	beq	a5,s7,800013de <_fwalk_reent+0x68>
    800013d4:	85ca                	mv	a1,s2
    800013d6:	8552                	mv	a0,s4
    800013d8:	9a82                	jalr	s5
    800013da:	8c49                	or	s0,s0,a0
    800013dc:	2401                	sext.w	s0,s0
    800013de:	0b090913          	addi	s2,s2,176
    800013e2:	bfe1                	j	800013ba <_fwalk_reent+0x44>

00000000800013e4 <__swhatbuf_r>:
__swhatbuf_r():
    800013e4:	7135                	addi	sp,sp,-160
    800013e6:	e526                	sd	s1,136(sp)
    800013e8:	84ae                	mv	s1,a1
    800013ea:	01259583          	lh	a1,18(a1)
    800013ee:	e922                	sd	s0,144(sp)
    800013f0:	ed06                	sd	ra,152(sp)
    800013f2:	8432                	mv	s0,a2
    800013f4:	0005dc63          	bgez	a1,8000140c <__swhatbuf_r+0x28>
    800013f8:	0104d783          	lhu	a5,16(s1)
    800013fc:	0006a023          	sw	zero,0(a3)
    80001400:	0807f793          	andi	a5,a5,128
    80001404:	e785                	bnez	a5,8000142c <__swhatbuf_r+0x48>
    80001406:	40000793          	li	a5,1024
    8000140a:	a01d                	j	80001430 <__swhatbuf_r+0x4c>
    8000140c:	0830                	addi	a2,sp,24
    8000140e:	e436                	sd	a3,8(sp)
    80001410:	3c8000ef          	jal	ra,800017d8 <_fstat_r>
    80001414:	66a2                	ld	a3,8(sp)
    80001416:	fe0541e3          	bltz	a0,800013f8 <__swhatbuf_r+0x14>
    8000141a:	47f2                	lw	a5,28(sp)
    8000141c:	673d                	lui	a4,0xf
    8000141e:	8ff9                	and	a5,a5,a4
    80001420:	6709                	lui	a4,0x2
    80001422:	8f99                	sub	a5,a5,a4
    80001424:	0017b793          	seqz	a5,a5
    80001428:	c29c                	sw	a5,0(a3)
    8000142a:	bff1                	j	80001406 <__swhatbuf_r+0x22>
    8000142c:	04000793          	li	a5,64
    80001430:	e01c                	sd	a5,0(s0)
    80001432:	60ea                	ld	ra,152(sp)
    80001434:	644a                	ld	s0,144(sp)
    80001436:	64aa                	ld	s1,136(sp)
    80001438:	4501                	li	a0,0
    8000143a:	610d                	addi	sp,sp,160
    8000143c:	8082                	ret

000000008000143e <__smakebuf_r>:
__smakebuf_r():
    8000143e:	0105d783          	lhu	a5,16(a1)
    80001442:	7179                	addi	sp,sp,-48
    80001444:	f022                	sd	s0,32(sp)
    80001446:	f406                	sd	ra,40(sp)
    80001448:	ec26                	sd	s1,24(sp)
    8000144a:	e84a                	sd	s2,16(sp)
    8000144c:	8b89                	andi	a5,a5,2
    8000144e:	842e                	mv	s0,a1
    80001450:	cf89                	beqz	a5,8000146a <__smakebuf_r+0x2c>
    80001452:	07f40793          	addi	a5,s0,127
    80001456:	e01c                	sd	a5,0(s0)
    80001458:	ec1c                	sd	a5,24(s0)
    8000145a:	4785                	li	a5,1
    8000145c:	d01c                	sw	a5,32(s0)
    8000145e:	70a2                	ld	ra,40(sp)
    80001460:	7402                	ld	s0,32(sp)
    80001462:	64e2                	ld	s1,24(sp)
    80001464:	6942                	ld	s2,16(sp)
    80001466:	6145                	addi	sp,sp,48
    80001468:	8082                	ret
    8000146a:	0054                	addi	a3,sp,4
    8000146c:	0030                	addi	a2,sp,8
    8000146e:	84aa                	mv	s1,a0
    80001470:	f75ff0ef          	jal	ra,800013e4 <__swhatbuf_r>
    80001474:	65a2                	ld	a1,8(sp)
    80001476:	892a                	mv	s2,a0
    80001478:	8526                	mv	a0,s1
    8000147a:	124000ef          	jal	ra,8000159e <_malloc_r>
    8000147e:	ed01                	bnez	a0,80001496 <__smakebuf_r+0x58>
    80001480:	01041783          	lh	a5,16(s0)
    80001484:	2007f713          	andi	a4,a5,512
    80001488:	fb79                	bnez	a4,8000145e <__smakebuf_r+0x20>
    8000148a:	9bf1                	andi	a5,a5,-4
    8000148c:	0027e793          	ori	a5,a5,2
    80001490:	00f41823          	sh	a5,16(s0)
    80001494:	bf7d                	j	80001452 <__smakebuf_r+0x14>
    80001496:	00000797          	auipc	a5,0x0
    8000149a:	d8078793          	addi	a5,a5,-640 # 80001216 <_cleanup_r>
    8000149e:	e4bc                	sd	a5,72(s1)
    800014a0:	01045783          	lhu	a5,16(s0)
    800014a4:	e008                	sd	a0,0(s0)
    800014a6:	ec08                	sd	a0,24(s0)
    800014a8:	0807e793          	ori	a5,a5,128
    800014ac:	00f41823          	sh	a5,16(s0)
    800014b0:	67a2                	ld	a5,8(sp)
    800014b2:	d01c                	sw	a5,32(s0)
    800014b4:	4792                	lw	a5,4(sp)
    800014b6:	cf91                	beqz	a5,800014d2 <__smakebuf_r+0x94>
    800014b8:	01241583          	lh	a1,18(s0)
    800014bc:	8526                	mv	a0,s1
    800014be:	346000ef          	jal	ra,80001804 <_isatty_r>
    800014c2:	c901                	beqz	a0,800014d2 <__smakebuf_r+0x94>
    800014c4:	01045783          	lhu	a5,16(s0)
    800014c8:	9bf1                	andi	a5,a5,-4
    800014ca:	0017e793          	ori	a5,a5,1
    800014ce:	00f41823          	sh	a5,16(s0)
    800014d2:	01045783          	lhu	a5,16(s0)
    800014d6:	00f96933          	or	s2,s2,a5
    800014da:	01241823          	sh	s2,16(s0)
    800014de:	b741                	j	8000145e <__smakebuf_r+0x20>

00000000800014e0 <memset>:
memset():
    800014e0:	832a                	mv	t1,a0
    800014e2:	c611                	beqz	a2,800014ee <memset+0xe>
    800014e4:	00b30023          	sb	a1,0(t1)
    800014e8:	167d                	addi	a2,a2,-1
    800014ea:	0305                	addi	t1,t1,1
    800014ec:	fe65                	bnez	a2,800014e4 <memset+0x4>
    800014ee:	8082                	ret

00000000800014f0 <_free_r>:
_free_r():
    800014f0:	c5d5                	beqz	a1,8000159c <_free_r+0xac>
    800014f2:	ff85b783          	ld	a5,-8(a1)
    800014f6:	1101                	addi	sp,sp,-32
    800014f8:	e822                	sd	s0,16(sp)
    800014fa:	ec06                	sd	ra,24(sp)
    800014fc:	e426                	sd	s1,8(sp)
    800014fe:	ff858413          	addi	s0,a1,-8
    80001502:	0007d363          	bgez	a5,80001508 <_free_r+0x18>
    80001506:	943e                	add	s0,s0,a5
    80001508:	84aa                	mv	s1,a0
    8000150a:	352000ef          	jal	ra,8000185c <__malloc_lock>
    8000150e:	00005797          	auipc	a5,0x5
    80001512:	6e278793          	addi	a5,a5,1762 # 80006bf0 <__tls_base>
    80001516:	639c                	ld	a5,0(a5)
    80001518:	ef89                	bnez	a5,80001532 <_free_r+0x42>
    8000151a:	00043423          	sd	zero,8(s0)
    8000151e:	00005797          	auipc	a5,0x5
    80001522:	6c87b923          	sd	s0,1746(a5) # 80006bf0 <__tls_base>
    80001526:	6442                	ld	s0,16(sp)
    80001528:	60e2                	ld	ra,24(sp)
    8000152a:	8526                	mv	a0,s1
    8000152c:	64a2                	ld	s1,8(sp)
    8000152e:	6105                	addi	sp,sp,32
    80001530:	a63d                	j	8000185e <__malloc_unlock>
    80001532:	00f47e63          	bgeu	s0,a5,8000154e <_free_r+0x5e>
    80001536:	6014                	ld	a3,0(s0)
    80001538:	00d40733          	add	a4,s0,a3
    8000153c:	00e79663          	bne	a5,a4,80001548 <_free_r+0x58>
    80001540:	6398                	ld	a4,0(a5)
    80001542:	679c                	ld	a5,8(a5)
    80001544:	9736                	add	a4,a4,a3
    80001546:	e018                	sd	a4,0(s0)
    80001548:	e41c                	sd	a5,8(s0)
    8000154a:	bfd1                	j	8000151e <_free_r+0x2e>
    8000154c:	87ba                	mv	a5,a4
    8000154e:	6798                	ld	a4,8(a5)
    80001550:	c319                	beqz	a4,80001556 <_free_r+0x66>
    80001552:	fee47de3          	bgeu	s0,a4,8000154c <_free_r+0x5c>
    80001556:	6394                	ld	a3,0(a5)
    80001558:	00d78633          	add	a2,a5,a3
    8000155c:	00861f63          	bne	a2,s0,8000157a <_free_r+0x8a>
    80001560:	6010                	ld	a2,0(s0)
    80001562:	96b2                	add	a3,a3,a2
    80001564:	e394                	sd	a3,0(a5)
    80001566:	00d78633          	add	a2,a5,a3
    8000156a:	fac71ee3          	bne	a4,a2,80001526 <_free_r+0x36>
    8000156e:	6310                	ld	a2,0(a4)
    80001570:	6718                	ld	a4,8(a4)
    80001572:	96b2                	add	a3,a3,a2
    80001574:	e394                	sd	a3,0(a5)
    80001576:	e798                	sd	a4,8(a5)
    80001578:	b77d                	j	80001526 <_free_r+0x36>
    8000157a:	00c47563          	bgeu	s0,a2,80001584 <_free_r+0x94>
    8000157e:	47b1                	li	a5,12
    80001580:	c09c                	sw	a5,0(s1)
    80001582:	b755                	j	80001526 <_free_r+0x36>
    80001584:	6010                	ld	a2,0(s0)
    80001586:	00c406b3          	add	a3,s0,a2
    8000158a:	00d71663          	bne	a4,a3,80001596 <_free_r+0xa6>
    8000158e:	6314                	ld	a3,0(a4)
    80001590:	6718                	ld	a4,8(a4)
    80001592:	96b2                	add	a3,a3,a2
    80001594:	e014                	sd	a3,0(s0)
    80001596:	e418                	sd	a4,8(s0)
    80001598:	e780                	sd	s0,8(a5)
    8000159a:	b771                	j	80001526 <_free_r+0x36>
    8000159c:	8082                	ret

000000008000159e <_malloc_r>:
_malloc_r():
    8000159e:	00758793          	addi	a5,a1,7
    800015a2:	7179                	addi	sp,sp,-48
    800015a4:	9be1                	andi	a5,a5,-8
    800015a6:	e84a                	sd	s2,16(sp)
    800015a8:	f406                	sd	ra,40(sp)
    800015aa:	f022                	sd	s0,32(sp)
    800015ac:	ec26                	sd	s1,24(sp)
    800015ae:	e44e                	sd	s3,8(sp)
    800015b0:	07a1                	addi	a5,a5,8
    800015b2:	4741                	li	a4,16
    800015b4:	4941                	li	s2,16
    800015b6:	00e7e363          	bltu	a5,a4,800015bc <_malloc_r+0x1e>
    800015ba:	893e                	mv	s2,a5
    800015bc:	80000737          	lui	a4,0x80000
    800015c0:	fff74713          	not	a4,a4
    800015c4:	00f76463          	bltu	a4,a5,800015cc <_malloc_r+0x2e>
    800015c8:	00b97c63          	bgeu	s2,a1,800015e0 <_malloc_r+0x42>
    800015cc:	47b1                	li	a5,12
    800015ce:	c11c                	sw	a5,0(a0)
    800015d0:	4501                	li	a0,0
    800015d2:	70a2                	ld	ra,40(sp)
    800015d4:	7402                	ld	s0,32(sp)
    800015d6:	64e2                	ld	s1,24(sp)
    800015d8:	6942                	ld	s2,16(sp)
    800015da:	69a2                	ld	s3,8(sp)
    800015dc:	6145                	addi	sp,sp,48
    800015de:	8082                	ret
    800015e0:	84aa                	mv	s1,a0
    800015e2:	27a000ef          	jal	ra,8000185c <__malloc_lock>
    800015e6:	00005797          	auipc	a5,0x5
    800015ea:	60a78793          	addi	a5,a5,1546 # 80006bf0 <__tls_base>
    800015ee:	6398                	ld	a4,0(a5)
    800015f0:	843a                	mv	s0,a4
    800015f2:	ec05                	bnez	s0,8000162a <_malloc_r+0x8c>
    800015f4:	00005797          	auipc	a5,0x5
    800015f8:	60478793          	addi	a5,a5,1540 # 80006bf8 <__malloc_sbrk_start>
    800015fc:	639c                	ld	a5,0(a5)
    800015fe:	eb89                	bnez	a5,80001610 <_malloc_r+0x72>
    80001600:	4581                	li	a1,0
    80001602:	8526                	mv	a0,s1
    80001604:	092000ef          	jal	ra,80001696 <_sbrk_r>
    80001608:	00005797          	auipc	a5,0x5
    8000160c:	5ea7b823          	sd	a0,1520(a5) # 80006bf8 <__malloc_sbrk_start>
    80001610:	85ca                	mv	a1,s2
    80001612:	8526                	mv	a0,s1
    80001614:	082000ef          	jal	ra,80001696 <_sbrk_r>
    80001618:	59fd                	li	s3,-1
    8000161a:	07351163          	bne	a0,s3,8000167c <_malloc_r+0xde>
    8000161e:	47b1                	li	a5,12
    80001620:	c09c                	sw	a5,0(s1)
    80001622:	8526                	mv	a0,s1
    80001624:	23a000ef          	jal	ra,8000185e <__malloc_unlock>
    80001628:	b765                	j	800015d0 <_malloc_r+0x32>
    8000162a:	601c                	ld	a5,0(s0)
    8000162c:	412787bb          	subw	a5,a5,s2
    80001630:	0407c363          	bltz	a5,80001676 <_malloc_r+0xd8>
    80001634:	46bd                	li	a3,15
    80001636:	00f6d763          	bge	a3,a5,80001644 <_malloc_r+0xa6>
    8000163a:	e01c                	sd	a5,0(s0)
    8000163c:	943e                	add	s0,s0,a5
    8000163e:	01243023          	sd	s2,0(s0)
    80001642:	a801                	j	80001652 <_malloc_r+0xb4>
    80001644:	641c                	ld	a5,8(s0)
    80001646:	02871663          	bne	a4,s0,80001672 <_malloc_r+0xd4>
    8000164a:	00005717          	auipc	a4,0x5
    8000164e:	5af73323          	sd	a5,1446(a4) # 80006bf0 <__tls_base>
    80001652:	8526                	mv	a0,s1
    80001654:	20a000ef          	jal	ra,8000185e <__malloc_unlock>
    80001658:	00f40513          	addi	a0,s0,15
    8000165c:	00840793          	addi	a5,s0,8
    80001660:	9961                	andi	a0,a0,-8
    80001662:	40f507bb          	subw	a5,a0,a5
    80001666:	d7b5                	beqz	a5,800015d2 <_malloc_r+0x34>
    80001668:	943e                	add	s0,s0,a5
    8000166a:	40f007bb          	negw	a5,a5
    8000166e:	e01c                	sd	a5,0(s0)
    80001670:	b78d                	j	800015d2 <_malloc_r+0x34>
    80001672:	e71c                	sd	a5,8(a4)
    80001674:	bff9                	j	80001652 <_malloc_r+0xb4>
    80001676:	8722                	mv	a4,s0
    80001678:	6400                	ld	s0,8(s0)
    8000167a:	bfa5                	j	800015f2 <_malloc_r+0x54>
    8000167c:	00750413          	addi	s0,a0,7
    80001680:	9861                	andi	s0,s0,-8
    80001682:	fa850ee3          	beq	a0,s0,8000163e <_malloc_r+0xa0>
    80001686:	40a405b3          	sub	a1,s0,a0
    8000168a:	8526                	mv	a0,s1
    8000168c:	00a000ef          	jal	ra,80001696 <_sbrk_r>
    80001690:	fb3517e3          	bne	a0,s3,8000163e <_malloc_r+0xa0>
    80001694:	b769                	j	8000161e <_malloc_r+0x80>

0000000080001696 <_sbrk_r>:
_sbrk_r():
    80001696:	1141                	addi	sp,sp,-16
    80001698:	e022                	sd	s0,0(sp)
    8000169a:	842a                	mv	s0,a0
    8000169c:	852e                	mv	a0,a1
    8000169e:	9a01ac23          	sw	zero,-1608(gp) # 80006d60 <errno>
    800016a2:	e406                	sd	ra,8(sp)
    800016a4:	138040ef          	jal	ra,800057dc <_sbrk>
    800016a8:	57fd                	li	a5,-1
    800016aa:	00f51763          	bne	a0,a5,800016b8 <_sbrk_r+0x22>
    800016ae:	9b818793          	addi	a5,gp,-1608 # 80006d60 <errno>
    800016b2:	439c                	lw	a5,0(a5)
    800016b4:	c391                	beqz	a5,800016b8 <_sbrk_r+0x22>
    800016b6:	c01c                	sw	a5,0(s0)
    800016b8:	60a2                	ld	ra,8(sp)
    800016ba:	6402                	ld	s0,0(sp)
    800016bc:	0141                	addi	sp,sp,16
    800016be:	8082                	ret

00000000800016c0 <__sread>:
__sread():
    800016c0:	1141                	addi	sp,sp,-16
    800016c2:	e022                	sd	s0,0(sp)
    800016c4:	842e                	mv	s0,a1
    800016c6:	01259583          	lh	a1,18(a1)
    800016ca:	e406                	sd	ra,8(sp)
    800016cc:	194000ef          	jal	ra,80001860 <_read_r>
    800016d0:	00054963          	bltz	a0,800016e2 <__sread+0x22>
    800016d4:	6c5c                	ld	a5,152(s0)
    800016d6:	97aa                	add	a5,a5,a0
    800016d8:	ec5c                	sd	a5,152(s0)
    800016da:	60a2                	ld	ra,8(sp)
    800016dc:	6402                	ld	s0,0(sp)
    800016de:	0141                	addi	sp,sp,16
    800016e0:	8082                	ret
    800016e2:	01045783          	lhu	a5,16(s0)
    800016e6:	777d                	lui	a4,0xfffff
    800016e8:	177d                	addi	a4,a4,-1
    800016ea:	8ff9                	and	a5,a5,a4
    800016ec:	00f41823          	sh	a5,16(s0)
    800016f0:	b7ed                	j	800016da <__sread+0x1a>

00000000800016f2 <__swrite>:
__swrite():
    800016f2:	0105d783          	lhu	a5,16(a1)
    800016f6:	7179                	addi	sp,sp,-48
    800016f8:	f022                	sd	s0,32(sp)
    800016fa:	ec26                	sd	s1,24(sp)
    800016fc:	e84a                	sd	s2,16(sp)
    800016fe:	e44e                	sd	s3,8(sp)
    80001700:	f406                	sd	ra,40(sp)
    80001702:	1007f793          	andi	a5,a5,256
    80001706:	84aa                	mv	s1,a0
    80001708:	842e                	mv	s0,a1
    8000170a:	8932                	mv	s2,a2
    8000170c:	89b6                	mv	s3,a3
    8000170e:	c799                	beqz	a5,8000171c <__swrite+0x2a>
    80001710:	01259583          	lh	a1,18(a1)
    80001714:	4689                	li	a3,2
    80001716:	4601                	li	a2,0
    80001718:	116000ef          	jal	ra,8000182e <_lseek_r>
    8000171c:	01045783          	lhu	a5,16(s0)
    80001720:	777d                	lui	a4,0xfffff
    80001722:	177d                	addi	a4,a4,-1
    80001724:	8ff9                	and	a5,a5,a4
    80001726:	00f41823          	sh	a5,16(s0)
    8000172a:	01241583          	lh	a1,18(s0)
    8000172e:	7402                	ld	s0,32(sp)
    80001730:	70a2                	ld	ra,40(sp)
    80001732:	86ce                	mv	a3,s3
    80001734:	864a                	mv	a2,s2
    80001736:	69a2                	ld	s3,8(sp)
    80001738:	6942                	ld	s2,16(sp)
    8000173a:	8526                	mv	a0,s1
    8000173c:	64e2                	ld	s1,24(sp)
    8000173e:	6145                	addi	sp,sp,48
    80001740:	a081                	j	80001780 <_write_r>

0000000080001742 <__sseek>:
__sseek():
    80001742:	1141                	addi	sp,sp,-16
    80001744:	e022                	sd	s0,0(sp)
    80001746:	842e                	mv	s0,a1
    80001748:	01259583          	lh	a1,18(a1)
    8000174c:	e406                	sd	ra,8(sp)
    8000174e:	0e0000ef          	jal	ra,8000182e <_lseek_r>
    80001752:	57fd                	li	a5,-1
    80001754:	01045703          	lhu	a4,16(s0)
    80001758:	00f51b63          	bne	a0,a5,8000176e <__sseek+0x2c>
    8000175c:	77fd                	lui	a5,0xfffff
    8000175e:	17fd                	addi	a5,a5,-1
    80001760:	8ff9                	and	a5,a5,a4
    80001762:	00f41823          	sh	a5,16(s0)
    80001766:	60a2                	ld	ra,8(sp)
    80001768:	6402                	ld	s0,0(sp)
    8000176a:	0141                	addi	sp,sp,16
    8000176c:	8082                	ret
    8000176e:	6785                	lui	a5,0x1
    80001770:	8fd9                	or	a5,a5,a4
    80001772:	00f41823          	sh	a5,16(s0)
    80001776:	ec48                	sd	a0,152(s0)
    80001778:	b7fd                	j	80001766 <__sseek+0x24>

000000008000177a <__sclose>:
__sclose():
    8000177a:	01259583          	lh	a1,18(a1)
    8000177e:	a805                	j	800017ae <_close_r>

0000000080001780 <_write_r>:
_write_r():
    80001780:	1141                	addi	sp,sp,-16
    80001782:	e022                	sd	s0,0(sp)
    80001784:	842a                	mv	s0,a0
    80001786:	852e                	mv	a0,a1
    80001788:	85b2                	mv	a1,a2
    8000178a:	8636                	mv	a2,a3
    8000178c:	9a01ac23          	sw	zero,-1608(gp) # 80006d60 <errno>
    80001790:	e406                	sd	ra,8(sp)
    80001792:	0ae040ef          	jal	ra,80005840 <_write>
    80001796:	57fd                	li	a5,-1
    80001798:	00f51763          	bne	a0,a5,800017a6 <_write_r+0x26>
    8000179c:	9b818793          	addi	a5,gp,-1608 # 80006d60 <errno>
    800017a0:	439c                	lw	a5,0(a5)
    800017a2:	c391                	beqz	a5,800017a6 <_write_r+0x26>
    800017a4:	c01c                	sw	a5,0(s0)
    800017a6:	60a2                	ld	ra,8(sp)
    800017a8:	6402                	ld	s0,0(sp)
    800017aa:	0141                	addi	sp,sp,16
    800017ac:	8082                	ret

00000000800017ae <_close_r>:
_close_r():
    800017ae:	1141                	addi	sp,sp,-16
    800017b0:	e022                	sd	s0,0(sp)
    800017b2:	842a                	mv	s0,a0
    800017b4:	852e                	mv	a0,a1
    800017b6:	9a01ac23          	sw	zero,-1608(gp) # 80006d60 <errno>
    800017ba:	e406                	sd	ra,8(sp)
    800017bc:	745030ef          	jal	ra,80005700 <_close>
    800017c0:	57fd                	li	a5,-1
    800017c2:	00f51763          	bne	a0,a5,800017d0 <_close_r+0x22>
    800017c6:	9b818793          	addi	a5,gp,-1608 # 80006d60 <errno>
    800017ca:	439c                	lw	a5,0(a5)
    800017cc:	c391                	beqz	a5,800017d0 <_close_r+0x22>
    800017ce:	c01c                	sw	a5,0(s0)
    800017d0:	60a2                	ld	ra,8(sp)
    800017d2:	6402                	ld	s0,0(sp)
    800017d4:	0141                	addi	sp,sp,16
    800017d6:	8082                	ret

00000000800017d8 <_fstat_r>:
_fstat_r():
    800017d8:	1141                	addi	sp,sp,-16
    800017da:	e022                	sd	s0,0(sp)
    800017dc:	842a                	mv	s0,a0
    800017de:	852e                	mv	a0,a1
    800017e0:	85b2                	mv	a1,a2
    800017e2:	9a01ac23          	sw	zero,-1608(gp) # 80006d60 <errno>
    800017e6:	e406                	sd	ra,8(sp)
    800017e8:	73f030ef          	jal	ra,80005726 <_fstat>
    800017ec:	57fd                	li	a5,-1
    800017ee:	00f51763          	bne	a0,a5,800017fc <_fstat_r+0x24>
    800017f2:	9b818793          	addi	a5,gp,-1608 # 80006d60 <errno>
    800017f6:	439c                	lw	a5,0(a5)
    800017f8:	c391                	beqz	a5,800017fc <_fstat_r+0x24>
    800017fa:	c01c                	sw	a5,0(s0)
    800017fc:	60a2                	ld	ra,8(sp)
    800017fe:	6402                	ld	s0,0(sp)
    80001800:	0141                	addi	sp,sp,16
    80001802:	8082                	ret

0000000080001804 <_isatty_r>:
_isatty_r():
    80001804:	1141                	addi	sp,sp,-16
    80001806:	e022                	sd	s0,0(sp)
    80001808:	842a                	mv	s0,a0
    8000180a:	852e                	mv	a0,a1
    8000180c:	9a01ac23          	sw	zero,-1608(gp) # 80006d60 <errno>
    80001810:	e406                	sd	ra,8(sp)
    80001812:	73f030ef          	jal	ra,80005750 <_isatty>
    80001816:	57fd                	li	a5,-1
    80001818:	00f51763          	bne	a0,a5,80001826 <_isatty_r+0x22>
    8000181c:	9b818793          	addi	a5,gp,-1608 # 80006d60 <errno>
    80001820:	439c                	lw	a5,0(a5)
    80001822:	c391                	beqz	a5,80001826 <_isatty_r+0x22>
    80001824:	c01c                	sw	a5,0(s0)
    80001826:	60a2                	ld	ra,8(sp)
    80001828:	6402                	ld	s0,0(sp)
    8000182a:	0141                	addi	sp,sp,16
    8000182c:	8082                	ret

000000008000182e <_lseek_r>:
_lseek_r():
    8000182e:	1141                	addi	sp,sp,-16
    80001830:	e022                	sd	s0,0(sp)
    80001832:	842a                	mv	s0,a0
    80001834:	852e                	mv	a0,a1
    80001836:	85b2                	mv	a1,a2
    80001838:	8636                	mv	a2,a3
    8000183a:	9a01ac23          	sw	zero,-1608(gp) # 80006d60 <errno>
    8000183e:	e406                	sd	ra,8(sp)
    80001840:	73d030ef          	jal	ra,8000577c <_lseek>
    80001844:	57fd                	li	a5,-1
    80001846:	00f51763          	bne	a0,a5,80001854 <_lseek_r+0x26>
    8000184a:	9b818793          	addi	a5,gp,-1608 # 80006d60 <errno>
    8000184e:	439c                	lw	a5,0(a5)
    80001850:	c391                	beqz	a5,80001854 <_lseek_r+0x26>
    80001852:	c01c                	sw	a5,0(s0)
    80001854:	60a2                	ld	ra,8(sp)
    80001856:	6402                	ld	s0,0(sp)
    80001858:	0141                	addi	sp,sp,16
    8000185a:	8082                	ret

000000008000185c <__malloc_lock>:
__malloc_lock():
    8000185c:	8082                	ret

000000008000185e <__malloc_unlock>:
__malloc_unlock():
    8000185e:	8082                	ret

0000000080001860 <_read_r>:
_read_r():
    80001860:	1141                	addi	sp,sp,-16
    80001862:	e022                	sd	s0,0(sp)
    80001864:	842a                	mv	s0,a0
    80001866:	852e                	mv	a0,a1
    80001868:	85b2                	mv	a1,a2
    8000186a:	8636                	mv	a2,a3
    8000186c:	9a01ac23          	sw	zero,-1608(gp) # 80006d60 <errno>
    80001870:	e406                	sd	ra,8(sp)
    80001872:	73d030ef          	jal	ra,800057ae <_read>
    80001876:	57fd                	li	a5,-1
    80001878:	00f51763          	bne	a0,a5,80001886 <_read_r+0x26>
    8000187c:	9b818793          	addi	a5,gp,-1608 # 80006d60 <errno>
    80001880:	439c                	lw	a5,0(a5)
    80001882:	c391                	beqz	a5,80001886 <_read_r+0x26>
    80001884:	c01c                	sw	a5,0(s0)
    80001886:	60a2                	ld	ra,8(sp)
    80001888:	6402                	ld	s0,0(sp)
    8000188a:	0141                	addi	sp,sp,16
    8000188c:	8082                	ret

000000008000188e <metal_cpu_get_mtime>:
metal_cpu_get_mtime():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:97
 * will be 0.
 *
 * @param cpu The CPU device handle
 * @return The value of mtime, or 0 if failure
 */
__inline__ unsigned long long metal_cpu_get_mtime(struct metal_cpu *cpu) {
    8000188e:	1101                	addi	sp,sp,-32
    80001890:	ec06                	sd	ra,24(sp)
    80001892:	e822                	sd	s0,16(sp)
    80001894:	1000                	addi	s0,sp,32
    80001896:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:98
    return cpu->vtable->mtime_get(cpu);
    8000189a:	fe843783          	ld	a5,-24(s0)
    8000189e:	639c                	ld	a5,0(a5)
    800018a0:	6b9c                	ld	a5,16(a5)
    800018a2:	fe843503          	ld	a0,-24(s0)
    800018a6:	9782                	jalr	a5
    800018a8:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:99
}
    800018aa:	853e                	mv	a0,a5
    800018ac:	60e2                	ld	ra,24(sp)
    800018ae:	6442                	ld	s0,16(sp)
    800018b0:	6105                	addi	sp,sp,32
    800018b2:	8082                	ret

00000000800018b4 <metal_cpu_set_mtimecmp>:
metal_cpu_set_mtimecmp():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:112
 * @param cpu The CPU device handle
 * @param time The value to set the compare register to
 * @return The value of mtimecmp or -1 if error
 */
__inline__ int metal_cpu_set_mtimecmp(struct metal_cpu *cpu,
                                      unsigned long long time) {
    800018b4:	1101                	addi	sp,sp,-32
    800018b6:	ec06                	sd	ra,24(sp)
    800018b8:	e822                	sd	s0,16(sp)
    800018ba:	1000                	addi	s0,sp,32
    800018bc:	fea43423          	sd	a0,-24(s0)
    800018c0:	feb43023          	sd	a1,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:113
    return cpu->vtable->mtimecmp_set(cpu, time);
    800018c4:	fe843783          	ld	a5,-24(s0)
    800018c8:	639c                	ld	a5,0(a5)
    800018ca:	6f9c                	ld	a5,24(a5)
    800018cc:	fe043583          	ld	a1,-32(s0)
    800018d0:	fe843503          	ld	a0,-24(s0)
    800018d4:	9782                	jalr	a5
    800018d6:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:114
}
    800018d8:	853e                	mv	a0,a5
    800018da:	60e2                	ld	ra,24(sp)
    800018dc:	6442                	ld	s0,16(sp)
    800018de:	6105                	addi	sp,sp,32
    800018e0:	8082                	ret

00000000800018e2 <metal_cpu_timer_interrupt_controller>:
metal_cpu_timer_interrupt_controller():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:126
 *
 * @param cpu The CPU device handle
 * @return A pointer to the timer interrupt handle
 */
__inline__ struct metal_interrupt *
metal_cpu_timer_interrupt_controller(struct metal_cpu *cpu) {
    800018e2:	1101                	addi	sp,sp,-32
    800018e4:	ec06                	sd	ra,24(sp)
    800018e6:	e822                	sd	s0,16(sp)
    800018e8:	1000                	addi	s0,sp,32
    800018ea:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:127
    return cpu->vtable->tmr_controller_interrupt(cpu);
    800018ee:	fe843783          	ld	a5,-24(s0)
    800018f2:	639c                	ld	a5,0(a5)
    800018f4:	739c                	ld	a5,32(a5)
    800018f6:	fe843503          	ld	a0,-24(s0)
    800018fa:	9782                	jalr	a5
    800018fc:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:128
}
    800018fe:	853e                	mv	a0,a5
    80001900:	60e2                	ld	ra,24(sp)
    80001902:	6442                	ld	s0,16(sp)
    80001904:	6105                	addi	sp,sp,32
    80001906:	8082                	ret

0000000080001908 <metal_cpu_timer_get_interrupt_id>:
metal_cpu_timer_get_interrupt_id():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:137
 * Get the interrupt ID of the real-time clock interrupt
 *
 * @param cpu The CPU device handle
 * @return The timer interrupt ID
 */
__inline__ int metal_cpu_timer_get_interrupt_id(struct metal_cpu *cpu) {
    80001908:	1101                	addi	sp,sp,-32
    8000190a:	ec06                	sd	ra,24(sp)
    8000190c:	e822                	sd	s0,16(sp)
    8000190e:	1000                	addi	s0,sp,32
    80001910:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:138
    return cpu->vtable->get_tmr_interrupt_id(cpu);
    80001914:	fe843783          	ld	a5,-24(s0)
    80001918:	639c                	ld	a5,0(a5)
    8000191a:	779c                	ld	a5,40(a5)
    8000191c:	fe843503          	ld	a0,-24(s0)
    80001920:	9782                	jalr	a5
    80001922:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:139
}
    80001924:	853e                	mv	a0,a5
    80001926:	60e2                	ld	ra,24(sp)
    80001928:	6442                	ld	s0,16(sp)
    8000192a:	6105                	addi	sp,sp,32
    8000192c:	8082                	ret

000000008000192e <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:224
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt *
metal_cpu_interrupt_controller(struct metal_cpu *cpu) {
    8000192e:	1101                	addi	sp,sp,-32
    80001930:	ec06                	sd	ra,24(sp)
    80001932:	e822                	sd	s0,16(sp)
    80001934:	1000                	addi	s0,sp,32
    80001936:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:225
    return cpu->vtable->controller_interrupt(cpu);
    8000193a:	fe843783          	ld	a5,-24(s0)
    8000193e:	639c                	ld	a5,0(a5)
    80001940:	6fbc                	ld	a5,88(a5)
    80001942:	fe843503          	ld	a0,-24(s0)
    80001946:	9782                	jalr	a5
    80001948:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/cpu.h:226
}
    8000194a:	853e                	mv	a0,a5
    8000194c:	60e2                	ld	ra,24(sp)
    8000194e:	6442                	ld	s0,16(sp)
    80001950:	6105                	addi	sp,sp,32
    80001952:	8082                	ret

0000000080001954 <metal_cpu_get>:
metal_cpu_get():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/cpu.c:7
/* SPDX-License-Identifier: Apache-2.0 */

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu *metal_cpu_get(unsigned int hartid) {
    80001954:	1101                	addi	sp,sp,-32
    80001956:	ec22                	sd	s0,24(sp)
    80001958:	1000                	addi	s0,sp,32
    8000195a:	87aa                	mv	a5,a0
    8000195c:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/cpu.c:8
    if (hartid < __METAL_DT_MAX_HARTS) {
    80001960:	fec42783          	lw	a5,-20(s0)
    80001964:	2781                	sext.w	a5,a5
    80001966:	eb89                	bnez	a5,80001978 <metal_cpu_get+0x24>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/cpu.c:9
        return (struct metal_cpu *)__metal_cpu_table[hartid];
    80001968:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    8000196c:	fec46783          	lwu	a5,-20(s0)
    80001970:	078e                	slli	a5,a5,0x3
    80001972:	97ba                	add	a5,a5,a4
    80001974:	639c                	ld	a5,0(a5)
    80001976:	a011                	j	8000197a <metal_cpu_get+0x26>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/cpu.c:11
    }
    return NULL;
    80001978:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/cpu.c:12
}
    8000197a:	853e                	mv	a0,a5
    8000197c:	6462                	ld	s0,24(sp)
    8000197e:	6105                	addi	sp,sp,32
    80001980:	8082                	ret

0000000080001982 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/cpu.c:14

int metal_cpu_get_current_hartid() {
    80001982:	1101                	addi	sp,sp,-32
    80001984:	ec22                	sd	s0,24(sp)
    80001986:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/cpu.c:17
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r"(mhartid));
    80001988:	f14027f3          	csrr	a5,mhartid
    8000198c:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/cpu.c:18
    return mhartid;
    80001990:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/cpu.c:20
#endif
}
    80001994:	853e                	mv	a0,a5
    80001996:	6462                	ld	s0,24(sp)
    80001998:	6105                	addi	sp,sp,32
    8000199a:	8082                	ret

000000008000199c <metal_interrupt_init>:
metal_interrupt_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:130
 * before any interrupts are registered or enabled with the handler. It
 * is invalid to initialize an interrupt controller more than once.
 *
 * @param controller The handle for the interrupt controller
 */
__inline__ void metal_interrupt_init(struct metal_interrupt *controller) {
    8000199c:	1101                	addi	sp,sp,-32
    8000199e:	ec06                	sd	ra,24(sp)
    800019a0:	e822                	sd	s0,16(sp)
    800019a2:	1000                	addi	s0,sp,32
    800019a4:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:131
    controller->vtable->interrupt_init(controller);
    800019a8:	fe843783          	ld	a5,-24(s0)
    800019ac:	639c                	ld	a5,0(a5)
    800019ae:	639c                	ld	a5,0(a5)
    800019b0:	fe843503          	ld	a0,-24(s0)
    800019b4:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:132
}
    800019b6:	0001                	nop
    800019b8:	60e2                	ld	ra,24(sp)
    800019ba:	6442                	ld	s0,16(sp)
    800019bc:	6105                	addi	sp,sp,32
    800019be:	8082                	ret

00000000800019c0 <metal_interrupt_register_handler>:
metal_interrupt_register_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:240
 * @return 0 upon success
 */
__inline__ int
metal_interrupt_register_handler(struct metal_interrupt *controller, int id,
                                 metal_interrupt_handler_t handler,
                                 void *priv_data) {
    800019c0:	7179                	addi	sp,sp,-48
    800019c2:	f406                	sd	ra,40(sp)
    800019c4:	f022                	sd	s0,32(sp)
    800019c6:	1800                	addi	s0,sp,48
    800019c8:	fea43423          	sd	a0,-24(s0)
    800019cc:	87ae                	mv	a5,a1
    800019ce:	fcc43c23          	sd	a2,-40(s0)
    800019d2:	fcd43823          	sd	a3,-48(s0)
    800019d6:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:241
    return controller->vtable->interrupt_register(controller, id, handler,
    800019da:	fe843783          	ld	a5,-24(s0)
    800019de:	639c                	ld	a5,0(a5)
    800019e0:	7f98                	ld	a4,56(a5)
    800019e2:	fe442783          	lw	a5,-28(s0)
    800019e6:	fd043683          	ld	a3,-48(s0)
    800019ea:	fd843603          	ld	a2,-40(s0)
    800019ee:	85be                	mv	a1,a5
    800019f0:	fe843503          	ld	a0,-24(s0)
    800019f4:	9702                	jalr	a4
    800019f6:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:243
                                                  priv_data);
}
    800019f8:	853e                	mv	a0,a5
    800019fa:	70a2                	ld	ra,40(sp)
    800019fc:	7402                	ld	s0,32(sp)
    800019fe:	6145                	addi	sp,sp,48
    80001a00:	8082                	ret

0000000080001a02 <metal_interrupt_enable>:
metal_interrupt_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:267
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to enable
 * @return 0 upon success
 */
__inline__ int metal_interrupt_enable(struct metal_interrupt *controller,
                                      int id) {
    80001a02:	1101                	addi	sp,sp,-32
    80001a04:	ec06                	sd	ra,24(sp)
    80001a06:	e822                	sd	s0,16(sp)
    80001a08:	1000                	addi	s0,sp,32
    80001a0a:	fea43423          	sd	a0,-24(s0)
    80001a0e:	87ae                	mv	a5,a1
    80001a10:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:268
    return controller->vtable->interrupt_enable(controller, id);
    80001a14:	fe843783          	ld	a5,-24(s0)
    80001a18:	639c                	ld	a5,0(a5)
    80001a1a:	67b8                	ld	a4,72(a5)
    80001a1c:	fe442783          	lw	a5,-28(s0)
    80001a20:	85be                	mv	a1,a5
    80001a22:	fe843503          	ld	a0,-24(s0)
    80001a26:	9702                	jalr	a4
    80001a28:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:269
}
    80001a2a:	853e                	mv	a0,a5
    80001a2c:	60e2                	ld	ra,24(sp)
    80001a2e:	6442                	ld	s0,16(sp)
    80001a30:	6105                	addi	sp,sp,32
    80001a32:	8082                	ret

0000000080001a34 <metal_interrupt_disable>:
metal_interrupt_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:278
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to disable
 * @return 0 upon success
 */
__inline__ int metal_interrupt_disable(struct metal_interrupt *controller,
                                       int id) {
    80001a34:	1101                	addi	sp,sp,-32
    80001a36:	ec06                	sd	ra,24(sp)
    80001a38:	e822                	sd	s0,16(sp)
    80001a3a:	1000                	addi	s0,sp,32
    80001a3c:	fea43423          	sd	a0,-24(s0)
    80001a40:	87ae                	mv	a5,a1
    80001a42:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:279
    return controller->vtable->interrupt_disable(controller, id);
    80001a46:	fe843783          	ld	a5,-24(s0)
    80001a4a:	639c                	ld	a5,0(a5)
    80001a4c:	6bb8                	ld	a4,80(a5)
    80001a4e:	fe442783          	lw	a5,-28(s0)
    80001a52:	85be                	mv	a1,a5
    80001a54:	fe843503          	ld	a0,-24(s0)
    80001a58:	9702                	jalr	a4
    80001a5a:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/interrupt.h:280
}
    80001a5c:	853e                	mv	a0,a5
    80001a5e:	60e2                	ld	ra,24(sp)
    80001a60:	6442                	ld	s0,16(sp)
    80001a62:	6105                	addi	sp,sp,32
    80001a64:	8082                	ret

0000000080001a66 <metal_uart_init>:
metal_uart_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:59
 more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) {
    80001a66:	1101                	addi	sp,sp,-32
    80001a68:	ec06                	sd	ra,24(sp)
    80001a6a:	e822                	sd	s0,16(sp)
    80001a6c:	1000                	addi	s0,sp,32
    80001a6e:	fea43423          	sd	a0,-24(s0)
    80001a72:	87ae                	mv	a5,a1
    80001a74:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:60
    uart->vtable->init(uart, baud_rate);
    80001a78:	fe843783          	ld	a5,-24(s0)
    80001a7c:	639c                	ld	a5,0(a5)
    80001a7e:	6398                	ld	a4,0(a5)
    80001a80:	fe442783          	lw	a5,-28(s0)
    80001a84:	85be                	mv	a1,a5
    80001a86:	fe843503          	ld	a0,-24(s0)
    80001a8a:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:61
}
    80001a8c:	0001                	nop
    80001a8e:	60e2                	ld	ra,24(sp)
    80001a90:	6442                	ld	s0,16(sp)
    80001a92:	6105                	addi	sp,sp,32
    80001a94:	8082                	ret

0000000080001a96 <metal_uart_putc>:
metal_uart_putc():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:69
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) {
    80001a96:	1101                	addi	sp,sp,-32
    80001a98:	ec06                	sd	ra,24(sp)
    80001a9a:	e822                	sd	s0,16(sp)
    80001a9c:	1000                	addi	s0,sp,32
    80001a9e:	fea43423          	sd	a0,-24(s0)
    80001aa2:	87ae                	mv	a5,a1
    80001aa4:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:70
    return uart->vtable->putc(uart, c);
    80001aa8:	fe843783          	ld	a5,-24(s0)
    80001aac:	639c                	ld	a5,0(a5)
    80001aae:	6798                	ld	a4,8(a5)
    80001ab0:	fe442783          	lw	a5,-28(s0)
    80001ab4:	85be                	mv	a1,a5
    80001ab6:	fe843503          	ld	a0,-24(s0)
    80001aba:	9702                	jalr	a4
    80001abc:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:71
}
    80001abe:	853e                	mv	a0,a5
    80001ac0:	60e2                	ld	ra,24(sp)
    80001ac2:	6442                	ld	s0,16(sp)
    80001ac4:	6105                	addi	sp,sp,32
    80001ac6:	8082                	ret

0000000080001ac8 <metal_uart_txready>:
metal_uart_txready():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:78
/*!
 * @brief Test, determine if tx output is blocked(full/busy)
 * @param uart The UART device handle
 * @return 0 not blocked
 */
__inline__ int metal_uart_txready(struct metal_uart *uart) {
    80001ac8:	1101                	addi	sp,sp,-32
    80001aca:	ec06                	sd	ra,24(sp)
    80001acc:	e822                	sd	s0,16(sp)
    80001ace:	1000                	addi	s0,sp,32
    80001ad0:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:79
    return uart->vtable->txready(uart);
    80001ad4:	fe843783          	ld	a5,-24(s0)
    80001ad8:	639c                	ld	a5,0(a5)
    80001ada:	6b9c                	ld	a5,16(a5)
    80001adc:	fe843503          	ld	a0,-24(s0)
    80001ae0:	9782                	jalr	a5
    80001ae2:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:80
}
    80001ae4:	853e                	mv	a0,a5
    80001ae6:	60e2                	ld	ra,24(sp)
    80001ae8:	6442                	ld	s0,16(sp)
    80001aea:	6105                	addi	sp,sp,32
    80001aec:	8082                	ret

0000000080001aee <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:111
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart,
                                        int baud_rate) {
    80001aee:	1101                	addi	sp,sp,-32
    80001af0:	ec06                	sd	ra,24(sp)
    80001af2:	e822                	sd	s0,16(sp)
    80001af4:	1000                	addi	s0,sp,32
    80001af6:	fea43423          	sd	a0,-24(s0)
    80001afa:	87ae                	mv	a5,a1
    80001afc:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:112
    return uart->vtable->set_baud_rate(uart, baud_rate);
    80001b00:	fe843783          	ld	a5,-24(s0)
    80001b04:	639c                	ld	a5,0(a5)
    80001b06:	7798                	ld	a4,40(a5)
    80001b08:	fe442783          	lw	a5,-28(s0)
    80001b0c:	85be                	mv	a1,a5
    80001b0e:	fe843503          	ld	a0,-24(s0)
    80001b12:	9702                	jalr	a4
    80001b14:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/uart.h:113
}
    80001b16:	853e                	mv	a0,a5
    80001b18:	60e2                	ld	ra,24(sp)
    80001b1a:	6442                	ld	s0,16(sp)
    80001b1c:	6105                	addi	sp,sp,32
    80001b1e:	8082                	ret

0000000080001b20 <metal_uart_get_device>:
metal_uart_get_device():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/uart.c:34
extern __inline__ int metal_uart_set_receive_watermark(struct metal_uart *uart,
                                                       size_t level);
extern __inline__ size_t
metal_uart_get_receive_watermark(struct metal_uart *uart);

struct metal_uart *metal_uart_get_device(unsigned int device_num) {
    80001b20:	1101                	addi	sp,sp,-32
    80001b22:	ec22                	sd	s0,24(sp)
    80001b24:	1000                	addi	s0,sp,32
    80001b26:	87aa                	mv	a5,a0
    80001b28:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/uart.c:36
#if __METAL_DT_MAX_UARTS > 0
    if (device_num < __METAL_DT_MAX_UARTS) {
    80001b2c:	fec42783          	lw	a5,-20(s0)
    80001b30:	2781                	sext.w	a5,a5
    80001b32:	eb89                	bnez	a5,80001b44 <metal_uart_get_device+0x24>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/uart.c:37
        return (struct metal_uart *)__metal_uart_table[device_num];
    80001b34:	82818713          	addi	a4,gp,-2008 # 80006bd0 <__metal_uart_table>
    80001b38:	fec46783          	lwu	a5,-20(s0)
    80001b3c:	078e                	slli	a5,a5,0x3
    80001b3e:	97ba                	add	a5,a5,a4
    80001b40:	639c                	ld	a5,0(a5)
    80001b42:	a011                	j	80001b46 <metal_uart_get_device+0x26>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/uart.c:41
    }
#endif

    return NULL;
    80001b44:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/uart.c:42
}
    80001b46:	853e                	mv	a0,a5
    80001b48:	6462                	ld	s0,24(sp)
    80001b4a:	6105                	addi	sp,sp,32
    80001b4c:	8082                	ret

0000000080001b4e <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:115
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
    80001b4e:	1101                	addi	sp,sp,-32
    80001b50:	ec22                	sd	s0,24(sp)
    80001b52:	1000                	addi	s0,sp,32
    80001b54:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:116
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
    80001b58:	fe843703          	ld	a4,-24(s0)
    80001b5c:	00004797          	auipc	a5,0x4
    80001b60:	1dc78793          	addi	a5,a5,476 # 80005d38 <__metal_dt_clint_2000000>
    80001b64:	00f71563          	bne	a4,a5,80001b6e <__metal_driver_sifive_clint0_control_base+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:117
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
    80001b68:	020007b7          	lui	a5,0x2000
    80001b6c:	a011                	j	80001b70 <__metal_driver_sifive_clint0_control_base+0x22>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:120
	}
	else {
		return 0;
    80001b6e:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:122
	}
}
    80001b70:	853e                	mv	a0,a5
    80001b72:	6462                	ld	s0,24(sp)
    80001b74:	6105                	addi	sp,sp,32
    80001b76:	8082                	ret

0000000080001b78 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:135
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
    80001b78:	1101                	addi	sp,sp,-32
    80001b7a:	ec22                	sd	s0,24(sp)
    80001b7c:	1000                	addi	s0,sp,32
    80001b7e:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:136
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
    80001b82:	fe843703          	ld	a4,-24(s0)
    80001b86:	00004797          	auipc	a5,0x4
    80001b8a:	1b278793          	addi	a5,a5,434 # 80005d38 <__metal_dt_clint_2000000>
    80001b8e:	00f71463          	bne	a4,a5,80001b96 <__metal_driver_sifive_clint0_num_interrupts+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:137
		return METAL_MAX_CLINT_INTERRUPTS;
    80001b92:	4789                	li	a5,2
    80001b94:	a011                	j	80001b98 <__metal_driver_sifive_clint0_num_interrupts+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:140
	}
	else {
		return 0;
    80001b96:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:142
	}
}
    80001b98:	853e                	mv	a0,a5
    80001b9a:	6462                	ld	s0,24(sp)
    80001b9c:	6105                	addi	sp,sp,32
    80001b9e:	8082                	ret

0000000080001ba0 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:145

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
    80001ba0:	1101                	addi	sp,sp,-32
    80001ba2:	ec22                	sd	s0,24(sp)
    80001ba4:	1000                	addi	s0,sp,32
    80001ba6:	fea43423          	sd	a0,-24(s0)
    80001baa:	87ae                	mv	a5,a1
    80001bac:	fef42223          	sw	a5,-28(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:146
	if (idx == 0) {
    80001bb0:	fe442783          	lw	a5,-28(s0)
    80001bb4:	2781                	sext.w	a5,a5
    80001bb6:	e791                	bnez	a5,80001bc2 <__metal_driver_sifive_clint0_interrupt_parents+0x22>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:147
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    80001bb8:	00004797          	auipc	a5,0x4
    80001bbc:	1a078793          	addi	a5,a5,416 # 80005d58 <__metal_dt_cpu_0_interrupt_controller>
    80001bc0:	a831                	j	80001bdc <__metal_driver_sifive_clint0_interrupt_parents+0x3c>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:149
	}
	else if (idx == 1) {
    80001bc2:	fe442783          	lw	a5,-28(s0)
    80001bc6:	0007871b          	sext.w	a4,a5
    80001bca:	4785                	li	a5,1
    80001bcc:	00f71763          	bne	a4,a5,80001bda <__metal_driver_sifive_clint0_interrupt_parents+0x3a>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:150
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    80001bd0:	00004797          	auipc	a5,0x4
    80001bd4:	18878793          	addi	a5,a5,392 # 80005d58 <__metal_dt_cpu_0_interrupt_controller>
    80001bd8:	a011                	j	80001bdc <__metal_driver_sifive_clint0_interrupt_parents+0x3c>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:153
	}
	else {
		return NULL;
    80001bda:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:155
	}
}
    80001bdc:	853e                	mv	a0,a5
    80001bde:	6462                	ld	s0,24(sp)
    80001be0:	6105                	addi	sp,sp,32
    80001be2:	8082                	ret

0000000080001be4 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:158

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
    80001be4:	1101                	addi	sp,sp,-32
    80001be6:	ec22                	sd	s0,24(sp)
    80001be8:	1000                	addi	s0,sp,32
    80001bea:	fea43423          	sd	a0,-24(s0)
    80001bee:	87ae                	mv	a5,a1
    80001bf0:	fef42223          	sw	a5,-28(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:159
	if (idx == 0) {
    80001bf4:	fe442783          	lw	a5,-28(s0)
    80001bf8:	2781                	sext.w	a5,a5
    80001bfa:	e399                	bnez	a5,80001c00 <__metal_driver_sifive_clint0_interrupt_lines+0x1c>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:160
		return 3;
    80001bfc:	478d                	li	a5,3
    80001bfe:	a819                	j	80001c14 <__metal_driver_sifive_clint0_interrupt_lines+0x30>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:162
	}
	else if (idx == 1) {
    80001c00:	fe442783          	lw	a5,-28(s0)
    80001c04:	0007871b          	sext.w	a4,a5
    80001c08:	4785                	li	a5,1
    80001c0a:	00f71463          	bne	a4,a5,80001c12 <__metal_driver_sifive_clint0_interrupt_lines+0x2e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:163
		return 7;
    80001c0e:	479d                	li	a5,7
    80001c10:	a011                	j	80001c14 <__metal_driver_sifive_clint0_interrupt_lines+0x30>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:166
	}
	else {
		return 0;
    80001c12:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:168
	}
}
    80001c14:	853e                	mv	a0,a5
    80001c16:	6462                	ld	s0,24(sp)
    80001c18:	6105                	addi	sp,sp,32
    80001c1a:	8082                	ret

0000000080001c1c <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/drivers/riscv_clint0.h>
#include <metal/io.h>
#include <metal/machine.h>

unsigned long long
__metal_clint0_mtime_get(struct __metal_driver_riscv_clint0 *clint) {
    80001c1c:	7179                	addi	sp,sp,-48
    80001c1e:	f406                	sd	ra,40(sp)
    80001c20:	f022                	sd	s0,32(sp)
    80001c22:	1800                	addi	s0,sp,48
    80001c24:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:17
    __metal_io_u32 lo, hi;
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
    80001c28:	fd843783          	ld	a5,-40(s0)
    80001c2c:	853e                	mv	a0,a5
    80001c2e:	f21ff0ef          	jal	ra,80001b4e <__metal_driver_sifive_clint0_control_base>
    80001c32:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)

    /* Guard against rollover when reading */
    do {
        hi = __METAL_ACCESS_ONCE(
    80001c36:	fe843703          	ld	a4,-24(s0)
    80001c3a:	67b1                	lui	a5,0xc
    80001c3c:	17f1                	addi	a5,a5,-4
    80001c3e:	97ba                	add	a5,a5,a4
    80001c40:	439c                	lw	a5,0(a5)
    80001c42:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:23 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
        lo = __METAL_ACCESS_ONCE(
    80001c46:	fe843703          	ld	a4,-24(s0)
    80001c4a:	67b1                	lui	a5,0xc
    80001c4c:	17e1                	addi	a5,a5,-8
    80001c4e:	97ba                	add	a5,a5,a4
    80001c50:	439c                	lw	a5,0(a5)
    80001c52:	fef42023          	sw	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:25 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    80001c56:	fe843703          	ld	a4,-24(s0)
    80001c5a:	67b1                	lui	a5,0xc
    80001c5c:	17f1                	addi	a5,a5,-4
    80001c5e:	97ba                	add	a5,a5,a4
    80001c60:	439c                	lw	a5,0(a5)
    80001c62:	0007871b          	sext.w	a4,a5
    80001c66:	fe442783          	lw	a5,-28(s0)
    80001c6a:	2781                	sext.w	a5,a5
    80001c6c:	fce795e3          	bne	a5,a4,80001c36 <__metal_clint0_mtime_get+0x1a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:29
                                                    METAL_RISCV_CLINT0_MTIME +
                                                    4)) != hi);

    return (((unsigned long long)hi) << 32) | lo;
    80001c70:	fe446783          	lwu	a5,-28(s0)
    80001c74:	02079713          	slli	a4,a5,0x20
    80001c78:	fe046783          	lwu	a5,-32(s0)
    80001c7c:	8fd9                	or	a5,a5,a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:30
}
    80001c7e:	853e                	mv	a0,a5
    80001c80:	70a2                	ld	ra,40(sp)
    80001c82:	7402                	ld	s0,32(sp)
    80001c84:	6145                	addi	sp,sp,48
    80001c86:	8082                	ret

0000000080001c88 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:34

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time) {
    80001c88:	7139                	addi	sp,sp,-64
    80001c8a:	fc06                	sd	ra,56(sp)
    80001c8c:	f822                	sd	s0,48(sp)
    80001c8e:	0080                	addi	s0,sp,64
    80001c90:	fca43c23          	sd	a0,-40(s0)
    80001c94:	87ae                	mv	a5,a1
    80001c96:	fcc43423          	sd	a2,-56(s0)
    80001c9a:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:35
    struct __metal_driver_riscv_clint0 *clint =
    80001c9e:	fd843783          	ld	a5,-40(s0)
    80001ca2:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:38
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
    80001ca6:	fe843783          	ld	a5,-24(s0)
    80001caa:	853e                	mv	a0,a5
    80001cac:	ea3ff0ef          	jal	ra,80001b4e <__metal_driver_sifive_clint0_control_base>
    80001cb0:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:45
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
    80001cb4:	fd442783          	lw	a5,-44(s0)
    80001cb8:	0037979b          	slliw	a5,a5,0x3
    80001cbc:	2781                	sext.w	a5,a5
    80001cbe:	873e                	mv	a4,a5
    80001cc0:	fe043783          	ld	a5,-32(s0)
    80001cc4:	973e                	add	a4,a4,a5
    80001cc6:	6791                	lui	a5,0x4
    80001cc8:	0791                	addi	a5,a5,4
    80001cca:	97ba                	add	a5,a5,a4
    80001ccc:	873e                	mv	a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:47
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = 0xFFFFFFFF;
    80001cce:	57fd                	li	a5,-1
    80001cd0:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
    80001cd2:	fd442783          	lw	a5,-44(s0)
    80001cd6:	0037979b          	slliw	a5,a5,0x3
    80001cda:	2781                	sext.w	a5,a5
    80001cdc:	873e                	mv	a4,a5
    80001cde:	fe043783          	ld	a5,-32(s0)
    80001ce2:	973e                	add	a4,a4,a5
    80001ce4:	6791                	lui	a5,0x4
    80001ce6:	97ba                	add	a5,a5,a4
    80001ce8:	873e                	mv	a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:50
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
        (__metal_io_u32)time;
    80001cea:	fc843783          	ld	a5,-56(s0)
    80001cee:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:49
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
    80001cf0:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:53
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = (__metal_io_u32)(time >> 32);
    80001cf2:	fc843783          	ld	a5,-56(s0)
    80001cf6:	0207d693          	srli	a3,a5,0x20
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:51
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
    80001cfa:	fd442783          	lw	a5,-44(s0)
    80001cfe:	0037979b          	slliw	a5,a5,0x3
    80001d02:	2781                	sext.w	a5,a5
    80001d04:	873e                	mv	a4,a5
    80001d06:	fe043783          	ld	a5,-32(s0)
    80001d0a:	973e                	add	a4,a4,a5
    80001d0c:	6791                	lui	a5,0x4
    80001d0e:	0791                	addi	a5,a5,4
    80001d10:	97ba                	add	a5,a5,a4
    80001d12:	873e                	mv	a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:53
                                           4)) = (__metal_io_u32)(time >> 32);
    80001d14:	0006879b          	sext.w	a5,a3
    80001d18:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:54
    return 0;
    80001d1a:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:55
}
    80001d1c:	853e                	mv	a0,a5
    80001d1e:	70e2                	ld	ra,56(sp)
    80001d20:	7442                	ld	s0,48(sp)
    80001d22:	6121                	addi	sp,sp,64
    80001d24:	8082                	ret

0000000080001d26 <_get_cpu_intc>:
_get_cpu_intc():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:57

static struct metal_interrupt *_get_cpu_intc() {
    80001d26:	1101                	addi	sp,sp,-32
    80001d28:	ec06                	sd	ra,24(sp)
    80001d2a:	e822                	sd	s0,16(sp)
    80001d2c:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:58
    int hartid = 0;
    80001d2e:	fe042623          	sw	zero,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:59
    __asm__ volatile("csrr %[hartid], mhartid"
    80001d32:	f14027f3          	csrr	a5,mhartid
    80001d36:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:62
                     : [hartid] "=r"(hartid)::"memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
    80001d3a:	fec42783          	lw	a5,-20(s0)
    80001d3e:	853e                	mv	a0,a5
    80001d40:	c15ff0ef          	jal	ra,80001954 <metal_cpu_get>
    80001d44:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:64

    return metal_cpu_interrupt_controller(cpu);
    80001d48:	fe043503          	ld	a0,-32(s0)
    80001d4c:	be3ff0ef          	jal	ra,8000192e <metal_cpu_interrupt_controller>
    80001d50:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:65
}
    80001d52:	853e                	mv	a0,a5
    80001d54:	60e2                	ld	ra,24(sp)
    80001d56:	6442                	ld	s0,16(sp)
    80001d58:	6105                	addi	sp,sp,32
    80001d5a:	8082                	ret

0000000080001d5c <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:67

void __metal_driver_riscv_clint0_init(struct metal_interrupt *controller) {
    80001d5c:	7139                	addi	sp,sp,-64
    80001d5e:	fc06                	sd	ra,56(sp)
    80001d60:	f822                	sd	s0,48(sp)
    80001d62:	0080                	addi	s0,sp,64
    80001d64:	fca43423          	sd	a0,-56(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:69
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
    80001d68:	fc843503          	ld	a0,-56(s0)
    80001d6c:	e0dff0ef          	jal	ra,80001b78 <__metal_driver_sifive_clint0_num_interrupts>
    80001d70:	87aa                	mv	a5,a0
    80001d72:	fef42423          	sw	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:70
    struct __metal_driver_riscv_clint0 *clint =
    80001d76:	fc843783          	ld	a5,-56(s0)
    80001d7a:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:73
        (struct __metal_driver_riscv_clint0 *)(controller);

    if (!clint->init_done) {
    80001d7e:	fe043783          	ld	a5,-32(s0)
    80001d82:	479c                	lw	a5,8(a5)
    80001d84:	e7ad                	bnez	a5,80001dee <__metal_driver_riscv_clint0_init+0x92>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:76
        /* Register its interrupts with with parent controller, aka sw and
         * timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
    80001d86:	fe042623          	sw	zero,-20(s0)
    80001d8a:	a0b1                	j	80001dd6 <__metal_driver_riscv_clint0_init+0x7a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:78 (discriminator 3)
            struct metal_interrupt *intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    80001d8c:	fec42783          	lw	a5,-20(s0)
    80001d90:	85be                	mv	a1,a5
    80001d92:	fc843503          	ld	a0,-56(s0)
    80001d96:	e0bff0ef          	jal	ra,80001ba0 <__metal_driver_sifive_clint0_interrupt_parents>
    80001d9a:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:80 (discriminator 3)
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    80001d9e:	fec42783          	lw	a5,-20(s0)
    80001da2:	85be                	mv	a1,a5
    80001da4:	fc843503          	ld	a0,-56(s0)
    80001da8:	e3dff0ef          	jal	ra,80001be4 <__metal_driver_sifive_clint0_interrupt_lines>
    80001dac:	87aa                	mv	a5,a0
    80001dae:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:81 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
    80001db2:	fd843783          	ld	a5,-40(s0)
    80001db6:	639c                	ld	a5,0(a5)
    80001db8:	7f98                	ld	a4,56(a5)
    80001dba:	fd442783          	lw	a5,-44(s0)
    80001dbe:	fc843683          	ld	a3,-56(s0)
    80001dc2:	4601                	li	a2,0
    80001dc4:	85be                	mv	a1,a5
    80001dc6:	fd843503          	ld	a0,-40(s0)
    80001dca:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
    80001dcc:	fec42783          	lw	a5,-20(s0)
    80001dd0:	2785                	addiw	a5,a5,1
    80001dd2:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 1)
    80001dd6:	fec42703          	lw	a4,-20(s0)
    80001dda:	fe842783          	lw	a5,-24(s0)
    80001dde:	2701                	sext.w	a4,a4
    80001de0:	2781                	sext.w	a5,a5
    80001de2:	faf745e3          	blt	a4,a5,80001d8c <__metal_driver_riscv_clint0_init+0x30>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:83
        }
        clint->init_done = 1;
    80001de6:	fe043783          	ld	a5,-32(s0)
    80001dea:	4705                	li	a4,1
    80001dec:	c798                	sw	a4,8(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:85
    }
}
    80001dee:	0001                	nop
    80001df0:	70e2                	ld	ra,56(sp)
    80001df2:	7442                	ld	s0,48(sp)
    80001df4:	6121                	addi	sp,sp,64
    80001df6:	8082                	ret

0000000080001df8 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:89

int __metal_driver_riscv_clint0_register(struct metal_interrupt *controller,
                                         int id, metal_interrupt_handler_t isr,
                                         void *priv) {
    80001df8:	711d                	addi	sp,sp,-96
    80001dfa:	ec86                	sd	ra,88(sp)
    80001dfc:	e8a2                	sd	s0,80(sp)
    80001dfe:	1080                	addi	s0,sp,96
    80001e00:	faa43c23          	sd	a0,-72(s0)
    80001e04:	87ae                	mv	a5,a1
    80001e06:	fac43423          	sd	a2,-88(s0)
    80001e0a:	fad43023          	sd	a3,-96(s0)
    80001e0e:	faf42a23          	sw	a5,-76(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:90
    int rc = -1;
    80001e12:	57fd                	li	a5,-1
    80001e14:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:91
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
    80001e18:	27f010ef          	jal	ra,80003896 <__metal_controller_interrupt_vector_mode>
    80001e1c:	87aa                	mv	a5,a0
    80001e1e:	fcf42c23          	sw	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:92
    struct metal_interrupt *intc = NULL;
    80001e22:	fe043023          	sd	zero,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:93
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
    80001e26:	f01ff0ef          	jal	ra,80001d26 <_get_cpu_intc>
    80001e2a:	fca43823          	sd	a0,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:95
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
    80001e2e:	fb843503          	ld	a0,-72(s0)
    80001e32:	d47ff0ef          	jal	ra,80001b78 <__metal_driver_sifive_clint0_num_interrupts>
    80001e36:	87aa                	mv	a5,a0
    80001e38:	fcf42623          	sw	a5,-52(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:97

    if ((mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE)) {
    80001e3c:	fd842783          	lw	a5,-40(s0)
    80001e40:	0007871b          	sext.w	a4,a5
    80001e44:	4785                	li	a5,1
    80001e46:	00f70963          	beq	a4,a5,80001e58 <__metal_driver_riscv_clint0_register+0x60>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:97 (discriminator 1)
    80001e4a:	fd842783          	lw	a5,-40(s0)
    80001e4e:	2781                	sext.w	a5,a5
    80001e50:	c781                	beqz	a5,80001e58 <__metal_driver_riscv_clint0_register+0x60>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:98
        return rc;
    80001e52:	fec42783          	lw	a5,-20(s0)
    80001e56:	a861                	j	80001eee <__metal_driver_riscv_clint0_register+0xf6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:101
    }

    for (int i = 0; i < num_interrupts; i++) {
    80001e58:	fc042e23          	sw	zero,-36(s0)
    80001e5c:	a889                	j	80001eae <__metal_driver_riscv_clint0_register+0xb6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:102
        int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    80001e5e:	fdc42783          	lw	a5,-36(s0)
    80001e62:	85be                	mv	a1,a5
    80001e64:	fb843503          	ld	a0,-72(s0)
    80001e68:	d7dff0ef          	jal	ra,80001be4 <__metal_driver_sifive_clint0_interrupt_lines>
    80001e6c:	87aa                	mv	a5,a0
    80001e6e:	fcf42423          	sw	a5,-56(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:103
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    80001e72:	fdc42783          	lw	a5,-36(s0)
    80001e76:	85be                	mv	a1,a5
    80001e78:	fb843503          	ld	a0,-72(s0)
    80001e7c:	d25ff0ef          	jal	ra,80001ba0 <__metal_driver_sifive_clint0_interrupt_parents>
    80001e80:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:104
        if (cpu_intc == intc && id == line) {
    80001e84:	fd043703          	ld	a4,-48(s0)
    80001e88:	fe043783          	ld	a5,-32(s0)
    80001e8c:	00f71a63          	bne	a4,a5,80001ea0 <__metal_driver_riscv_clint0_register+0xa8>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:104 (discriminator 1)
    80001e90:	fb442703          	lw	a4,-76(s0)
    80001e94:	fc842783          	lw	a5,-56(s0)
    80001e98:	2701                	sext.w	a4,a4
    80001e9a:	2781                	sext.w	a5,a5
    80001e9c:	02f70263          	beq	a4,a5,80001ec0 <__metal_driver_riscv_clint0_register+0xc8>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:107 (discriminator 2)
            break;
        }
        intc = NULL;
    80001ea0:	fe043023          	sd	zero,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 2)
    for (int i = 0; i < num_interrupts; i++) {
    80001ea4:	fdc42783          	lw	a5,-36(s0)
    80001ea8:	2785                	addiw	a5,a5,1
    80001eaa:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 1)
    80001eae:	fdc42703          	lw	a4,-36(s0)
    80001eb2:	fcc42783          	lw	a5,-52(s0)
    80001eb6:	2701                	sext.w	a4,a4
    80001eb8:	2781                	sext.w	a5,a5
    80001eba:	faf742e3          	blt	a4,a5,80001e5e <__metal_driver_riscv_clint0_register+0x66>
    80001ebe:	a011                	j	80001ec2 <__metal_driver_riscv_clint0_register+0xca>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:105
            break;
    80001ec0:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:111
    }

    /* Register its interrupts with parent controller */
    if (intc) {
    80001ec2:	fe043783          	ld	a5,-32(s0)
    80001ec6:	c395                	beqz	a5,80001eea <__metal_driver_riscv_clint0_register+0xf2>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:112
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
    80001ec8:	fe043783          	ld	a5,-32(s0)
    80001ecc:	639c                	ld	a5,0(a5)
    80001ece:	7f98                	ld	a4,56(a5)
    80001ed0:	fb442783          	lw	a5,-76(s0)
    80001ed4:	fa043683          	ld	a3,-96(s0)
    80001ed8:	fa843603          	ld	a2,-88(s0)
    80001edc:	85be                	mv	a1,a5
    80001ede:	fe043503          	ld	a0,-32(s0)
    80001ee2:	9702                	jalr	a4
    80001ee4:	87aa                	mv	a5,a0
    80001ee6:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:114
    }
    return rc;
    80001eea:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:115
}
    80001eee:	853e                	mv	a0,a5
    80001ef0:	60e6                	ld	ra,88(sp)
    80001ef2:	6446                	ld	s0,80(sp)
    80001ef4:	6125                	addi	sp,sp,96
    80001ef6:	8082                	ret

0000000080001ef8 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_vector_register(
    struct metal_interrupt *controller, int id,
    metal_interrupt_vector_handler_t isr, void *priv) {
    80001ef8:	7139                	addi	sp,sp,-64
    80001efa:	fc22                	sd	s0,56(sp)
    80001efc:	0080                	addi	s0,sp,64
    80001efe:	fca43c23          	sd	a0,-40(s0)
    80001f02:	87ae                	mv	a5,a1
    80001f04:	fcc43423          	sd	a2,-56(s0)
    80001f08:	fcd43023          	sd	a3,-64(s0)
    80001f0c:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:121
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
    80001f10:	57fd                	li	a5,-1
    80001f12:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:122
    return rc;
    80001f16:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:123
}
    80001f1a:	853e                	mv	a0,a5
    80001f1c:	7462                	ld	s0,56(sp)
    80001f1e:	6121                	addi	sp,sp,64
    80001f20:	8082                	ret

0000000080001f22 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:126

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode(
    struct metal_interrupt *controller) {
    80001f22:	1101                	addi	sp,sp,-32
    80001f24:	ec06                	sd	ra,24(sp)
    80001f26:	e822                	sd	s0,16(sp)
    80001f28:	1000                	addi	s0,sp,32
    80001f2a:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:127
    return __metal_controller_interrupt_vector_mode();
    80001f2e:	169010ef          	jal	ra,80003896 <__metal_controller_interrupt_vector_mode>
    80001f32:	87aa                	mv	a5,a0
    80001f34:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:128
}
    80001f36:	853e                	mv	a0,a5
    80001f38:	60e2                	ld	ra,24(sp)
    80001f3a:	6442                	ld	s0,16(sp)
    80001f3c:	6105                	addi	sp,sp,32
    80001f3e:	8082                	ret

0000000080001f40 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:131

int __metal_driver_riscv_clint0_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
    80001f40:	7179                	addi	sp,sp,-48
    80001f42:	f406                	sd	ra,40(sp)
    80001f44:	f022                	sd	s0,32(sp)
    80001f46:	1800                	addi	s0,sp,48
    80001f48:	fca43c23          	sd	a0,-40(s0)
    80001f4c:	87ae                	mv	a5,a1
    80001f4e:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:132
    int rc = -1;
    80001f52:	57fd                	li	a5,-1
    80001f54:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:133
    struct metal_interrupt *intc = _get_cpu_intc();
    80001f58:	dcfff0ef          	jal	ra,80001d26 <_get_cpu_intc>
    80001f5c:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:135

    if (intc) {
    80001f60:	fe043783          	ld	a5,-32(s0)
    80001f64:	c795                	beqz	a5,80001f90 <__metal_driver_riscv_clint0_set_vector_mode+0x50>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:138
        /* Valid vector modes are VECTOR and DIRECT, anything else is invalid
         * (-1) */
        switch (mode) {
    80001f66:	fd442783          	lw	a5,-44(s0)
    80001f6a:	0007871b          	sext.w	a4,a5
    80001f6e:	4785                	li	a5,1
    80001f70:	02e7e263          	bltu	a5,a4,80001f94 <__metal_driver_riscv_clint0_set_vector_mode+0x54>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:141
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
    80001f74:	fe043783          	ld	a5,-32(s0)
    80001f78:	639c                	ld	a5,0(a5)
    80001f7a:	6798                	ld	a4,8(a5)
    80001f7c:	fd442783          	lw	a5,-44(s0)
    80001f80:	85be                	mv	a1,a5
    80001f82:	fe043503          	ld	a0,-32(s0)
    80001f86:	9702                	jalr	a4
    80001f88:	87aa                	mv	a5,a0
    80001f8a:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:142
            break;
    80001f8e:	a021                	j	80001f96 <__metal_driver_riscv_clint0_set_vector_mode+0x56>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:146
        default:
            break;
        }
    }
    80001f90:	0001                	nop
    80001f92:	a011                	j	80001f96 <__metal_driver_riscv_clint0_set_vector_mode+0x56>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:144
            break;
    80001f94:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:147
    return rc;
    80001f96:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:148
}
    80001f9a:	853e                	mv	a0,a5
    80001f9c:	70a2                	ld	ra,40(sp)
    80001f9e:	7402                	ld	s0,32(sp)
    80001fa0:	6145                	addi	sp,sp,48
    80001fa2:	8082                	ret

0000000080001fa4 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:151

int __metal_driver_riscv_clint0_enable(struct metal_interrupt *controller,
                                       int id) {
    80001fa4:	715d                	addi	sp,sp,-80
    80001fa6:	e486                	sd	ra,72(sp)
    80001fa8:	e0a2                	sd	s0,64(sp)
    80001faa:	0880                	addi	s0,sp,80
    80001fac:	faa43c23          	sd	a0,-72(s0)
    80001fb0:	87ae                	mv	a5,a1
    80001fb2:	faf42a23          	sw	a5,-76(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:152
    int rc = -1;
    80001fb6:	57fd                	li	a5,-1
    80001fb8:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:154

    if (id) {
    80001fbc:	fb442783          	lw	a5,-76(s0)
    80001fc0:	2781                	sext.w	a5,a5
    80001fc2:	c3dd                	beqz	a5,80002068 <__metal_driver_riscv_clint0_enable+0xc4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:155
        struct metal_interrupt *intc = NULL;
    80001fc4:	fe043023          	sd	zero,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:156
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
    80001fc8:	d5fff0ef          	jal	ra,80001d26 <_get_cpu_intc>
    80001fcc:	fca43823          	sd	a0,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:158
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
    80001fd0:	fb843503          	ld	a0,-72(s0)
    80001fd4:	ba5ff0ef          	jal	ra,80001b78 <__metal_driver_sifive_clint0_num_interrupts>
    80001fd8:	87aa                	mv	a5,a0
    80001fda:	fcf42623          	sw	a5,-52(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:160

        for (int i = 0; i < num_interrupts; i++) {
    80001fde:	fc042e23          	sw	zero,-36(s0)
    80001fe2:	a889                	j	80002034 <__metal_driver_riscv_clint0_enable+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:162
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    80001fe4:	fdc42783          	lw	a5,-36(s0)
    80001fe8:	85be                	mv	a1,a5
    80001fea:	fb843503          	ld	a0,-72(s0)
    80001fee:	bf7ff0ef          	jal	ra,80001be4 <__metal_driver_sifive_clint0_interrupt_lines>
    80001ff2:	87aa                	mv	a5,a0
    80001ff4:	fcf42423          	sw	a5,-56(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:164
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    80001ff8:	fdc42783          	lw	a5,-36(s0)
    80001ffc:	85be                	mv	a1,a5
    80001ffe:	fb843503          	ld	a0,-72(s0)
    80002002:	b9fff0ef          	jal	ra,80001ba0 <__metal_driver_sifive_clint0_interrupt_parents>
    80002006:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:165
            if (cpu_intc == intc && id == line) {
    8000200a:	fd043703          	ld	a4,-48(s0)
    8000200e:	fe043783          	ld	a5,-32(s0)
    80002012:	00f71a63          	bne	a4,a5,80002026 <__metal_driver_riscv_clint0_enable+0x82>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:165 (discriminator 1)
    80002016:	fb442703          	lw	a4,-76(s0)
    8000201a:	fc842783          	lw	a5,-56(s0)
    8000201e:	2701                	sext.w	a4,a4
    80002020:	2781                	sext.w	a5,a5
    80002022:	02f70263          	beq	a4,a5,80002046 <__metal_driver_riscv_clint0_enable+0xa2>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:168 (discriminator 2)
                break;
            }
            intc = NULL;
    80002026:	fe043023          	sd	zero,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
    8000202a:	fdc42783          	lw	a5,-36(s0)
    8000202e:	2785                	addiw	a5,a5,1
    80002030:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 1)
    80002034:	fdc42703          	lw	a4,-36(s0)
    80002038:	fcc42783          	lw	a5,-52(s0)
    8000203c:	2701                	sext.w	a4,a4
    8000203e:	2781                	sext.w	a5,a5
    80002040:	faf742e3          	blt	a4,a5,80001fe4 <__metal_driver_riscv_clint0_enable+0x40>
    80002044:	a011                	j	80002048 <__metal_driver_riscv_clint0_enable+0xa4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:166
                break;
    80002046:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:172
        }

        /* Enable its interrupts with parent controller */
        if (intc) {
    80002048:	fe043783          	ld	a5,-32(s0)
    8000204c:	cf91                	beqz	a5,80002068 <__metal_driver_riscv_clint0_enable+0xc4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:173
            rc = intc->vtable->interrupt_enable(intc, id);
    8000204e:	fe043783          	ld	a5,-32(s0)
    80002052:	639c                	ld	a5,0(a5)
    80002054:	67b8                	ld	a4,72(a5)
    80002056:	fb442783          	lw	a5,-76(s0)
    8000205a:	85be                	mv	a1,a5
    8000205c:	fe043503          	ld	a0,-32(s0)
    80002060:	9702                	jalr	a4
    80002062:	87aa                	mv	a5,a0
    80002064:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:177
        }
    }

    return rc;
    80002068:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:178
}
    8000206c:	853e                	mv	a0,a5
    8000206e:	60a6                	ld	ra,72(sp)
    80002070:	6406                	ld	s0,64(sp)
    80002072:	6161                	addi	sp,sp,80
    80002074:	8082                	ret

0000000080002076 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:181

int __metal_driver_riscv_clint0_disable(struct metal_interrupt *controller,
                                        int id) {
    80002076:	715d                	addi	sp,sp,-80
    80002078:	e486                	sd	ra,72(sp)
    8000207a:	e0a2                	sd	s0,64(sp)
    8000207c:	0880                	addi	s0,sp,80
    8000207e:	faa43c23          	sd	a0,-72(s0)
    80002082:	87ae                	mv	a5,a1
    80002084:	faf42a23          	sw	a5,-76(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:182
    int rc = -1;
    80002088:	57fd                	li	a5,-1
    8000208a:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:184

    if (id) {
    8000208e:	fb442783          	lw	a5,-76(s0)
    80002092:	2781                	sext.w	a5,a5
    80002094:	c3dd                	beqz	a5,8000213a <__metal_driver_riscv_clint0_disable+0xc4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:185
        struct metal_interrupt *intc = NULL;
    80002096:	fe043023          	sd	zero,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:186
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
    8000209a:	c8dff0ef          	jal	ra,80001d26 <_get_cpu_intc>
    8000209e:	fca43823          	sd	a0,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:188
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
    800020a2:	fb843503          	ld	a0,-72(s0)
    800020a6:	ad3ff0ef          	jal	ra,80001b78 <__metal_driver_sifive_clint0_num_interrupts>
    800020aa:	87aa                	mv	a5,a0
    800020ac:	fcf42623          	sw	a5,-52(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:190

        for (int i = 0; i < num_interrupts; i++) {
    800020b0:	fc042e23          	sw	zero,-36(s0)
    800020b4:	a889                	j	80002106 <__metal_driver_riscv_clint0_disable+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:192
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    800020b6:	fdc42783          	lw	a5,-36(s0)
    800020ba:	85be                	mv	a1,a5
    800020bc:	fb843503          	ld	a0,-72(s0)
    800020c0:	b25ff0ef          	jal	ra,80001be4 <__metal_driver_sifive_clint0_interrupt_lines>
    800020c4:	87aa                	mv	a5,a0
    800020c6:	fcf42423          	sw	a5,-56(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:194
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    800020ca:	fdc42783          	lw	a5,-36(s0)
    800020ce:	85be                	mv	a1,a5
    800020d0:	fb843503          	ld	a0,-72(s0)
    800020d4:	acdff0ef          	jal	ra,80001ba0 <__metal_driver_sifive_clint0_interrupt_parents>
    800020d8:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:195
            if (cpu_intc == intc && id == line) {
    800020dc:	fd043703          	ld	a4,-48(s0)
    800020e0:	fe043783          	ld	a5,-32(s0)
    800020e4:	00f71a63          	bne	a4,a5,800020f8 <__metal_driver_riscv_clint0_disable+0x82>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:195 (discriminator 1)
    800020e8:	fb442703          	lw	a4,-76(s0)
    800020ec:	fc842783          	lw	a5,-56(s0)
    800020f0:	2701                	sext.w	a4,a4
    800020f2:	2781                	sext.w	a5,a5
    800020f4:	02f70263          	beq	a4,a5,80002118 <__metal_driver_riscv_clint0_disable+0xa2>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:198 (discriminator 2)
                break;
            }
            intc = NULL;
    800020f8:	fe043023          	sd	zero,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
    800020fc:	fdc42783          	lw	a5,-36(s0)
    80002100:	2785                	addiw	a5,a5,1
    80002102:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 1)
    80002106:	fdc42703          	lw	a4,-36(s0)
    8000210a:	fcc42783          	lw	a5,-52(s0)
    8000210e:	2701                	sext.w	a4,a4
    80002110:	2781                	sext.w	a5,a5
    80002112:	faf742e3          	blt	a4,a5,800020b6 <__metal_driver_riscv_clint0_disable+0x40>
    80002116:	a011                	j	8000211a <__metal_driver_riscv_clint0_disable+0xa4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:196
                break;
    80002118:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:202
        }

        /* Disable its interrupts with parent controller */
        if (intc) {
    8000211a:	fe043783          	ld	a5,-32(s0)
    8000211e:	cf91                	beqz	a5,8000213a <__metal_driver_riscv_clint0_disable+0xc4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:203
            rc = intc->vtable->interrupt_disable(intc, id);
    80002120:	fe043783          	ld	a5,-32(s0)
    80002124:	639c                	ld	a5,0(a5)
    80002126:	6bb8                	ld	a4,80(a5)
    80002128:	fb442783          	lw	a5,-76(s0)
    8000212c:	85be                	mv	a1,a5
    8000212e:	fe043503          	ld	a0,-32(s0)
    80002132:	9702                	jalr	a4
    80002134:	87aa                	mv	a5,a0
    80002136:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:207
        }
    }

    return rc;
    8000213a:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:208
}
    8000213e:	853e                	mv	a0,a5
    80002140:	60a6                	ld	ra,72(sp)
    80002142:	6406                	ld	s0,64(sp)
    80002144:	6161                	addi	sp,sp,80
    80002146:	8082                	ret

0000000080002148 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:211

int __metal_driver_riscv_clint0_command_request(
    struct metal_interrupt *controller, int command, void *data) {
    80002148:	715d                	addi	sp,sp,-80
    8000214a:	e486                	sd	ra,72(sp)
    8000214c:	e0a2                	sd	s0,64(sp)
    8000214e:	0880                	addi	s0,sp,80
    80002150:	fca43423          	sd	a0,-56(s0)
    80002154:	87ae                	mv	a5,a1
    80002156:	fac43c23          	sd	a2,-72(s0)
    8000215a:	fcf42223          	sw	a5,-60(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:213
    int hartid;
    int rc = -1;
    8000215e:	57fd                	li	a5,-1
    80002160:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:214
    struct __metal_driver_riscv_clint0 *clint =
    80002164:	fc843783          	ld	a5,-56(s0)
    80002168:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:217
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(controller);
    8000216c:	fc843503          	ld	a0,-56(s0)
    80002170:	9dfff0ef          	jal	ra,80001b4e <__metal_driver_sifive_clint0_control_base>
    80002174:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:219

    switch (command) {
    80002178:	fc442783          	lw	a5,-60(s0)
    8000217c:	0007871b          	sext.w	a4,a5
    80002180:	4789                	li	a5,2
    80002182:	04f70e63          	beq	a4,a5,800021de <__metal_driver_riscv_clint0_command_request+0x96>
    80002186:	fc442783          	lw	a5,-60(s0)
    8000218a:	0007871b          	sext.w	a4,a5
    8000218e:	4789                	li	a5,2
    80002190:	00e7ca63          	blt	a5,a4,800021a4 <__metal_driver_riscv_clint0_command_request+0x5c>
    80002194:	fc442783          	lw	a5,-60(s0)
    80002198:	0007871b          	sext.w	a4,a5
    8000219c:	4785                	li	a5,1
    8000219e:	02f70263          	beq	a4,a5,800021c2 <__metal_driver_riscv_clint0_command_request+0x7a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:263
            rc = __METAL_ACCESS_ONCE(
                (__metal_io_u32 *)(control_base + (hartid * 4)));
        }
        break;
    default:
        break;
    800021a2:	a8cd                	j	80002294 <__metal_driver_riscv_clint0_command_request+0x14c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:219
    switch (command) {
    800021a4:	fc442783          	lw	a5,-60(s0)
    800021a8:	0007871b          	sext.w	a4,a5
    800021ac:	478d                	li	a5,3
    800021ae:	04f70e63          	beq	a4,a5,8000220a <__metal_driver_riscv_clint0_command_request+0xc2>
    800021b2:	fc442783          	lw	a5,-60(s0)
    800021b6:	0007871b          	sext.w	a4,a5
    800021ba:	4791                	li	a5,4
    800021bc:	08f70d63          	beq	a4,a5,80002256 <__metal_driver_riscv_clint0_command_request+0x10e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:263
        break;
    800021c0:	a8d1                	j	80002294 <__metal_driver_riscv_clint0_command_request+0x14c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:221
        if (data) {
    800021c2:	fb843783          	ld	a5,-72(s0)
    800021c6:	c3e1                	beqz	a5,80002286 <__metal_driver_riscv_clint0_command_request+0x13e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:222
            *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
    800021c8:	fe043503          	ld	a0,-32(s0)
    800021cc:	a51ff0ef          	jal	ra,80001c1c <__metal_clint0_mtime_get>
    800021d0:	872a                	mv	a4,a0
    800021d2:	fb843783          	ld	a5,-72(s0)
    800021d6:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:223
            rc = 0;
    800021d8:	fe042623          	sw	zero,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
    800021dc:	a06d                	j	80002286 <__metal_driver_riscv_clint0_command_request+0x13e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:227
        if (data) {
    800021de:	fb843783          	ld	a5,-72(s0)
    800021e2:	c7c5                	beqz	a5,8000228a <__metal_driver_riscv_clint0_command_request+0x142>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:228
            hartid = *(int *)data;
    800021e4:	fb843783          	ld	a5,-72(s0)
    800021e8:	439c                	lw	a5,0(a5)
    800021ea:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:229
            __METAL_ACCESS_ONCE((
    800021ee:	fd442783          	lw	a5,-44(s0)
    800021f2:	0027979b          	slliw	a5,a5,0x2
    800021f6:	2781                	sext.w	a5,a5
    800021f8:	873e                	mv	a4,a5
    800021fa:	fd843783          	ld	a5,-40(s0)
    800021fe:	97ba                	add	a5,a5,a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:230
                __metal_io_u32 *)(control_base + (hartid * 4))) = METAL_DISABLE;
    80002200:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:231
            rc = 0;
    80002204:	fe042623          	sw	zero,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
    80002208:	a049                	j	8000228a <__metal_driver_riscv_clint0_command_request+0x142>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:235
        if (data) {
    8000220a:	fb843783          	ld	a5,-72(s0)
    8000220e:	c3c1                	beqz	a5,8000228e <__metal_driver_riscv_clint0_command_request+0x146>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:236
            hartid = *(int *)data;
    80002210:	fb843783          	ld	a5,-72(s0)
    80002214:	439c                	lw	a5,0(a5)
    80002216:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:237
            __METAL_ACCESS_ONCE(
    8000221a:	fd442783          	lw	a5,-44(s0)
    8000221e:	0027979b          	slliw	a5,a5,0x2
    80002222:	2781                	sext.w	a5,a5
    80002224:	873e                	mv	a4,a5
    80002226:	fd843783          	ld	a5,-40(s0)
    8000222a:	97ba                	add	a5,a5,a4
    8000222c:	873e                	mv	a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:238
                (__metal_io_u32 *)(control_base + (hartid * 4))) = METAL_ENABLE;
    8000222e:	4785                	li	a5,1
    80002230:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:248
            __METAL_IO_FENCE(o, i);
    80002232:	0480000f          	fence	o,i
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:249
            rc = __METAL_ACCESS_ONCE(
    80002236:	fd442783          	lw	a5,-44(s0)
    8000223a:	0027979b          	slliw	a5,a5,0x2
    8000223e:	2781                	sext.w	a5,a5
    80002240:	873e                	mv	a4,a5
    80002242:	fd843783          	ld	a5,-40(s0)
    80002246:	97ba                	add	a5,a5,a4
    80002248:	439c                	lw	a5,0(a5)
    8000224a:	2781                	sext.w	a5,a5
    8000224c:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:251
            rc = 0;
    80002250:	fe042623          	sw	zero,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
    80002254:	a82d                	j	8000228e <__metal_driver_riscv_clint0_command_request+0x146>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:255
        rc = 0;
    80002256:	fe042623          	sw	zero,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:256
        if (data) {
    8000225a:	fb843783          	ld	a5,-72(s0)
    8000225e:	cb95                	beqz	a5,80002292 <__metal_driver_riscv_clint0_command_request+0x14a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:257
            hartid = *(int *)data;
    80002260:	fb843783          	ld	a5,-72(s0)
    80002264:	439c                	lw	a5,0(a5)
    80002266:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:258
            rc = __METAL_ACCESS_ONCE(
    8000226a:	fd442783          	lw	a5,-44(s0)
    8000226e:	0027979b          	slliw	a5,a5,0x2
    80002272:	2781                	sext.w	a5,a5
    80002274:	873e                	mv	a4,a5
    80002276:	fd843783          	ld	a5,-40(s0)
    8000227a:	97ba                	add	a5,a5,a4
    8000227c:	439c                	lw	a5,0(a5)
    8000227e:	2781                	sext.w	a5,a5
    80002280:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
    80002284:	a039                	j	80002292 <__metal_driver_riscv_clint0_command_request+0x14a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
    80002286:	0001                	nop
    80002288:	a031                	j	80002294 <__metal_driver_riscv_clint0_command_request+0x14c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
    8000228a:	0001                	nop
    8000228c:	a021                	j	80002294 <__metal_driver_riscv_clint0_command_request+0x14c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
    8000228e:	0001                	nop
    80002290:	a011                	j	80002294 <__metal_driver_riscv_clint0_command_request+0x14c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
    80002292:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:266
    }

    return rc;
    80002294:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:267
}
    80002298:	853e                	mv	a0,a5
    8000229a:	60a6                	ld	ra,72(sp)
    8000229c:	6406                	ld	s0,64(sp)
    8000229e:	6161                	addi	sp,sp,80
    800022a0:	8082                	ret

00000000800022a2 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:270

int __metal_driver_riscv_clint0_clear_interrupt(
    struct metal_interrupt *controller, int id) {
    800022a2:	7179                	addi	sp,sp,-48
    800022a4:	f406                	sd	ra,40(sp)
    800022a6:	f022                	sd	s0,32(sp)
    800022a8:	1800                	addi	s0,sp,48
    800022aa:	fca43c23          	sd	a0,-40(s0)
    800022ae:	87ae                	mv	a5,a1
    800022b0:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:271
    int hartid = metal_cpu_get_current_hartid();
    800022b4:	eceff0ef          	jal	ra,80001982 <metal_cpu_get_current_hartid>
    800022b8:	87aa                	mv	a5,a0
    800022ba:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:272
    return __metal_driver_riscv_clint0_command_request(
    800022be:	fec40793          	addi	a5,s0,-20
    800022c2:	863e                	mv	a2,a5
    800022c4:	4589                	li	a1,2
    800022c6:	fd843503          	ld	a0,-40(s0)
    800022ca:	e7fff0ef          	jal	ra,80002148 <__metal_driver_riscv_clint0_command_request>
    800022ce:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:274
        controller, METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
    800022d0:	853e                	mv	a0,a5
    800022d2:	70a2                	ld	ra,40(sp)
    800022d4:	7402                	ld	s0,32(sp)
    800022d6:	6145                	addi	sp,sp,48
    800022d8:	8082                	ret

00000000800022da <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:277

int __metal_driver_riscv_clint0_set_interrupt(
    struct metal_interrupt *controller, int id) {
    800022da:	7179                	addi	sp,sp,-48
    800022dc:	f406                	sd	ra,40(sp)
    800022de:	f022                	sd	s0,32(sp)
    800022e0:	1800                	addi	s0,sp,48
    800022e2:	fca43c23          	sd	a0,-40(s0)
    800022e6:	87ae                	mv	a5,a1
    800022e8:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:278
    int hartid = metal_cpu_get_current_hartid();
    800022ec:	e96ff0ef          	jal	ra,80001982 <metal_cpu_get_current_hartid>
    800022f0:	87aa                	mv	a5,a0
    800022f2:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:279
    return __metal_driver_riscv_clint0_command_request(
    800022f6:	fec40793          	addi	a5,s0,-20
    800022fa:	863e                	mv	a2,a5
    800022fc:	458d                	li	a1,3
    800022fe:	fd843503          	ld	a0,-40(s0)
    80002302:	e47ff0ef          	jal	ra,80002148 <__metal_driver_riscv_clint0_command_request>
    80002306:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_clint0.c:281
        controller, METAL_SOFTWARE_IPI_SET, &hartid);
}
    80002308:	853e                	mv	a0,a5
    8000230a:	70a2                	ld	ra,40(sp)
    8000230c:	7402                	ld	s0,32(sp)
    8000230e:	6145                	addi	sp,sp,48
    80002310:	8082                	ret

0000000080002312 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:174



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
    80002312:	1101                	addi	sp,sp,-32
    80002314:	ec22                	sd	s0,24(sp)
    80002316:	1000                	addi	s0,sp,32
    80002318:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:175
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    8000231c:	fe843703          	ld	a4,-24(s0)
    80002320:	00004797          	auipc	a5,0x4
    80002324:	a2878793          	addi	a5,a5,-1496 # 80005d48 <__metal_dt_cpu_0>
    80002328:	00f71463          	bne	a4,a5,80002330 <__metal_driver_cpu_hartid+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:176
		return 0;
    8000232c:	4781                	li	a5,0
    8000232e:	a011                	j	80002332 <__metal_driver_cpu_hartid+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:179
	}
	else {
		return -1;
    80002330:	57fd                	li	a5,-1
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:181
	}
}
    80002332:	853e                	mv	a0,a5
    80002334:	6462                	ld	s0,24(sp)
    80002336:	6105                	addi	sp,sp,32
    80002338:	8082                	ret

000000008000233a <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:184

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
    8000233a:	1101                	addi	sp,sp,-32
    8000233c:	ec22                	sd	s0,24(sp)
    8000233e:	1000                	addi	s0,sp,32
    80002340:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:185
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    80002344:	fe843703          	ld	a4,-24(s0)
    80002348:	00004797          	auipc	a5,0x4
    8000234c:	a0078793          	addi	a5,a5,-1536 # 80005d48 <__metal_dt_cpu_0>
    80002350:	00f71763          	bne	a4,a5,8000235e <__metal_driver_cpu_timebase+0x24>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:186
		return 10000000;
    80002354:	009897b7          	lui	a5,0x989
    80002358:	68078793          	addi	a5,a5,1664 # 989680 <__heap_size+0x988e80>
    8000235c:	a011                	j	80002360 <__metal_driver_cpu_timebase+0x26>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:189
	}
	else {
		return 0;
    8000235e:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:191
	}
}
    80002360:	853e                	mv	a0,a5
    80002362:	6462                	ld	s0,24(sp)
    80002364:	6105                	addi	sp,sp,32
    80002366:	8082                	ret

0000000080002368 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:194

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
    80002368:	1101                	addi	sp,sp,-32
    8000236a:	ec22                	sd	s0,24(sp)
    8000236c:	1000                	addi	s0,sp,32
    8000236e:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:195
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    80002372:	fe843703          	ld	a4,-24(s0)
    80002376:	00004797          	auipc	a5,0x4
    8000237a:	9d278793          	addi	a5,a5,-1582 # 80005d48 <__metal_dt_cpu_0>
    8000237e:	00f71763          	bne	a4,a5,8000238c <__metal_driver_cpu_interrupt_controller+0x24>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:196
		return &__metal_dt_cpu_0_interrupt_controller.controller;
    80002382:	00004797          	auipc	a5,0x4
    80002386:	9d678793          	addi	a5,a5,-1578 # 80005d58 <__metal_dt_cpu_0_interrupt_controller>
    8000238a:	a011                	j	8000238e <__metal_driver_cpu_interrupt_controller+0x26>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:199
	}
	else {
		return NULL;
    8000238c:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:201
	}
}
    8000238e:	853e                	mv	a0,a5
    80002390:	6462                	ld	s0,24(sp)
    80002392:	6105                	addi	sp,sp,32
    80002394:	8082                	ret

0000000080002396 <__metal_driver_cpu_buserror>:
__metal_driver_cpu_buserror():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:214
		return 0;
	}
}

static __inline__ struct metal_buserror * __metal_driver_cpu_buserror(struct metal_cpu *cpu)
{
    80002396:	1101                	addi	sp,sp,-32
    80002398:	ec22                	sd	s0,24(sp)
    8000239a:	1000                	addi	s0,sp,32
    8000239c:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:215
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    800023a0:	fe843703          	ld	a4,-24(s0)
    800023a4:	00004797          	auipc	a5,0x4
    800023a8:	9a478793          	addi	a5,a5,-1628 # 80005d48 <__metal_dt_cpu_0>
    800023ac:	00f71463          	bne	a4,a5,800023b4 <__metal_driver_cpu_buserror+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:216
		return NULL;
    800023b0:	4781                	li	a5,0
    800023b2:	a011                	j	800023b6 <__metal_driver_cpu_buserror+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:219
	}
	else {
		return NULL;
    800023b4:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:221
	}
}
    800023b6:	853e                	mv	a0,a5
    800023b8:	6462                	ld	s0,24(sp)
    800023ba:	6105                	addi	sp,sp,32
    800023bc:	8082                	ret

00000000800023be <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:25
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid) {
    800023be:	1101                	addi	sp,sp,-32
    800023c0:	ec22                	sd	s0,24(sp)
    800023c2:	1000                	addi	s0,sp,32
    800023c4:	87aa                	mv	a5,a0
    800023c6:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:26
    if (hartid < __METAL_DT_MAX_HARTS) {
    800023ca:	fec42783          	lw	a5,-20(s0)
    800023ce:	2781                	sext.w	a5,a5
    800023d0:	00f04a63          	bgtz	a5,800023e4 <__metal_driver_cpu_get+0x26>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:27
        return &(__metal_cpu_table[hartid]->cpu);
    800023d4:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    800023d8:	fec42783          	lw	a5,-20(s0)
    800023dc:	078e                	slli	a5,a5,0x3
    800023de:	97ba                	add	a5,a5,a4
    800023e0:	639c                	ld	a5,0(a5)
    800023e2:	a011                	j	800023e6 <__metal_driver_cpu_get+0x28>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:29
    }
    return (struct metal_cpu *)NULL;
    800023e4:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:30
}
    800023e6:	853e                	mv	a0,a5
    800023e8:	6462                	ld	s0,24(sp)
    800023ea:	6105                	addi	sp,sp,32
    800023ec:	8082                	ret

00000000800023ee <__metal_myhart_id>:
__metal_myhart_id():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:32

uintptr_t __metal_myhart_id(void) {
    800023ee:	1101                	addi	sp,sp,-32
    800023f0:	ec22                	sd	s0,24(sp)
    800023f2:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:34
    uintptr_t myhart;
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
    800023f4:	f14027f3          	csrr	a5,mhartid
    800023f8:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:35
    return myhart;
    800023fc:	fe843783          	ld	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:36
}
    80002400:	853e                	mv	a0,a5
    80002402:	6462                	ld	s0,24(sp)
    80002404:	6105                	addi	sp,sp,32
    80002406:	8082                	ret

0000000080002408 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:45
    for (ptr = base; ptr < (base + size); ptr++) {
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable(void) {
    80002408:	1101                	addi	sp,sp,-32
    8000240a:	ec22                	sd	s0,24(sp)
    8000240c:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:47
    uintptr_t m;
    __asm__ volatile("csrrs %0, mstatus, %1"
    8000240e:	47a1                	li	a5,8
    80002410:	3007a7f3          	csrrs	a5,mstatus,a5
    80002414:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:50
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
    80002418:	0001                	nop
    8000241a:	6462                	ld	s0,24(sp)
    8000241c:	6105                	addi	sp,sp,32
    8000241e:	8082                	ret

0000000080002420 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:52

void __metal_interrupt_global_disable(void) {
    80002420:	1101                	addi	sp,sp,-32
    80002422:	ec22                	sd	s0,24(sp)
    80002424:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:54
    uintptr_t m;
    __asm__ volatile("csrrc %0, mstatus, %1"
    80002426:	47a1                	li	a5,8
    80002428:	3007b7f3          	csrrc	a5,mstatus,a5
    8000242c:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:57
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
    80002430:	0001                	nop
    80002432:	6462                	ld	s0,24(sp)
    80002434:	6105                	addi	sp,sp,32
    80002436:	8082                	ret

0000000080002438 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:59

void __metal_interrupt_software_enable(void) {
    80002438:	1101                	addi	sp,sp,-32
    8000243a:	ec22                	sd	s0,24(sp)
    8000243c:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:61
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
    8000243e:	47a1                	li	a5,8
    80002440:	3047a7f3          	csrrs	a5,mie,a5
    80002444:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:64
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
    80002448:	0001                	nop
    8000244a:	6462                	ld	s0,24(sp)
    8000244c:	6105                	addi	sp,sp,32
    8000244e:	8082                	ret

0000000080002450 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_software_disable(void) {
    80002450:	1101                	addi	sp,sp,-32
    80002452:	ec22                	sd	s0,24(sp)
    80002454:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
    80002456:	47a1                	li	a5,8
    80002458:	3047b7f3          	csrrc	a5,mie,a5
    8000245c:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:71
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
    80002460:	0001                	nop
    80002462:	6462                	ld	s0,24(sp)
    80002464:	6105                	addi	sp,sp,32
    80002466:	8082                	ret

0000000080002468 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:73

void __metal_interrupt_timer_enable(void) {
    80002468:	1101                	addi	sp,sp,-32
    8000246a:	ec22                	sd	s0,24(sp)
    8000246c:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:75
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
    8000246e:	08000793          	li	a5,128
    80002472:	3047a7f3          	csrrs	a5,mie,a5
    80002476:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:78
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
    8000247a:	0001                	nop
    8000247c:	6462                	ld	s0,24(sp)
    8000247e:	6105                	addi	sp,sp,32
    80002480:	8082                	ret

0000000080002482 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:80

void __metal_interrupt_timer_disable(void) {
    80002482:	1101                	addi	sp,sp,-32
    80002484:	ec22                	sd	s0,24(sp)
    80002486:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:82
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
    80002488:	08000793          	li	a5,128
    8000248c:	3047b7f3          	csrrc	a5,mie,a5
    80002490:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:85
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
    80002494:	0001                	nop
    80002496:	6462                	ld	s0,24(sp)
    80002498:	6105                	addi	sp,sp,32
    8000249a:	8082                	ret

000000008000249c <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:87

void __metal_interrupt_external_enable(void) {
    8000249c:	1101                	addi	sp,sp,-32
    8000249e:	ec22                	sd	s0,24(sp)
    800024a0:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:89
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
    800024a2:	6785                	lui	a5,0x1
    800024a4:	8007879b          	addiw	a5,a5,-2048
    800024a8:	3047a7f3          	csrrs	a5,mie,a5
    800024ac:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:92
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
    800024b0:	0001                	nop
    800024b2:	6462                	ld	s0,24(sp)
    800024b4:	6105                	addi	sp,sp,32
    800024b6:	8082                	ret

00000000800024b8 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:94

void __metal_interrupt_external_disable(void) {
    800024b8:	1101                	addi	sp,sp,-32
    800024ba:	ec22                	sd	s0,24(sp)
    800024bc:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:96
    unsigned long m;
    __asm__ volatile("csrrc %0, mie, %1"
    800024be:	6785                	lui	a5,0x1
    800024c0:	8007879b          	addiw	a5,a5,-2048
    800024c4:	3047b7f3          	csrrc	a5,mie,a5
    800024c8:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:99
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
    800024cc:	0001                	nop
    800024ce:	6462                	ld	s0,24(sp)
    800024d0:	6105                	addi	sp,sp,32
    800024d2:	8082                	ret

00000000800024d4 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:101

void __metal_interrupt_local_enable(int id) {
    800024d4:	7179                	addi	sp,sp,-48
    800024d6:	f422                	sd	s0,40(sp)
    800024d8:	1800                	addi	s0,sp,48
    800024da:	87aa                	mv	a5,a0
    800024dc:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:102
    uintptr_t b = 1 << id;
    800024e0:	fdc42783          	lw	a5,-36(s0)
    800024e4:	4705                	li	a4,1
    800024e6:	00f717bb          	sllw	a5,a4,a5
    800024ea:	2781                	sext.w	a5,a5
    800024ec:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:104
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
    800024f0:	fe843783          	ld	a5,-24(s0)
    800024f4:	3047a7f3          	csrrs	a5,mie,a5
    800024f8:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:105
}
    800024fc:	0001                	nop
    800024fe:	7422                	ld	s0,40(sp)
    80002500:	6145                	addi	sp,sp,48
    80002502:	8082                	ret

0000000080002504 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:107

void __metal_interrupt_local_disable(int id) {
    80002504:	7179                	addi	sp,sp,-48
    80002506:	f422                	sd	s0,40(sp)
    80002508:	1800                	addi	s0,sp,48
    8000250a:	87aa                	mv	a5,a0
    8000250c:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:108
    uintptr_t b = 1 << id;
    80002510:	fdc42783          	lw	a5,-36(s0)
    80002514:	4705                	li	a4,1
    80002516:	00f717bb          	sllw	a5,a4,a5
    8000251a:	2781                	sext.w	a5,a5
    8000251c:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:110
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
    80002520:	fe843783          	ld	a5,-24(s0)
    80002524:	3047b7f3          	csrrc	a5,mie,a5
    80002528:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:111
}
    8000252c:	0001                	nop
    8000252e:	7422                	ld	s0,40(sp)
    80002530:	6145                	addi	sp,sp,48
    80002532:	8082                	ret

0000000080002534 <__metal_default_exception_handler>:
__metal_default_exception_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:113

void __metal_default_exception_handler(struct metal_cpu *cpu, int ecode) {
    80002534:	1101                	addi	sp,sp,-32
    80002536:	ec06                	sd	ra,24(sp)
    80002538:	e822                	sd	s0,16(sp)
    8000253a:	1000                	addi	s0,sp,32
    8000253c:	fea43423          	sd	a0,-24(s0)
    80002540:	87ae                	mv	a5,a1
    80002542:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:114
    metal_shutdown(100);
    80002546:	06400513          	li	a0,100
    8000254a:	7d3020ef          	jal	ra,8000551c <metal_shutdown>

000000008000254e <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:117
}

void __metal_default_interrupt_handler(int id, void *priv) {
    8000254e:	1101                	addi	sp,sp,-32
    80002550:	ec06                	sd	ra,24(sp)
    80002552:	e822                	sd	s0,16(sp)
    80002554:	1000                	addi	s0,sp,32
    80002556:	87aa                	mv	a5,a0
    80002558:	feb43023          	sd	a1,-32(s0)
    8000255c:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:118
    metal_shutdown(200);
    80002560:	0c800513          	li	a0,200
    80002564:	7b9020ef          	jal	ra,8000551c <metal_shutdown>

0000000080002568 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:122
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler(void) {
    80002568:	7169                	addi	sp,sp,-304
    8000256a:	f606                	sd	ra,296(sp)
    8000256c:	f216                	sd	t0,288(sp)
    8000256e:	ee1a                	sd	t1,280(sp)
    80002570:	ea1e                	sd	t2,272(sp)
    80002572:	e622                	sd	s0,264(sp)
    80002574:	e22a                	sd	a0,256(sp)
    80002576:	fdae                	sd	a1,248(sp)
    80002578:	f9b2                	sd	a2,240(sp)
    8000257a:	f5b6                	sd	a3,232(sp)
    8000257c:	f1ba                	sd	a4,224(sp)
    8000257e:	edbe                	sd	a5,216(sp)
    80002580:	e9c2                	sd	a6,208(sp)
    80002582:	e5c6                	sd	a7,200(sp)
    80002584:	e1f2                	sd	t3,192(sp)
    80002586:	fd76                	sd	t4,184(sp)
    80002588:	f97a                	sd	t5,176(sp)
    8000258a:	f57e                	sd	t6,168(sp)
    8000258c:	ad02                	fsd	ft0,152(sp)
    8000258e:	a906                	fsd	ft1,144(sp)
    80002590:	a50a                	fsd	ft2,136(sp)
    80002592:	a10e                	fsd	ft3,128(sp)
    80002594:	bc92                	fsd	ft4,120(sp)
    80002596:	b896                	fsd	ft5,112(sp)
    80002598:	b49a                	fsd	ft6,104(sp)
    8000259a:	b09e                	fsd	ft7,96(sp)
    8000259c:	acaa                	fsd	fa0,88(sp)
    8000259e:	a8ae                	fsd	fa1,80(sp)
    800025a0:	a4b2                	fsd	fa2,72(sp)
    800025a2:	a0b6                	fsd	fa3,64(sp)
    800025a4:	bc3a                	fsd	fa4,56(sp)
    800025a6:	b83e                	fsd	fa5,48(sp)
    800025a8:	b442                	fsd	fa6,40(sp)
    800025aa:	b046                	fsd	fa7,32(sp)
    800025ac:	ac72                	fsd	ft8,24(sp)
    800025ae:	a876                	fsd	ft9,16(sp)
    800025b0:	a47a                	fsd	ft10,8(sp)
    800025b2:	a07e                	fsd	ft11,0(sp)
    800025b4:	1a00                	addi	s0,sp,304
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:123
    metal_shutdown(300);
    800025b6:	12c00513          	li	a0,300
    800025ba:	763020ef          	jal	ra,8000551c <metal_shutdown>

00000000800025be <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:128
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_software_interrupt_vector_handler(void) {
    800025be:	714d                	addi	sp,sp,-336
    800025c0:	e686                	sd	ra,328(sp)
    800025c2:	e296                	sd	t0,320(sp)
    800025c4:	fe1a                	sd	t1,312(sp)
    800025c6:	fa1e                	sd	t2,304(sp)
    800025c8:	f622                	sd	s0,296(sp)
    800025ca:	f22a                	sd	a0,288(sp)
    800025cc:	ee2e                	sd	a1,280(sp)
    800025ce:	ea32                	sd	a2,272(sp)
    800025d0:	e636                	sd	a3,264(sp)
    800025d2:	e23a                	sd	a4,256(sp)
    800025d4:	fdbe                	sd	a5,248(sp)
    800025d6:	f9c2                	sd	a6,240(sp)
    800025d8:	f5c6                	sd	a7,232(sp)
    800025da:	f1f2                	sd	t3,224(sp)
    800025dc:	edf6                	sd	t4,216(sp)
    800025de:	e9fa                	sd	t5,208(sp)
    800025e0:	e5fe                	sd	t6,200(sp)
    800025e2:	bd02                	fsd	ft0,184(sp)
    800025e4:	b906                	fsd	ft1,176(sp)
    800025e6:	b50a                	fsd	ft2,168(sp)
    800025e8:	b10e                	fsd	ft3,160(sp)
    800025ea:	ad12                	fsd	ft4,152(sp)
    800025ec:	a916                	fsd	ft5,144(sp)
    800025ee:	a51a                	fsd	ft6,136(sp)
    800025f0:	a11e                	fsd	ft7,128(sp)
    800025f2:	bcaa                	fsd	fa0,120(sp)
    800025f4:	b8ae                	fsd	fa1,112(sp)
    800025f6:	b4b2                	fsd	fa2,104(sp)
    800025f8:	b0b6                	fsd	fa3,96(sp)
    800025fa:	acba                	fsd	fa4,88(sp)
    800025fc:	a8be                	fsd	fa5,80(sp)
    800025fe:	a4c2                	fsd	fa6,72(sp)
    80002600:	a0c6                	fsd	fa7,64(sp)
    80002602:	bc72                	fsd	ft8,56(sp)
    80002604:	b876                	fsd	ft9,48(sp)
    80002606:	b47a                	fsd	ft10,40(sp)
    80002608:	b07e                	fsd	ft11,32(sp)
    8000260a:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:129
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_SW);
    8000260c:	de3ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    80002610:	87aa                	mv	a5,a0
    80002612:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80002616:	078e                	slli	a5,a5,0x3
    80002618:	97ba                	add	a5,a5,a4
    8000261a:	639c                	ld	a5,0(a5)
    8000261c:	ecf43423          	sd	a5,-312(s0)
    80002620:	ec843783          	ld	a5,-312(s0)
    80002624:	c78d                	beqz	a5,8000264e <metal_software_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:129 (discriminator 1)
    80002626:	ec843503          	ld	a0,-312(s0)
    8000262a:	d3fff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    8000262e:	eca43023          	sd	a0,-320(s0)
    80002632:	ec043783          	ld	a5,-320(s0)
    80002636:	1887b783          	ld	a5,392(a5) # 1188 <__heap_size+0x988>
    8000263a:	eaf43c23          	sd	a5,-328(s0)
    8000263e:	ec043783          	ld	a5,-320(s0)
    80002642:	1787b783          	ld	a5,376(a5)
    80002646:	eb843583          	ld	a1,-328(s0)
    8000264a:	450d                	li	a0,3
    8000264c:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:130
}
    8000264e:	0001                	nop
    80002650:	60b6                	ld	ra,328(sp)
    80002652:	6296                	ld	t0,320(sp)
    80002654:	7372                	ld	t1,312(sp)
    80002656:	73d2                	ld	t2,304(sp)
    80002658:	7432                	ld	s0,296(sp)
    8000265a:	7512                	ld	a0,288(sp)
    8000265c:	65f2                	ld	a1,280(sp)
    8000265e:	6652                	ld	a2,272(sp)
    80002660:	66b2                	ld	a3,264(sp)
    80002662:	6712                	ld	a4,256(sp)
    80002664:	77ee                	ld	a5,248(sp)
    80002666:	784e                	ld	a6,240(sp)
    80002668:	78ae                	ld	a7,232(sp)
    8000266a:	7e0e                	ld	t3,224(sp)
    8000266c:	6eee                	ld	t4,216(sp)
    8000266e:	6f4e                	ld	t5,208(sp)
    80002670:	6fae                	ld	t6,200(sp)
    80002672:	306a                	fld	ft0,184(sp)
    80002674:	30ca                	fld	ft1,176(sp)
    80002676:	312a                	fld	ft2,168(sp)
    80002678:	318a                	fld	ft3,160(sp)
    8000267a:	226a                	fld	ft4,152(sp)
    8000267c:	22ca                	fld	ft5,144(sp)
    8000267e:	232a                	fld	ft6,136(sp)
    80002680:	238a                	fld	ft7,128(sp)
    80002682:	3566                	fld	fa0,120(sp)
    80002684:	35c6                	fld	fa1,112(sp)
    80002686:	3626                	fld	fa2,104(sp)
    80002688:	3686                	fld	fa3,96(sp)
    8000268a:	2766                	fld	fa4,88(sp)
    8000268c:	27c6                	fld	fa5,80(sp)
    8000268e:	2826                	fld	fa6,72(sp)
    80002690:	2886                	fld	fa7,64(sp)
    80002692:	3e62                	fld	ft8,56(sp)
    80002694:	3ec2                	fld	ft9,48(sp)
    80002696:	3f22                	fld	ft10,40(sp)
    80002698:	3f82                	fld	ft11,32(sp)
    8000269a:	6171                	addi	sp,sp,336
    8000269c:	30200073          	mret

00000000800026a0 <__metal_default_sw_handler>:
__metal_default_sw_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:132

void __metal_default_sw_handler(int id, void *priv) {
    800026a0:	7139                	addi	sp,sp,-64
    800026a2:	fc06                	sd	ra,56(sp)
    800026a4:	f822                	sd	s0,48(sp)
    800026a6:	0080                	addi	s0,sp,64
    800026a8:	87aa                	mv	a5,a0
    800026aa:	fcb43023          	sd	a1,-64(s0)
    800026ae:	fcf42623          	sw	a5,-52(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:135
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    800026b2:	d3dff0ef          	jal	ra,800023ee <__metal_myhart_id>
    800026b6:	87aa                	mv	a5,a0
    800026b8:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    800026bc:	078e                	slli	a5,a5,0x3
    800026be:	97ba                	add	a5,a5,a4
    800026c0:	639c                	ld	a5,0(a5)
    800026c2:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:137

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
    800026c6:	342027f3          	csrr	a5,mcause
    800026ca:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:138
    if (cpu) {
    800026ce:	fe843783          	ld	a5,-24(s0)
    800026d2:	cb85                	beqz	a5,80002702 <__metal_default_sw_handler+0x62>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:140
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    800026d4:	fe843503          	ld	a0,-24(s0)
    800026d8:	c91ff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    800026dc:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:141
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE](
    800026e0:	fe043783          	ld	a5,-32(s0)
    800026e4:	3ff7f793          	andi	a5,a5,1023
    800026e8:	fd843703          	ld	a4,-40(s0)
    800026ec:	0a678793          	addi	a5,a5,166
    800026f0:	078e                	slli	a5,a5,0x3
    800026f2:	97ba                	add	a5,a5,a4
    800026f4:	6398                	ld	a4,0(a5)
    800026f6:	fcc42783          	lw	a5,-52(s0)
    800026fa:	85be                	mv	a1,a5
    800026fc:	fe843503          	ld	a0,-24(s0)
    80002700:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:144
            (struct metal_cpu *)cpu, id);
    }
}
    80002702:	0001                	nop
    80002704:	70e2                	ld	ra,56(sp)
    80002706:	7442                	ld	s0,48(sp)
    80002708:	6121                	addi	sp,sp,64
    8000270a:	8082                	ret

000000008000270c <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:148

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_timer_interrupt_vector_handler(void) {
    8000270c:	714d                	addi	sp,sp,-336
    8000270e:	e686                	sd	ra,328(sp)
    80002710:	e296                	sd	t0,320(sp)
    80002712:	fe1a                	sd	t1,312(sp)
    80002714:	fa1e                	sd	t2,304(sp)
    80002716:	f622                	sd	s0,296(sp)
    80002718:	f22a                	sd	a0,288(sp)
    8000271a:	ee2e                	sd	a1,280(sp)
    8000271c:	ea32                	sd	a2,272(sp)
    8000271e:	e636                	sd	a3,264(sp)
    80002720:	e23a                	sd	a4,256(sp)
    80002722:	fdbe                	sd	a5,248(sp)
    80002724:	f9c2                	sd	a6,240(sp)
    80002726:	f5c6                	sd	a7,232(sp)
    80002728:	f1f2                	sd	t3,224(sp)
    8000272a:	edf6                	sd	t4,216(sp)
    8000272c:	e9fa                	sd	t5,208(sp)
    8000272e:	e5fe                	sd	t6,200(sp)
    80002730:	bd02                	fsd	ft0,184(sp)
    80002732:	b906                	fsd	ft1,176(sp)
    80002734:	b50a                	fsd	ft2,168(sp)
    80002736:	b10e                	fsd	ft3,160(sp)
    80002738:	ad12                	fsd	ft4,152(sp)
    8000273a:	a916                	fsd	ft5,144(sp)
    8000273c:	a51a                	fsd	ft6,136(sp)
    8000273e:	a11e                	fsd	ft7,128(sp)
    80002740:	bcaa                	fsd	fa0,120(sp)
    80002742:	b8ae                	fsd	fa1,112(sp)
    80002744:	b4b2                	fsd	fa2,104(sp)
    80002746:	b0b6                	fsd	fa3,96(sp)
    80002748:	acba                	fsd	fa4,88(sp)
    8000274a:	a8be                	fsd	fa5,80(sp)
    8000274c:	a4c2                	fsd	fa6,72(sp)
    8000274e:	a0c6                	fsd	fa7,64(sp)
    80002750:	bc72                	fsd	ft8,56(sp)
    80002752:	b876                	fsd	ft9,48(sp)
    80002754:	b47a                	fsd	ft10,40(sp)
    80002756:	b07e                	fsd	ft11,32(sp)
    80002758:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:149
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_TMR);
    8000275a:	c95ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    8000275e:	87aa                	mv	a5,a0
    80002760:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80002764:	078e                	slli	a5,a5,0x3
    80002766:	97ba                	add	a5,a5,a4
    80002768:	639c                	ld	a5,0(a5)
    8000276a:	ecf43423          	sd	a5,-312(s0)
    8000276e:	ec843783          	ld	a5,-312(s0)
    80002772:	c78d                	beqz	a5,8000279c <metal_timer_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:149 (discriminator 1)
    80002774:	ec843503          	ld	a0,-312(s0)
    80002778:	bf1ff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    8000277c:	eca43023          	sd	a0,-320(s0)
    80002780:	ec043783          	ld	a5,-320(s0)
    80002784:	2087b783          	ld	a5,520(a5)
    80002788:	eaf43c23          	sd	a5,-328(s0)
    8000278c:	ec043783          	ld	a5,-320(s0)
    80002790:	1f87b783          	ld	a5,504(a5)
    80002794:	eb843583          	ld	a1,-328(s0)
    80002798:	451d                	li	a0,7
    8000279a:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:150
}
    8000279c:	0001                	nop
    8000279e:	60b6                	ld	ra,328(sp)
    800027a0:	6296                	ld	t0,320(sp)
    800027a2:	7372                	ld	t1,312(sp)
    800027a4:	73d2                	ld	t2,304(sp)
    800027a6:	7432                	ld	s0,296(sp)
    800027a8:	7512                	ld	a0,288(sp)
    800027aa:	65f2                	ld	a1,280(sp)
    800027ac:	6652                	ld	a2,272(sp)
    800027ae:	66b2                	ld	a3,264(sp)
    800027b0:	6712                	ld	a4,256(sp)
    800027b2:	77ee                	ld	a5,248(sp)
    800027b4:	784e                	ld	a6,240(sp)
    800027b6:	78ae                	ld	a7,232(sp)
    800027b8:	7e0e                	ld	t3,224(sp)
    800027ba:	6eee                	ld	t4,216(sp)
    800027bc:	6f4e                	ld	t5,208(sp)
    800027be:	6fae                	ld	t6,200(sp)
    800027c0:	306a                	fld	ft0,184(sp)
    800027c2:	30ca                	fld	ft1,176(sp)
    800027c4:	312a                	fld	ft2,168(sp)
    800027c6:	318a                	fld	ft3,160(sp)
    800027c8:	226a                	fld	ft4,152(sp)
    800027ca:	22ca                	fld	ft5,144(sp)
    800027cc:	232a                	fld	ft6,136(sp)
    800027ce:	238a                	fld	ft7,128(sp)
    800027d0:	3566                	fld	fa0,120(sp)
    800027d2:	35c6                	fld	fa1,112(sp)
    800027d4:	3626                	fld	fa2,104(sp)
    800027d6:	3686                	fld	fa3,96(sp)
    800027d8:	2766                	fld	fa4,88(sp)
    800027da:	27c6                	fld	fa5,80(sp)
    800027dc:	2826                	fld	fa6,72(sp)
    800027de:	2886                	fld	fa7,64(sp)
    800027e0:	3e62                	fld	ft8,56(sp)
    800027e2:	3ec2                	fld	ft9,48(sp)
    800027e4:	3f22                	fld	ft10,40(sp)
    800027e6:	3f82                	fld	ft11,32(sp)
    800027e8:	6171                	addi	sp,sp,336
    800027ea:	30200073          	mret

00000000800027ee <__metal_default_beu_handler>:
__metal_default_beu_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:152

void __metal_default_beu_handler(int id, void *priv) {}
    800027ee:	1101                	addi	sp,sp,-32
    800027f0:	ec22                	sd	s0,24(sp)
    800027f2:	1000                	addi	s0,sp,32
    800027f4:	87aa                	mv	a5,a0
    800027f6:	feb43023          	sd	a1,-32(s0)
    800027fa:	fef42623          	sw	a5,-20(s0)
    800027fe:	0001                	nop
    80002800:	6462                	ld	s0,24(sp)
    80002802:	6105                	addi	sp,sp,32
    80002804:	8082                	ret

0000000080002806 <__metal_default_timer_handler>:
__metal_default_timer_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:154

void __metal_default_timer_handler(int id, void *priv) {
    80002806:	7179                	addi	sp,sp,-48
    80002808:	f406                	sd	ra,40(sp)
    8000280a:	f022                	sd	s0,32(sp)
    8000280c:	1800                	addi	s0,sp,48
    8000280e:	87aa                	mv	a5,a0
    80002810:	fcb43823          	sd	a1,-48(s0)
    80002814:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:155
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
    80002818:	bd7ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    8000281c:	87aa                	mv	a5,a0
    8000281e:	2781                	sext.w	a5,a5
    80002820:	853e                	mv	a0,a5
    80002822:	b9dff0ef          	jal	ra,800023be <__metal_driver_cpu_get>
    80002826:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:156
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
    8000282a:	fe843503          	ld	a0,-24(s0)
    8000282e:	716010ef          	jal	ra,80003f44 <__metal_driver_cpu_mtime_get>
    80002832:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:159

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
    80002836:	fe043783          	ld	a5,-32(s0)
    8000283a:	07a9                	addi	a5,a5,10
    8000283c:	85be                	mv	a1,a5
    8000283e:	fe843503          	ld	a0,-24(s0)
    80002842:	75a010ef          	jal	ra,80003f9c <__metal_driver_cpu_mtimecmp_set>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:160
}
    80002846:	0001                	nop
    80002848:	70a2                	ld	ra,40(sp)
    8000284a:	7402                	ld	s0,32(sp)
    8000284c:	6145                	addi	sp,sp,48
    8000284e:	8082                	ret
	...

0000000080002880 <__metal_exception_handler>:
__metal_exception_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:169
metal_external_interrupt_vector_handler(void) {
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_EXT);
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler(void) {
    80002880:	7109                	addi	sp,sp,-384
    80002882:	fe86                	sd	ra,376(sp)
    80002884:	fa96                	sd	t0,368(sp)
    80002886:	f69a                	sd	t1,360(sp)
    80002888:	f29e                	sd	t2,352(sp)
    8000288a:	eea2                	sd	s0,344(sp)
    8000288c:	eaaa                	sd	a0,336(sp)
    8000288e:	e6ae                	sd	a1,328(sp)
    80002890:	e2b2                	sd	a2,320(sp)
    80002892:	fe36                	sd	a3,312(sp)
    80002894:	fa3a                	sd	a4,304(sp)
    80002896:	f63e                	sd	a5,296(sp)
    80002898:	f242                	sd	a6,288(sp)
    8000289a:	ee46                	sd	a7,280(sp)
    8000289c:	ea72                	sd	t3,272(sp)
    8000289e:	e676                	sd	t4,264(sp)
    800028a0:	e27a                	sd	t5,256(sp)
    800028a2:	fdfe                	sd	t6,248(sp)
    800028a4:	b582                	fsd	ft0,232(sp)
    800028a6:	b186                	fsd	ft1,224(sp)
    800028a8:	ad8a                	fsd	ft2,216(sp)
    800028aa:	a98e                	fsd	ft3,208(sp)
    800028ac:	a592                	fsd	ft4,200(sp)
    800028ae:	a196                	fsd	ft5,192(sp)
    800028b0:	bd1a                	fsd	ft6,184(sp)
    800028b2:	b91e                	fsd	ft7,176(sp)
    800028b4:	b52a                	fsd	fa0,168(sp)
    800028b6:	b12e                	fsd	fa1,160(sp)
    800028b8:	ad32                	fsd	fa2,152(sp)
    800028ba:	a936                	fsd	fa3,144(sp)
    800028bc:	a53a                	fsd	fa4,136(sp)
    800028be:	a13e                	fsd	fa5,128(sp)
    800028c0:	bcc2                	fsd	fa6,120(sp)
    800028c2:	b8c6                	fsd	fa7,112(sp)
    800028c4:	b4f2                	fsd	ft8,104(sp)
    800028c6:	b0f6                	fsd	ft9,96(sp)
    800028c8:	acfa                	fsd	ft10,88(sp)
    800028ca:	a8fe                	fsd	ft11,80(sp)
    800028cc:	0300                	addi	s0,sp,384
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:174
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    800028ce:	b21ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    800028d2:	87aa                	mv	a5,a0
    800028d4:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    800028d8:	078e                	slli	a5,a5,0x3
    800028da:	97ba                	add	a5,a5,a4
    800028dc:	639c                	ld	a5,0(a5)
    800028de:	ecf43423          	sd	a5,-312(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:176

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
    800028e2:	342027f3          	csrr	a5,mcause
    800028e6:	ecf43023          	sd	a5,-320(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:177
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
    800028ea:	341027f3          	csrr	a5,mepc
    800028ee:	eaf43c23          	sd	a5,-328(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:178
    __asm__ volatile("csrr %0, mtval" : "=r"(mtval));
    800028f2:	343027f3          	csrr	a5,mtval
    800028f6:	eaf43823          	sd	a5,-336(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:179
    __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
    800028fa:	305027f3          	csrr	a5,mtvec
    800028fe:	eaf43423          	sd	a5,-344(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:181

    if (cpu) {
    80002902:	ec843783          	ld	a5,-312(s0)
    80002906:	0e078f63          	beqz	a5,80002a04 <__metal_exception_handler+0x184>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:183
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    8000290a:	ec843503          	ld	a0,-312(s0)
    8000290e:	a5bff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80002912:	eaa43023          	sd	a0,-352(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:184
        id = mcause & METAL_MCAUSE_CAUSE;
    80002916:	ec043783          	ld	a5,-320(s0)
    8000291a:	2781                	sext.w	a5,a5
    8000291c:	3ff7f793          	andi	a5,a5,1023
    80002920:	e8f42e23          	sw	a5,-356(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:185
        if (mcause & METAL_MCAUSE_INTR) {
    80002924:	ec043783          	ld	a5,-320(s0)
    80002928:	0a07df63          	bgez	a5,800029e6 <__metal_exception_handler+0x166>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:186
            if (id == METAL_INTERRUPT_ID_BEU) {
    8000292c:	e9c42783          	lw	a5,-356(s0)
    80002930:	0007871b          	sext.w	a4,a5
    80002934:	08000793          	li	a5,128
    80002938:	02f71363          	bne	a4,a5,8000295e <__metal_exception_handler+0xde>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:187
                priv = intc->metal_int_beu.exint_data;
    8000293c:	ea043783          	ld	a5,-352(s0)
    80002940:	5287b783          	ld	a5,1320(a5)
    80002944:	e8f43823          	sd	a5,-368(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:188
                intc->metal_int_beu.handler(id, priv);
    80002948:	ea043783          	ld	a5,-352(s0)
    8000294c:	5187b703          	ld	a4,1304(a5)
    80002950:	e9c42783          	lw	a5,-356(s0)
    80002954:	e9043583          	ld	a1,-368(s0)
    80002958:	853e                	mv	a0,a5
    8000295a:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:189
                return;
    8000295c:	a065                	j	80002a04 <__metal_exception_handler+0x184>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:191
            }
            if ((id < METAL_INTERRUPT_ID_CSW) ||
    8000295e:	e9c42783          	lw	a5,-356(s0)
    80002962:	0007871b          	sext.w	a4,a5
    80002966:	47ad                	li	a5,11
    80002968:	00e7d763          	bge	a5,a4,80002976 <__metal_exception_handler+0xf6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:192 (discriminator 1)
                ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
    8000296c:	ea843783          	ld	a5,-344(s0)
    80002970:	03f7f793          	andi	a5,a5,63
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:191 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
    80002974:	eb95                	bnez	a5,800029a8 <__metal_exception_handler+0x128>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:193
                priv = intc->metal_int_table[id].exint_data;
    80002976:	ea043703          	ld	a4,-352(s0)
    8000297a:	e9c42783          	lw	a5,-356(s0)
    8000297e:	07a5                	addi	a5,a5,9
    80002980:	0796                	slli	a5,a5,0x5
    80002982:	97ba                	add	a5,a5,a4
    80002984:	679c                	ld	a5,8(a5)
    80002986:	e8f43823          	sd	a5,-368(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:194
                intc->metal_int_table[id].handler(id, priv);
    8000298a:	ea043703          	ld	a4,-352(s0)
    8000298e:	e9c42783          	lw	a5,-356(s0)
    80002992:	0796                	slli	a5,a5,0x5
    80002994:	97ba                	add	a5,a5,a4
    80002996:	1187b703          	ld	a4,280(a5)
    8000299a:	e9c42783          	lw	a5,-356(s0)
    8000299e:	e9043583          	ld	a1,-368(s0)
    800029a2:	853e                	mv	a0,a5
    800029a4:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:195
                return;
    800029a6:	a8b9                	j	80002a04 <__metal_exception_handler+0x184>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:197
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
    800029a8:	ea843783          	ld	a5,-344(s0)
    800029ac:	03f7f713          	andi	a4,a5,63
    800029b0:	4789                	li	a5,2
    800029b2:	04f71963          	bne	a4,a5,80002a04 <__metal_exception_handler+0x184>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:201
                uintptr_t mtvt;
                metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile("csrr %0, 0x307" : "=r"(mtvt));
    800029b6:	307027f3          	csrr	a5,mtvt
    800029ba:	e8f43423          	sd	a5,-376(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:202
                priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    800029be:	ea043783          	ld	a5,-352(s0)
    800029c2:	1807b783          	ld	a5,384(a5)
    800029c6:	e8f43823          	sd	a5,-368(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:203
                mtvt_handler = (metal_interrupt_handler_t) * (uintptr_t *)mtvt;
    800029ca:	e8843783          	ld	a5,-376(s0)
    800029ce:	639c                	ld	a5,0(a5)
    800029d0:	e8f43023          	sd	a5,-384(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:204
                mtvt_handler(id, priv);
    800029d4:	e9c42783          	lw	a5,-356(s0)
    800029d8:	e8043703          	ld	a4,-384(s0)
    800029dc:	e9043583          	ld	a1,-368(s0)
    800029e0:	853e                	mv	a0,a5
    800029e2:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:205
                return;
    800029e4:	a005                	j	80002a04 <__metal_exception_handler+0x184>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:208
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
    800029e6:	ea043703          	ld	a4,-352(s0)
    800029ea:	e9c42783          	lw	a5,-356(s0)
    800029ee:	0a678793          	addi	a5,a5,166
    800029f2:	078e                	slli	a5,a5,0x3
    800029f4:	97ba                	add	a5,a5,a4
    800029f6:	6398                	ld	a4,0(a5)
    800029f8:	e9c42783          	lw	a5,-356(s0)
    800029fc:	85be                	mv	a1,a5
    800029fe:	ec843503          	ld	a0,-312(s0)
    80002a02:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:211
        }
    }
}
    80002a04:	70f6                	ld	ra,376(sp)
    80002a06:	72d6                	ld	t0,368(sp)
    80002a08:	7336                	ld	t1,360(sp)
    80002a0a:	7396                	ld	t2,352(sp)
    80002a0c:	6476                	ld	s0,344(sp)
    80002a0e:	6556                	ld	a0,336(sp)
    80002a10:	65b6                	ld	a1,328(sp)
    80002a12:	6616                	ld	a2,320(sp)
    80002a14:	76f2                	ld	a3,312(sp)
    80002a16:	7752                	ld	a4,304(sp)
    80002a18:	77b2                	ld	a5,296(sp)
    80002a1a:	7812                	ld	a6,288(sp)
    80002a1c:	68f2                	ld	a7,280(sp)
    80002a1e:	6e52                	ld	t3,272(sp)
    80002a20:	6eb2                	ld	t4,264(sp)
    80002a22:	6f12                	ld	t5,256(sp)
    80002a24:	7fee                	ld	t6,248(sp)
    80002a26:	302e                	fld	ft0,232(sp)
    80002a28:	308e                	fld	ft1,224(sp)
    80002a2a:	216e                	fld	ft2,216(sp)
    80002a2c:	21ce                	fld	ft3,208(sp)
    80002a2e:	222e                	fld	ft4,200(sp)
    80002a30:	228e                	fld	ft5,192(sp)
    80002a32:	336a                	fld	ft6,184(sp)
    80002a34:	33ca                	fld	ft7,176(sp)
    80002a36:	352a                	fld	fa0,168(sp)
    80002a38:	358a                	fld	fa1,160(sp)
    80002a3a:	266a                	fld	fa2,152(sp)
    80002a3c:	26ca                	fld	fa3,144(sp)
    80002a3e:	272a                	fld	fa4,136(sp)
    80002a40:	278a                	fld	fa5,128(sp)
    80002a42:	3866                	fld	fa6,120(sp)
    80002a44:	38c6                	fld	fa7,112(sp)
    80002a46:	3e26                	fld	ft8,104(sp)
    80002a48:	3e86                	fld	ft9,96(sp)
    80002a4a:	2f66                	fld	ft10,88(sp)
    80002a4c:	2fc6                	fld	ft11,80(sp)
    80002a4e:	6119                	addi	sp,sp,384
    80002a50:	30200073          	mret
	...

0000000080002a76 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:214

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler(void) {
    80002a76:	714d                	addi	sp,sp,-336
    80002a78:	e686                	sd	ra,328(sp)
    80002a7a:	e296                	sd	t0,320(sp)
    80002a7c:	fe1a                	sd	t1,312(sp)
    80002a7e:	fa1e                	sd	t2,304(sp)
    80002a80:	f622                	sd	s0,296(sp)
    80002a82:	f22a                	sd	a0,288(sp)
    80002a84:	ee2e                	sd	a1,280(sp)
    80002a86:	ea32                	sd	a2,272(sp)
    80002a88:	e636                	sd	a3,264(sp)
    80002a8a:	e23a                	sd	a4,256(sp)
    80002a8c:	fdbe                	sd	a5,248(sp)
    80002a8e:	f9c2                	sd	a6,240(sp)
    80002a90:	f5c6                	sd	a7,232(sp)
    80002a92:	f1f2                	sd	t3,224(sp)
    80002a94:	edf6                	sd	t4,216(sp)
    80002a96:	e9fa                	sd	t5,208(sp)
    80002a98:	e5fe                	sd	t6,200(sp)
    80002a9a:	bd02                	fsd	ft0,184(sp)
    80002a9c:	b906                	fsd	ft1,176(sp)
    80002a9e:	b50a                	fsd	ft2,168(sp)
    80002aa0:	b10e                	fsd	ft3,160(sp)
    80002aa2:	ad12                	fsd	ft4,152(sp)
    80002aa4:	a916                	fsd	ft5,144(sp)
    80002aa6:	a51a                	fsd	ft6,136(sp)
    80002aa8:	a11e                	fsd	ft7,128(sp)
    80002aaa:	bcaa                	fsd	fa0,120(sp)
    80002aac:	b8ae                	fsd	fa1,112(sp)
    80002aae:	b4b2                	fsd	fa2,104(sp)
    80002ab0:	b0b6                	fsd	fa3,96(sp)
    80002ab2:	acba                	fsd	fa4,88(sp)
    80002ab4:	a8be                	fsd	fa5,80(sp)
    80002ab6:	a4c2                	fsd	fa6,72(sp)
    80002ab8:	a0c6                	fsd	fa7,64(sp)
    80002aba:	bc72                	fsd	ft8,56(sp)
    80002abc:	b876                	fsd	ft9,48(sp)
    80002abe:	b47a                	fsd	ft10,40(sp)
    80002ac0:	b07e                	fsd	ft11,32(sp)
    80002ac2:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:215
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC0);
    80002ac4:	92bff0ef          	jal	ra,800023ee <__metal_myhart_id>
    80002ac8:	87aa                	mv	a5,a0
    80002aca:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80002ace:	078e                	slli	a5,a5,0x3
    80002ad0:	97ba                	add	a5,a5,a4
    80002ad2:	639c                	ld	a5,0(a5)
    80002ad4:	ecf43423          	sd	a5,-312(s0)
    80002ad8:	ec843783          	ld	a5,-312(s0)
    80002adc:	c78d                	beqz	a5,80002b06 <metal_lc0_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:215 (discriminator 1)
    80002ade:	ec843503          	ld	a0,-312(s0)
    80002ae2:	887ff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80002ae6:	eca43023          	sd	a0,-320(s0)
    80002aea:	ec043783          	ld	a5,-320(s0)
    80002aee:	3287b783          	ld	a5,808(a5)
    80002af2:	eaf43c23          	sd	a5,-328(s0)
    80002af6:	ec043783          	ld	a5,-320(s0)
    80002afa:	3187b783          	ld	a5,792(a5)
    80002afe:	eb843583          	ld	a1,-328(s0)
    80002b02:	4541                	li	a0,16
    80002b04:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:216
}
    80002b06:	0001                	nop
    80002b08:	60b6                	ld	ra,328(sp)
    80002b0a:	6296                	ld	t0,320(sp)
    80002b0c:	7372                	ld	t1,312(sp)
    80002b0e:	73d2                	ld	t2,304(sp)
    80002b10:	7432                	ld	s0,296(sp)
    80002b12:	7512                	ld	a0,288(sp)
    80002b14:	65f2                	ld	a1,280(sp)
    80002b16:	6652                	ld	a2,272(sp)
    80002b18:	66b2                	ld	a3,264(sp)
    80002b1a:	6712                	ld	a4,256(sp)
    80002b1c:	77ee                	ld	a5,248(sp)
    80002b1e:	784e                	ld	a6,240(sp)
    80002b20:	78ae                	ld	a7,232(sp)
    80002b22:	7e0e                	ld	t3,224(sp)
    80002b24:	6eee                	ld	t4,216(sp)
    80002b26:	6f4e                	ld	t5,208(sp)
    80002b28:	6fae                	ld	t6,200(sp)
    80002b2a:	306a                	fld	ft0,184(sp)
    80002b2c:	30ca                	fld	ft1,176(sp)
    80002b2e:	312a                	fld	ft2,168(sp)
    80002b30:	318a                	fld	ft3,160(sp)
    80002b32:	226a                	fld	ft4,152(sp)
    80002b34:	22ca                	fld	ft5,144(sp)
    80002b36:	232a                	fld	ft6,136(sp)
    80002b38:	238a                	fld	ft7,128(sp)
    80002b3a:	3566                	fld	fa0,120(sp)
    80002b3c:	35c6                	fld	fa1,112(sp)
    80002b3e:	3626                	fld	fa2,104(sp)
    80002b40:	3686                	fld	fa3,96(sp)
    80002b42:	2766                	fld	fa4,88(sp)
    80002b44:	27c6                	fld	fa5,80(sp)
    80002b46:	2826                	fld	fa6,72(sp)
    80002b48:	2886                	fld	fa7,64(sp)
    80002b4a:	3e62                	fld	ft8,56(sp)
    80002b4c:	3ec2                	fld	ft9,48(sp)
    80002b4e:	3f22                	fld	ft10,40(sp)
    80002b50:	3f82                	fld	ft11,32(sp)
    80002b52:	6171                	addi	sp,sp,336
    80002b54:	30200073          	mret

0000000080002b58 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler(void) {
    80002b58:	714d                	addi	sp,sp,-336
    80002b5a:	e686                	sd	ra,328(sp)
    80002b5c:	e296                	sd	t0,320(sp)
    80002b5e:	fe1a                	sd	t1,312(sp)
    80002b60:	fa1e                	sd	t2,304(sp)
    80002b62:	f622                	sd	s0,296(sp)
    80002b64:	f22a                	sd	a0,288(sp)
    80002b66:	ee2e                	sd	a1,280(sp)
    80002b68:	ea32                	sd	a2,272(sp)
    80002b6a:	e636                	sd	a3,264(sp)
    80002b6c:	e23a                	sd	a4,256(sp)
    80002b6e:	fdbe                	sd	a5,248(sp)
    80002b70:	f9c2                	sd	a6,240(sp)
    80002b72:	f5c6                	sd	a7,232(sp)
    80002b74:	f1f2                	sd	t3,224(sp)
    80002b76:	edf6                	sd	t4,216(sp)
    80002b78:	e9fa                	sd	t5,208(sp)
    80002b7a:	e5fe                	sd	t6,200(sp)
    80002b7c:	bd02                	fsd	ft0,184(sp)
    80002b7e:	b906                	fsd	ft1,176(sp)
    80002b80:	b50a                	fsd	ft2,168(sp)
    80002b82:	b10e                	fsd	ft3,160(sp)
    80002b84:	ad12                	fsd	ft4,152(sp)
    80002b86:	a916                	fsd	ft5,144(sp)
    80002b88:	a51a                	fsd	ft6,136(sp)
    80002b8a:	a11e                	fsd	ft7,128(sp)
    80002b8c:	bcaa                	fsd	fa0,120(sp)
    80002b8e:	b8ae                	fsd	fa1,112(sp)
    80002b90:	b4b2                	fsd	fa2,104(sp)
    80002b92:	b0b6                	fsd	fa3,96(sp)
    80002b94:	acba                	fsd	fa4,88(sp)
    80002b96:	a8be                	fsd	fa5,80(sp)
    80002b98:	a4c2                	fsd	fa6,72(sp)
    80002b9a:	a0c6                	fsd	fa7,64(sp)
    80002b9c:	bc72                	fsd	ft8,56(sp)
    80002b9e:	b876                	fsd	ft9,48(sp)
    80002ba0:	b47a                	fsd	ft10,40(sp)
    80002ba2:	b07e                	fsd	ft11,32(sp)
    80002ba4:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:220
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC1);
    80002ba6:	849ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    80002baa:	87aa                	mv	a5,a0
    80002bac:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80002bb0:	078e                	slli	a5,a5,0x3
    80002bb2:	97ba                	add	a5,a5,a4
    80002bb4:	639c                	ld	a5,0(a5)
    80002bb6:	ecf43423          	sd	a5,-312(s0)
    80002bba:	ec843783          	ld	a5,-312(s0)
    80002bbe:	c78d                	beqz	a5,80002be8 <metal_lc1_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:220 (discriminator 1)
    80002bc0:	ec843503          	ld	a0,-312(s0)
    80002bc4:	fa4ff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80002bc8:	eca43023          	sd	a0,-320(s0)
    80002bcc:	ec043783          	ld	a5,-320(s0)
    80002bd0:	3487b783          	ld	a5,840(a5)
    80002bd4:	eaf43c23          	sd	a5,-328(s0)
    80002bd8:	ec043783          	ld	a5,-320(s0)
    80002bdc:	3387b783          	ld	a5,824(a5)
    80002be0:	eb843583          	ld	a1,-328(s0)
    80002be4:	4545                	li	a0,17
    80002be6:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:221
}
    80002be8:	0001                	nop
    80002bea:	60b6                	ld	ra,328(sp)
    80002bec:	6296                	ld	t0,320(sp)
    80002bee:	7372                	ld	t1,312(sp)
    80002bf0:	73d2                	ld	t2,304(sp)
    80002bf2:	7432                	ld	s0,296(sp)
    80002bf4:	7512                	ld	a0,288(sp)
    80002bf6:	65f2                	ld	a1,280(sp)
    80002bf8:	6652                	ld	a2,272(sp)
    80002bfa:	66b2                	ld	a3,264(sp)
    80002bfc:	6712                	ld	a4,256(sp)
    80002bfe:	77ee                	ld	a5,248(sp)
    80002c00:	784e                	ld	a6,240(sp)
    80002c02:	78ae                	ld	a7,232(sp)
    80002c04:	7e0e                	ld	t3,224(sp)
    80002c06:	6eee                	ld	t4,216(sp)
    80002c08:	6f4e                	ld	t5,208(sp)
    80002c0a:	6fae                	ld	t6,200(sp)
    80002c0c:	306a                	fld	ft0,184(sp)
    80002c0e:	30ca                	fld	ft1,176(sp)
    80002c10:	312a                	fld	ft2,168(sp)
    80002c12:	318a                	fld	ft3,160(sp)
    80002c14:	226a                	fld	ft4,152(sp)
    80002c16:	22ca                	fld	ft5,144(sp)
    80002c18:	232a                	fld	ft6,136(sp)
    80002c1a:	238a                	fld	ft7,128(sp)
    80002c1c:	3566                	fld	fa0,120(sp)
    80002c1e:	35c6                	fld	fa1,112(sp)
    80002c20:	3626                	fld	fa2,104(sp)
    80002c22:	3686                	fld	fa3,96(sp)
    80002c24:	2766                	fld	fa4,88(sp)
    80002c26:	27c6                	fld	fa5,80(sp)
    80002c28:	2826                	fld	fa6,72(sp)
    80002c2a:	2886                	fld	fa7,64(sp)
    80002c2c:	3e62                	fld	ft8,56(sp)
    80002c2e:	3ec2                	fld	ft9,48(sp)
    80002c30:	3f22                	fld	ft10,40(sp)
    80002c32:	3f82                	fld	ft11,32(sp)
    80002c34:	6171                	addi	sp,sp,336
    80002c36:	30200073          	mret

0000000080002c3a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:224

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler(void) {
    80002c3a:	714d                	addi	sp,sp,-336
    80002c3c:	e686                	sd	ra,328(sp)
    80002c3e:	e296                	sd	t0,320(sp)
    80002c40:	fe1a                	sd	t1,312(sp)
    80002c42:	fa1e                	sd	t2,304(sp)
    80002c44:	f622                	sd	s0,296(sp)
    80002c46:	f22a                	sd	a0,288(sp)
    80002c48:	ee2e                	sd	a1,280(sp)
    80002c4a:	ea32                	sd	a2,272(sp)
    80002c4c:	e636                	sd	a3,264(sp)
    80002c4e:	e23a                	sd	a4,256(sp)
    80002c50:	fdbe                	sd	a5,248(sp)
    80002c52:	f9c2                	sd	a6,240(sp)
    80002c54:	f5c6                	sd	a7,232(sp)
    80002c56:	f1f2                	sd	t3,224(sp)
    80002c58:	edf6                	sd	t4,216(sp)
    80002c5a:	e9fa                	sd	t5,208(sp)
    80002c5c:	e5fe                	sd	t6,200(sp)
    80002c5e:	bd02                	fsd	ft0,184(sp)
    80002c60:	b906                	fsd	ft1,176(sp)
    80002c62:	b50a                	fsd	ft2,168(sp)
    80002c64:	b10e                	fsd	ft3,160(sp)
    80002c66:	ad12                	fsd	ft4,152(sp)
    80002c68:	a916                	fsd	ft5,144(sp)
    80002c6a:	a51a                	fsd	ft6,136(sp)
    80002c6c:	a11e                	fsd	ft7,128(sp)
    80002c6e:	bcaa                	fsd	fa0,120(sp)
    80002c70:	b8ae                	fsd	fa1,112(sp)
    80002c72:	b4b2                	fsd	fa2,104(sp)
    80002c74:	b0b6                	fsd	fa3,96(sp)
    80002c76:	acba                	fsd	fa4,88(sp)
    80002c78:	a8be                	fsd	fa5,80(sp)
    80002c7a:	a4c2                	fsd	fa6,72(sp)
    80002c7c:	a0c6                	fsd	fa7,64(sp)
    80002c7e:	bc72                	fsd	ft8,56(sp)
    80002c80:	b876                	fsd	ft9,48(sp)
    80002c82:	b47a                	fsd	ft10,40(sp)
    80002c84:	b07e                	fsd	ft11,32(sp)
    80002c86:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:225
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC2);
    80002c88:	f66ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    80002c8c:	87aa                	mv	a5,a0
    80002c8e:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80002c92:	078e                	slli	a5,a5,0x3
    80002c94:	97ba                	add	a5,a5,a4
    80002c96:	639c                	ld	a5,0(a5)
    80002c98:	ecf43423          	sd	a5,-312(s0)
    80002c9c:	ec843783          	ld	a5,-312(s0)
    80002ca0:	c78d                	beqz	a5,80002cca <metal_lc2_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:225 (discriminator 1)
    80002ca2:	ec843503          	ld	a0,-312(s0)
    80002ca6:	ec2ff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80002caa:	eca43023          	sd	a0,-320(s0)
    80002cae:	ec043783          	ld	a5,-320(s0)
    80002cb2:	3687b783          	ld	a5,872(a5)
    80002cb6:	eaf43c23          	sd	a5,-328(s0)
    80002cba:	ec043783          	ld	a5,-320(s0)
    80002cbe:	3587b783          	ld	a5,856(a5)
    80002cc2:	eb843583          	ld	a1,-328(s0)
    80002cc6:	4549                	li	a0,18
    80002cc8:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:226
}
    80002cca:	0001                	nop
    80002ccc:	60b6                	ld	ra,328(sp)
    80002cce:	6296                	ld	t0,320(sp)
    80002cd0:	7372                	ld	t1,312(sp)
    80002cd2:	73d2                	ld	t2,304(sp)
    80002cd4:	7432                	ld	s0,296(sp)
    80002cd6:	7512                	ld	a0,288(sp)
    80002cd8:	65f2                	ld	a1,280(sp)
    80002cda:	6652                	ld	a2,272(sp)
    80002cdc:	66b2                	ld	a3,264(sp)
    80002cde:	6712                	ld	a4,256(sp)
    80002ce0:	77ee                	ld	a5,248(sp)
    80002ce2:	784e                	ld	a6,240(sp)
    80002ce4:	78ae                	ld	a7,232(sp)
    80002ce6:	7e0e                	ld	t3,224(sp)
    80002ce8:	6eee                	ld	t4,216(sp)
    80002cea:	6f4e                	ld	t5,208(sp)
    80002cec:	6fae                	ld	t6,200(sp)
    80002cee:	306a                	fld	ft0,184(sp)
    80002cf0:	30ca                	fld	ft1,176(sp)
    80002cf2:	312a                	fld	ft2,168(sp)
    80002cf4:	318a                	fld	ft3,160(sp)
    80002cf6:	226a                	fld	ft4,152(sp)
    80002cf8:	22ca                	fld	ft5,144(sp)
    80002cfa:	232a                	fld	ft6,136(sp)
    80002cfc:	238a                	fld	ft7,128(sp)
    80002cfe:	3566                	fld	fa0,120(sp)
    80002d00:	35c6                	fld	fa1,112(sp)
    80002d02:	3626                	fld	fa2,104(sp)
    80002d04:	3686                	fld	fa3,96(sp)
    80002d06:	2766                	fld	fa4,88(sp)
    80002d08:	27c6                	fld	fa5,80(sp)
    80002d0a:	2826                	fld	fa6,72(sp)
    80002d0c:	2886                	fld	fa7,64(sp)
    80002d0e:	3e62                	fld	ft8,56(sp)
    80002d10:	3ec2                	fld	ft9,48(sp)
    80002d12:	3f22                	fld	ft10,40(sp)
    80002d14:	3f82                	fld	ft11,32(sp)
    80002d16:	6171                	addi	sp,sp,336
    80002d18:	30200073          	mret

0000000080002d1c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:229

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler(void) {
    80002d1c:	714d                	addi	sp,sp,-336
    80002d1e:	e686                	sd	ra,328(sp)
    80002d20:	e296                	sd	t0,320(sp)
    80002d22:	fe1a                	sd	t1,312(sp)
    80002d24:	fa1e                	sd	t2,304(sp)
    80002d26:	f622                	sd	s0,296(sp)
    80002d28:	f22a                	sd	a0,288(sp)
    80002d2a:	ee2e                	sd	a1,280(sp)
    80002d2c:	ea32                	sd	a2,272(sp)
    80002d2e:	e636                	sd	a3,264(sp)
    80002d30:	e23a                	sd	a4,256(sp)
    80002d32:	fdbe                	sd	a5,248(sp)
    80002d34:	f9c2                	sd	a6,240(sp)
    80002d36:	f5c6                	sd	a7,232(sp)
    80002d38:	f1f2                	sd	t3,224(sp)
    80002d3a:	edf6                	sd	t4,216(sp)
    80002d3c:	e9fa                	sd	t5,208(sp)
    80002d3e:	e5fe                	sd	t6,200(sp)
    80002d40:	bd02                	fsd	ft0,184(sp)
    80002d42:	b906                	fsd	ft1,176(sp)
    80002d44:	b50a                	fsd	ft2,168(sp)
    80002d46:	b10e                	fsd	ft3,160(sp)
    80002d48:	ad12                	fsd	ft4,152(sp)
    80002d4a:	a916                	fsd	ft5,144(sp)
    80002d4c:	a51a                	fsd	ft6,136(sp)
    80002d4e:	a11e                	fsd	ft7,128(sp)
    80002d50:	bcaa                	fsd	fa0,120(sp)
    80002d52:	b8ae                	fsd	fa1,112(sp)
    80002d54:	b4b2                	fsd	fa2,104(sp)
    80002d56:	b0b6                	fsd	fa3,96(sp)
    80002d58:	acba                	fsd	fa4,88(sp)
    80002d5a:	a8be                	fsd	fa5,80(sp)
    80002d5c:	a4c2                	fsd	fa6,72(sp)
    80002d5e:	a0c6                	fsd	fa7,64(sp)
    80002d60:	bc72                	fsd	ft8,56(sp)
    80002d62:	b876                	fsd	ft9,48(sp)
    80002d64:	b47a                	fsd	ft10,40(sp)
    80002d66:	b07e                	fsd	ft11,32(sp)
    80002d68:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:230
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC3);
    80002d6a:	e84ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    80002d6e:	87aa                	mv	a5,a0
    80002d70:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80002d74:	078e                	slli	a5,a5,0x3
    80002d76:	97ba                	add	a5,a5,a4
    80002d78:	639c                	ld	a5,0(a5)
    80002d7a:	ecf43423          	sd	a5,-312(s0)
    80002d7e:	ec843783          	ld	a5,-312(s0)
    80002d82:	c78d                	beqz	a5,80002dac <metal_lc3_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:230 (discriminator 1)
    80002d84:	ec843503          	ld	a0,-312(s0)
    80002d88:	de0ff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80002d8c:	eca43023          	sd	a0,-320(s0)
    80002d90:	ec043783          	ld	a5,-320(s0)
    80002d94:	3887b783          	ld	a5,904(a5)
    80002d98:	eaf43c23          	sd	a5,-328(s0)
    80002d9c:	ec043783          	ld	a5,-320(s0)
    80002da0:	3787b783          	ld	a5,888(a5)
    80002da4:	eb843583          	ld	a1,-328(s0)
    80002da8:	454d                	li	a0,19
    80002daa:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:231
}
    80002dac:	0001                	nop
    80002dae:	60b6                	ld	ra,328(sp)
    80002db0:	6296                	ld	t0,320(sp)
    80002db2:	7372                	ld	t1,312(sp)
    80002db4:	73d2                	ld	t2,304(sp)
    80002db6:	7432                	ld	s0,296(sp)
    80002db8:	7512                	ld	a0,288(sp)
    80002dba:	65f2                	ld	a1,280(sp)
    80002dbc:	6652                	ld	a2,272(sp)
    80002dbe:	66b2                	ld	a3,264(sp)
    80002dc0:	6712                	ld	a4,256(sp)
    80002dc2:	77ee                	ld	a5,248(sp)
    80002dc4:	784e                	ld	a6,240(sp)
    80002dc6:	78ae                	ld	a7,232(sp)
    80002dc8:	7e0e                	ld	t3,224(sp)
    80002dca:	6eee                	ld	t4,216(sp)
    80002dcc:	6f4e                	ld	t5,208(sp)
    80002dce:	6fae                	ld	t6,200(sp)
    80002dd0:	306a                	fld	ft0,184(sp)
    80002dd2:	30ca                	fld	ft1,176(sp)
    80002dd4:	312a                	fld	ft2,168(sp)
    80002dd6:	318a                	fld	ft3,160(sp)
    80002dd8:	226a                	fld	ft4,152(sp)
    80002dda:	22ca                	fld	ft5,144(sp)
    80002ddc:	232a                	fld	ft6,136(sp)
    80002dde:	238a                	fld	ft7,128(sp)
    80002de0:	3566                	fld	fa0,120(sp)
    80002de2:	35c6                	fld	fa1,112(sp)
    80002de4:	3626                	fld	fa2,104(sp)
    80002de6:	3686                	fld	fa3,96(sp)
    80002de8:	2766                	fld	fa4,88(sp)
    80002dea:	27c6                	fld	fa5,80(sp)
    80002dec:	2826                	fld	fa6,72(sp)
    80002dee:	2886                	fld	fa7,64(sp)
    80002df0:	3e62                	fld	ft8,56(sp)
    80002df2:	3ec2                	fld	ft9,48(sp)
    80002df4:	3f22                	fld	ft10,40(sp)
    80002df6:	3f82                	fld	ft11,32(sp)
    80002df8:	6171                	addi	sp,sp,336
    80002dfa:	30200073          	mret

0000000080002dfe <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:234

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler(void) {
    80002dfe:	714d                	addi	sp,sp,-336
    80002e00:	e686                	sd	ra,328(sp)
    80002e02:	e296                	sd	t0,320(sp)
    80002e04:	fe1a                	sd	t1,312(sp)
    80002e06:	fa1e                	sd	t2,304(sp)
    80002e08:	f622                	sd	s0,296(sp)
    80002e0a:	f22a                	sd	a0,288(sp)
    80002e0c:	ee2e                	sd	a1,280(sp)
    80002e0e:	ea32                	sd	a2,272(sp)
    80002e10:	e636                	sd	a3,264(sp)
    80002e12:	e23a                	sd	a4,256(sp)
    80002e14:	fdbe                	sd	a5,248(sp)
    80002e16:	f9c2                	sd	a6,240(sp)
    80002e18:	f5c6                	sd	a7,232(sp)
    80002e1a:	f1f2                	sd	t3,224(sp)
    80002e1c:	edf6                	sd	t4,216(sp)
    80002e1e:	e9fa                	sd	t5,208(sp)
    80002e20:	e5fe                	sd	t6,200(sp)
    80002e22:	bd02                	fsd	ft0,184(sp)
    80002e24:	b906                	fsd	ft1,176(sp)
    80002e26:	b50a                	fsd	ft2,168(sp)
    80002e28:	b10e                	fsd	ft3,160(sp)
    80002e2a:	ad12                	fsd	ft4,152(sp)
    80002e2c:	a916                	fsd	ft5,144(sp)
    80002e2e:	a51a                	fsd	ft6,136(sp)
    80002e30:	a11e                	fsd	ft7,128(sp)
    80002e32:	bcaa                	fsd	fa0,120(sp)
    80002e34:	b8ae                	fsd	fa1,112(sp)
    80002e36:	b4b2                	fsd	fa2,104(sp)
    80002e38:	b0b6                	fsd	fa3,96(sp)
    80002e3a:	acba                	fsd	fa4,88(sp)
    80002e3c:	a8be                	fsd	fa5,80(sp)
    80002e3e:	a4c2                	fsd	fa6,72(sp)
    80002e40:	a0c6                	fsd	fa7,64(sp)
    80002e42:	bc72                	fsd	ft8,56(sp)
    80002e44:	b876                	fsd	ft9,48(sp)
    80002e46:	b47a                	fsd	ft10,40(sp)
    80002e48:	b07e                	fsd	ft11,32(sp)
    80002e4a:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:235
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC4);
    80002e4c:	da2ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    80002e50:	87aa                	mv	a5,a0
    80002e52:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80002e56:	078e                	slli	a5,a5,0x3
    80002e58:	97ba                	add	a5,a5,a4
    80002e5a:	639c                	ld	a5,0(a5)
    80002e5c:	ecf43423          	sd	a5,-312(s0)
    80002e60:	ec843783          	ld	a5,-312(s0)
    80002e64:	c78d                	beqz	a5,80002e8e <metal_lc4_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:235 (discriminator 1)
    80002e66:	ec843503          	ld	a0,-312(s0)
    80002e6a:	cfeff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80002e6e:	eca43023          	sd	a0,-320(s0)
    80002e72:	ec043783          	ld	a5,-320(s0)
    80002e76:	3a87b783          	ld	a5,936(a5)
    80002e7a:	eaf43c23          	sd	a5,-328(s0)
    80002e7e:	ec043783          	ld	a5,-320(s0)
    80002e82:	3987b783          	ld	a5,920(a5)
    80002e86:	eb843583          	ld	a1,-328(s0)
    80002e8a:	4551                	li	a0,20
    80002e8c:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:236
}
    80002e8e:	0001                	nop
    80002e90:	60b6                	ld	ra,328(sp)
    80002e92:	6296                	ld	t0,320(sp)
    80002e94:	7372                	ld	t1,312(sp)
    80002e96:	73d2                	ld	t2,304(sp)
    80002e98:	7432                	ld	s0,296(sp)
    80002e9a:	7512                	ld	a0,288(sp)
    80002e9c:	65f2                	ld	a1,280(sp)
    80002e9e:	6652                	ld	a2,272(sp)
    80002ea0:	66b2                	ld	a3,264(sp)
    80002ea2:	6712                	ld	a4,256(sp)
    80002ea4:	77ee                	ld	a5,248(sp)
    80002ea6:	784e                	ld	a6,240(sp)
    80002ea8:	78ae                	ld	a7,232(sp)
    80002eaa:	7e0e                	ld	t3,224(sp)
    80002eac:	6eee                	ld	t4,216(sp)
    80002eae:	6f4e                	ld	t5,208(sp)
    80002eb0:	6fae                	ld	t6,200(sp)
    80002eb2:	306a                	fld	ft0,184(sp)
    80002eb4:	30ca                	fld	ft1,176(sp)
    80002eb6:	312a                	fld	ft2,168(sp)
    80002eb8:	318a                	fld	ft3,160(sp)
    80002eba:	226a                	fld	ft4,152(sp)
    80002ebc:	22ca                	fld	ft5,144(sp)
    80002ebe:	232a                	fld	ft6,136(sp)
    80002ec0:	238a                	fld	ft7,128(sp)
    80002ec2:	3566                	fld	fa0,120(sp)
    80002ec4:	35c6                	fld	fa1,112(sp)
    80002ec6:	3626                	fld	fa2,104(sp)
    80002ec8:	3686                	fld	fa3,96(sp)
    80002eca:	2766                	fld	fa4,88(sp)
    80002ecc:	27c6                	fld	fa5,80(sp)
    80002ece:	2826                	fld	fa6,72(sp)
    80002ed0:	2886                	fld	fa7,64(sp)
    80002ed2:	3e62                	fld	ft8,56(sp)
    80002ed4:	3ec2                	fld	ft9,48(sp)
    80002ed6:	3f22                	fld	ft10,40(sp)
    80002ed8:	3f82                	fld	ft11,32(sp)
    80002eda:	6171                	addi	sp,sp,336
    80002edc:	30200073          	mret

0000000080002ee0 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:239

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler(void) {
    80002ee0:	714d                	addi	sp,sp,-336
    80002ee2:	e686                	sd	ra,328(sp)
    80002ee4:	e296                	sd	t0,320(sp)
    80002ee6:	fe1a                	sd	t1,312(sp)
    80002ee8:	fa1e                	sd	t2,304(sp)
    80002eea:	f622                	sd	s0,296(sp)
    80002eec:	f22a                	sd	a0,288(sp)
    80002eee:	ee2e                	sd	a1,280(sp)
    80002ef0:	ea32                	sd	a2,272(sp)
    80002ef2:	e636                	sd	a3,264(sp)
    80002ef4:	e23a                	sd	a4,256(sp)
    80002ef6:	fdbe                	sd	a5,248(sp)
    80002ef8:	f9c2                	sd	a6,240(sp)
    80002efa:	f5c6                	sd	a7,232(sp)
    80002efc:	f1f2                	sd	t3,224(sp)
    80002efe:	edf6                	sd	t4,216(sp)
    80002f00:	e9fa                	sd	t5,208(sp)
    80002f02:	e5fe                	sd	t6,200(sp)
    80002f04:	bd02                	fsd	ft0,184(sp)
    80002f06:	b906                	fsd	ft1,176(sp)
    80002f08:	b50a                	fsd	ft2,168(sp)
    80002f0a:	b10e                	fsd	ft3,160(sp)
    80002f0c:	ad12                	fsd	ft4,152(sp)
    80002f0e:	a916                	fsd	ft5,144(sp)
    80002f10:	a51a                	fsd	ft6,136(sp)
    80002f12:	a11e                	fsd	ft7,128(sp)
    80002f14:	bcaa                	fsd	fa0,120(sp)
    80002f16:	b8ae                	fsd	fa1,112(sp)
    80002f18:	b4b2                	fsd	fa2,104(sp)
    80002f1a:	b0b6                	fsd	fa3,96(sp)
    80002f1c:	acba                	fsd	fa4,88(sp)
    80002f1e:	a8be                	fsd	fa5,80(sp)
    80002f20:	a4c2                	fsd	fa6,72(sp)
    80002f22:	a0c6                	fsd	fa7,64(sp)
    80002f24:	bc72                	fsd	ft8,56(sp)
    80002f26:	b876                	fsd	ft9,48(sp)
    80002f28:	b47a                	fsd	ft10,40(sp)
    80002f2a:	b07e                	fsd	ft11,32(sp)
    80002f2c:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:240
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC5);
    80002f2e:	cc0ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    80002f32:	87aa                	mv	a5,a0
    80002f34:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80002f38:	078e                	slli	a5,a5,0x3
    80002f3a:	97ba                	add	a5,a5,a4
    80002f3c:	639c                	ld	a5,0(a5)
    80002f3e:	ecf43423          	sd	a5,-312(s0)
    80002f42:	ec843783          	ld	a5,-312(s0)
    80002f46:	c78d                	beqz	a5,80002f70 <metal_lc5_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:240 (discriminator 1)
    80002f48:	ec843503          	ld	a0,-312(s0)
    80002f4c:	c1cff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80002f50:	eca43023          	sd	a0,-320(s0)
    80002f54:	ec043783          	ld	a5,-320(s0)
    80002f58:	3c87b783          	ld	a5,968(a5)
    80002f5c:	eaf43c23          	sd	a5,-328(s0)
    80002f60:	ec043783          	ld	a5,-320(s0)
    80002f64:	3b87b783          	ld	a5,952(a5)
    80002f68:	eb843583          	ld	a1,-328(s0)
    80002f6c:	4555                	li	a0,21
    80002f6e:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:241
}
    80002f70:	0001                	nop
    80002f72:	60b6                	ld	ra,328(sp)
    80002f74:	6296                	ld	t0,320(sp)
    80002f76:	7372                	ld	t1,312(sp)
    80002f78:	73d2                	ld	t2,304(sp)
    80002f7a:	7432                	ld	s0,296(sp)
    80002f7c:	7512                	ld	a0,288(sp)
    80002f7e:	65f2                	ld	a1,280(sp)
    80002f80:	6652                	ld	a2,272(sp)
    80002f82:	66b2                	ld	a3,264(sp)
    80002f84:	6712                	ld	a4,256(sp)
    80002f86:	77ee                	ld	a5,248(sp)
    80002f88:	784e                	ld	a6,240(sp)
    80002f8a:	78ae                	ld	a7,232(sp)
    80002f8c:	7e0e                	ld	t3,224(sp)
    80002f8e:	6eee                	ld	t4,216(sp)
    80002f90:	6f4e                	ld	t5,208(sp)
    80002f92:	6fae                	ld	t6,200(sp)
    80002f94:	306a                	fld	ft0,184(sp)
    80002f96:	30ca                	fld	ft1,176(sp)
    80002f98:	312a                	fld	ft2,168(sp)
    80002f9a:	318a                	fld	ft3,160(sp)
    80002f9c:	226a                	fld	ft4,152(sp)
    80002f9e:	22ca                	fld	ft5,144(sp)
    80002fa0:	232a                	fld	ft6,136(sp)
    80002fa2:	238a                	fld	ft7,128(sp)
    80002fa4:	3566                	fld	fa0,120(sp)
    80002fa6:	35c6                	fld	fa1,112(sp)
    80002fa8:	3626                	fld	fa2,104(sp)
    80002faa:	3686                	fld	fa3,96(sp)
    80002fac:	2766                	fld	fa4,88(sp)
    80002fae:	27c6                	fld	fa5,80(sp)
    80002fb0:	2826                	fld	fa6,72(sp)
    80002fb2:	2886                	fld	fa7,64(sp)
    80002fb4:	3e62                	fld	ft8,56(sp)
    80002fb6:	3ec2                	fld	ft9,48(sp)
    80002fb8:	3f22                	fld	ft10,40(sp)
    80002fba:	3f82                	fld	ft11,32(sp)
    80002fbc:	6171                	addi	sp,sp,336
    80002fbe:	30200073          	mret

0000000080002fc2 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:244

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler(void) {
    80002fc2:	714d                	addi	sp,sp,-336
    80002fc4:	e686                	sd	ra,328(sp)
    80002fc6:	e296                	sd	t0,320(sp)
    80002fc8:	fe1a                	sd	t1,312(sp)
    80002fca:	fa1e                	sd	t2,304(sp)
    80002fcc:	f622                	sd	s0,296(sp)
    80002fce:	f22a                	sd	a0,288(sp)
    80002fd0:	ee2e                	sd	a1,280(sp)
    80002fd2:	ea32                	sd	a2,272(sp)
    80002fd4:	e636                	sd	a3,264(sp)
    80002fd6:	e23a                	sd	a4,256(sp)
    80002fd8:	fdbe                	sd	a5,248(sp)
    80002fda:	f9c2                	sd	a6,240(sp)
    80002fdc:	f5c6                	sd	a7,232(sp)
    80002fde:	f1f2                	sd	t3,224(sp)
    80002fe0:	edf6                	sd	t4,216(sp)
    80002fe2:	e9fa                	sd	t5,208(sp)
    80002fe4:	e5fe                	sd	t6,200(sp)
    80002fe6:	bd02                	fsd	ft0,184(sp)
    80002fe8:	b906                	fsd	ft1,176(sp)
    80002fea:	b50a                	fsd	ft2,168(sp)
    80002fec:	b10e                	fsd	ft3,160(sp)
    80002fee:	ad12                	fsd	ft4,152(sp)
    80002ff0:	a916                	fsd	ft5,144(sp)
    80002ff2:	a51a                	fsd	ft6,136(sp)
    80002ff4:	a11e                	fsd	ft7,128(sp)
    80002ff6:	bcaa                	fsd	fa0,120(sp)
    80002ff8:	b8ae                	fsd	fa1,112(sp)
    80002ffa:	b4b2                	fsd	fa2,104(sp)
    80002ffc:	b0b6                	fsd	fa3,96(sp)
    80002ffe:	acba                	fsd	fa4,88(sp)
    80003000:	a8be                	fsd	fa5,80(sp)
    80003002:	a4c2                	fsd	fa6,72(sp)
    80003004:	a0c6                	fsd	fa7,64(sp)
    80003006:	bc72                	fsd	ft8,56(sp)
    80003008:	b876                	fsd	ft9,48(sp)
    8000300a:	b47a                	fsd	ft10,40(sp)
    8000300c:	b07e                	fsd	ft11,32(sp)
    8000300e:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:245
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC6);
    80003010:	bdeff0ef          	jal	ra,800023ee <__metal_myhart_id>
    80003014:	87aa                	mv	a5,a0
    80003016:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    8000301a:	078e                	slli	a5,a5,0x3
    8000301c:	97ba                	add	a5,a5,a4
    8000301e:	639c                	ld	a5,0(a5)
    80003020:	ecf43423          	sd	a5,-312(s0)
    80003024:	ec843783          	ld	a5,-312(s0)
    80003028:	c78d                	beqz	a5,80003052 <metal_lc6_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:245 (discriminator 1)
    8000302a:	ec843503          	ld	a0,-312(s0)
    8000302e:	b3aff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80003032:	eca43023          	sd	a0,-320(s0)
    80003036:	ec043783          	ld	a5,-320(s0)
    8000303a:	3e87b783          	ld	a5,1000(a5)
    8000303e:	eaf43c23          	sd	a5,-328(s0)
    80003042:	ec043783          	ld	a5,-320(s0)
    80003046:	3d87b783          	ld	a5,984(a5)
    8000304a:	eb843583          	ld	a1,-328(s0)
    8000304e:	4559                	li	a0,22
    80003050:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:246
}
    80003052:	0001                	nop
    80003054:	60b6                	ld	ra,328(sp)
    80003056:	6296                	ld	t0,320(sp)
    80003058:	7372                	ld	t1,312(sp)
    8000305a:	73d2                	ld	t2,304(sp)
    8000305c:	7432                	ld	s0,296(sp)
    8000305e:	7512                	ld	a0,288(sp)
    80003060:	65f2                	ld	a1,280(sp)
    80003062:	6652                	ld	a2,272(sp)
    80003064:	66b2                	ld	a3,264(sp)
    80003066:	6712                	ld	a4,256(sp)
    80003068:	77ee                	ld	a5,248(sp)
    8000306a:	784e                	ld	a6,240(sp)
    8000306c:	78ae                	ld	a7,232(sp)
    8000306e:	7e0e                	ld	t3,224(sp)
    80003070:	6eee                	ld	t4,216(sp)
    80003072:	6f4e                	ld	t5,208(sp)
    80003074:	6fae                	ld	t6,200(sp)
    80003076:	306a                	fld	ft0,184(sp)
    80003078:	30ca                	fld	ft1,176(sp)
    8000307a:	312a                	fld	ft2,168(sp)
    8000307c:	318a                	fld	ft3,160(sp)
    8000307e:	226a                	fld	ft4,152(sp)
    80003080:	22ca                	fld	ft5,144(sp)
    80003082:	232a                	fld	ft6,136(sp)
    80003084:	238a                	fld	ft7,128(sp)
    80003086:	3566                	fld	fa0,120(sp)
    80003088:	35c6                	fld	fa1,112(sp)
    8000308a:	3626                	fld	fa2,104(sp)
    8000308c:	3686                	fld	fa3,96(sp)
    8000308e:	2766                	fld	fa4,88(sp)
    80003090:	27c6                	fld	fa5,80(sp)
    80003092:	2826                	fld	fa6,72(sp)
    80003094:	2886                	fld	fa7,64(sp)
    80003096:	3e62                	fld	ft8,56(sp)
    80003098:	3ec2                	fld	ft9,48(sp)
    8000309a:	3f22                	fld	ft10,40(sp)
    8000309c:	3f82                	fld	ft11,32(sp)
    8000309e:	6171                	addi	sp,sp,336
    800030a0:	30200073          	mret

00000000800030a4 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:249

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler(void) {
    800030a4:	714d                	addi	sp,sp,-336
    800030a6:	e686                	sd	ra,328(sp)
    800030a8:	e296                	sd	t0,320(sp)
    800030aa:	fe1a                	sd	t1,312(sp)
    800030ac:	fa1e                	sd	t2,304(sp)
    800030ae:	f622                	sd	s0,296(sp)
    800030b0:	f22a                	sd	a0,288(sp)
    800030b2:	ee2e                	sd	a1,280(sp)
    800030b4:	ea32                	sd	a2,272(sp)
    800030b6:	e636                	sd	a3,264(sp)
    800030b8:	e23a                	sd	a4,256(sp)
    800030ba:	fdbe                	sd	a5,248(sp)
    800030bc:	f9c2                	sd	a6,240(sp)
    800030be:	f5c6                	sd	a7,232(sp)
    800030c0:	f1f2                	sd	t3,224(sp)
    800030c2:	edf6                	sd	t4,216(sp)
    800030c4:	e9fa                	sd	t5,208(sp)
    800030c6:	e5fe                	sd	t6,200(sp)
    800030c8:	bd02                	fsd	ft0,184(sp)
    800030ca:	b906                	fsd	ft1,176(sp)
    800030cc:	b50a                	fsd	ft2,168(sp)
    800030ce:	b10e                	fsd	ft3,160(sp)
    800030d0:	ad12                	fsd	ft4,152(sp)
    800030d2:	a916                	fsd	ft5,144(sp)
    800030d4:	a51a                	fsd	ft6,136(sp)
    800030d6:	a11e                	fsd	ft7,128(sp)
    800030d8:	bcaa                	fsd	fa0,120(sp)
    800030da:	b8ae                	fsd	fa1,112(sp)
    800030dc:	b4b2                	fsd	fa2,104(sp)
    800030de:	b0b6                	fsd	fa3,96(sp)
    800030e0:	acba                	fsd	fa4,88(sp)
    800030e2:	a8be                	fsd	fa5,80(sp)
    800030e4:	a4c2                	fsd	fa6,72(sp)
    800030e6:	a0c6                	fsd	fa7,64(sp)
    800030e8:	bc72                	fsd	ft8,56(sp)
    800030ea:	b876                	fsd	ft9,48(sp)
    800030ec:	b47a                	fsd	ft10,40(sp)
    800030ee:	b07e                	fsd	ft11,32(sp)
    800030f0:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:250
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC7);
    800030f2:	afcff0ef          	jal	ra,800023ee <__metal_myhart_id>
    800030f6:	87aa                	mv	a5,a0
    800030f8:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    800030fc:	078e                	slli	a5,a5,0x3
    800030fe:	97ba                	add	a5,a5,a4
    80003100:	639c                	ld	a5,0(a5)
    80003102:	ecf43423          	sd	a5,-312(s0)
    80003106:	ec843783          	ld	a5,-312(s0)
    8000310a:	c78d                	beqz	a5,80003134 <metal_lc7_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:250 (discriminator 1)
    8000310c:	ec843503          	ld	a0,-312(s0)
    80003110:	a58ff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80003114:	eca43023          	sd	a0,-320(s0)
    80003118:	ec043783          	ld	a5,-320(s0)
    8000311c:	4087b783          	ld	a5,1032(a5)
    80003120:	eaf43c23          	sd	a5,-328(s0)
    80003124:	ec043783          	ld	a5,-320(s0)
    80003128:	3f87b783          	ld	a5,1016(a5)
    8000312c:	eb843583          	ld	a1,-328(s0)
    80003130:	455d                	li	a0,23
    80003132:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:251
}
    80003134:	0001                	nop
    80003136:	60b6                	ld	ra,328(sp)
    80003138:	6296                	ld	t0,320(sp)
    8000313a:	7372                	ld	t1,312(sp)
    8000313c:	73d2                	ld	t2,304(sp)
    8000313e:	7432                	ld	s0,296(sp)
    80003140:	7512                	ld	a0,288(sp)
    80003142:	65f2                	ld	a1,280(sp)
    80003144:	6652                	ld	a2,272(sp)
    80003146:	66b2                	ld	a3,264(sp)
    80003148:	6712                	ld	a4,256(sp)
    8000314a:	77ee                	ld	a5,248(sp)
    8000314c:	784e                	ld	a6,240(sp)
    8000314e:	78ae                	ld	a7,232(sp)
    80003150:	7e0e                	ld	t3,224(sp)
    80003152:	6eee                	ld	t4,216(sp)
    80003154:	6f4e                	ld	t5,208(sp)
    80003156:	6fae                	ld	t6,200(sp)
    80003158:	306a                	fld	ft0,184(sp)
    8000315a:	30ca                	fld	ft1,176(sp)
    8000315c:	312a                	fld	ft2,168(sp)
    8000315e:	318a                	fld	ft3,160(sp)
    80003160:	226a                	fld	ft4,152(sp)
    80003162:	22ca                	fld	ft5,144(sp)
    80003164:	232a                	fld	ft6,136(sp)
    80003166:	238a                	fld	ft7,128(sp)
    80003168:	3566                	fld	fa0,120(sp)
    8000316a:	35c6                	fld	fa1,112(sp)
    8000316c:	3626                	fld	fa2,104(sp)
    8000316e:	3686                	fld	fa3,96(sp)
    80003170:	2766                	fld	fa4,88(sp)
    80003172:	27c6                	fld	fa5,80(sp)
    80003174:	2826                	fld	fa6,72(sp)
    80003176:	2886                	fld	fa7,64(sp)
    80003178:	3e62                	fld	ft8,56(sp)
    8000317a:	3ec2                	fld	ft9,48(sp)
    8000317c:	3f22                	fld	ft10,40(sp)
    8000317e:	3f82                	fld	ft11,32(sp)
    80003180:	6171                	addi	sp,sp,336
    80003182:	30200073          	mret

0000000080003186 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:254

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler(void) {
    80003186:	714d                	addi	sp,sp,-336
    80003188:	e686                	sd	ra,328(sp)
    8000318a:	e296                	sd	t0,320(sp)
    8000318c:	fe1a                	sd	t1,312(sp)
    8000318e:	fa1e                	sd	t2,304(sp)
    80003190:	f622                	sd	s0,296(sp)
    80003192:	f22a                	sd	a0,288(sp)
    80003194:	ee2e                	sd	a1,280(sp)
    80003196:	ea32                	sd	a2,272(sp)
    80003198:	e636                	sd	a3,264(sp)
    8000319a:	e23a                	sd	a4,256(sp)
    8000319c:	fdbe                	sd	a5,248(sp)
    8000319e:	f9c2                	sd	a6,240(sp)
    800031a0:	f5c6                	sd	a7,232(sp)
    800031a2:	f1f2                	sd	t3,224(sp)
    800031a4:	edf6                	sd	t4,216(sp)
    800031a6:	e9fa                	sd	t5,208(sp)
    800031a8:	e5fe                	sd	t6,200(sp)
    800031aa:	bd02                	fsd	ft0,184(sp)
    800031ac:	b906                	fsd	ft1,176(sp)
    800031ae:	b50a                	fsd	ft2,168(sp)
    800031b0:	b10e                	fsd	ft3,160(sp)
    800031b2:	ad12                	fsd	ft4,152(sp)
    800031b4:	a916                	fsd	ft5,144(sp)
    800031b6:	a51a                	fsd	ft6,136(sp)
    800031b8:	a11e                	fsd	ft7,128(sp)
    800031ba:	bcaa                	fsd	fa0,120(sp)
    800031bc:	b8ae                	fsd	fa1,112(sp)
    800031be:	b4b2                	fsd	fa2,104(sp)
    800031c0:	b0b6                	fsd	fa3,96(sp)
    800031c2:	acba                	fsd	fa4,88(sp)
    800031c4:	a8be                	fsd	fa5,80(sp)
    800031c6:	a4c2                	fsd	fa6,72(sp)
    800031c8:	a0c6                	fsd	fa7,64(sp)
    800031ca:	bc72                	fsd	ft8,56(sp)
    800031cc:	b876                	fsd	ft9,48(sp)
    800031ce:	b47a                	fsd	ft10,40(sp)
    800031d0:	b07e                	fsd	ft11,32(sp)
    800031d2:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:255
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC8);
    800031d4:	a1aff0ef          	jal	ra,800023ee <__metal_myhart_id>
    800031d8:	87aa                	mv	a5,a0
    800031da:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    800031de:	078e                	slli	a5,a5,0x3
    800031e0:	97ba                	add	a5,a5,a4
    800031e2:	639c                	ld	a5,0(a5)
    800031e4:	ecf43423          	sd	a5,-312(s0)
    800031e8:	ec843783          	ld	a5,-312(s0)
    800031ec:	c78d                	beqz	a5,80003216 <metal_lc8_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:255 (discriminator 1)
    800031ee:	ec843503          	ld	a0,-312(s0)
    800031f2:	976ff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    800031f6:	eca43023          	sd	a0,-320(s0)
    800031fa:	ec043783          	ld	a5,-320(s0)
    800031fe:	4287b783          	ld	a5,1064(a5)
    80003202:	eaf43c23          	sd	a5,-328(s0)
    80003206:	ec043783          	ld	a5,-320(s0)
    8000320a:	4187b783          	ld	a5,1048(a5)
    8000320e:	eb843583          	ld	a1,-328(s0)
    80003212:	4561                	li	a0,24
    80003214:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:256
}
    80003216:	0001                	nop
    80003218:	60b6                	ld	ra,328(sp)
    8000321a:	6296                	ld	t0,320(sp)
    8000321c:	7372                	ld	t1,312(sp)
    8000321e:	73d2                	ld	t2,304(sp)
    80003220:	7432                	ld	s0,296(sp)
    80003222:	7512                	ld	a0,288(sp)
    80003224:	65f2                	ld	a1,280(sp)
    80003226:	6652                	ld	a2,272(sp)
    80003228:	66b2                	ld	a3,264(sp)
    8000322a:	6712                	ld	a4,256(sp)
    8000322c:	77ee                	ld	a5,248(sp)
    8000322e:	784e                	ld	a6,240(sp)
    80003230:	78ae                	ld	a7,232(sp)
    80003232:	7e0e                	ld	t3,224(sp)
    80003234:	6eee                	ld	t4,216(sp)
    80003236:	6f4e                	ld	t5,208(sp)
    80003238:	6fae                	ld	t6,200(sp)
    8000323a:	306a                	fld	ft0,184(sp)
    8000323c:	30ca                	fld	ft1,176(sp)
    8000323e:	312a                	fld	ft2,168(sp)
    80003240:	318a                	fld	ft3,160(sp)
    80003242:	226a                	fld	ft4,152(sp)
    80003244:	22ca                	fld	ft5,144(sp)
    80003246:	232a                	fld	ft6,136(sp)
    80003248:	238a                	fld	ft7,128(sp)
    8000324a:	3566                	fld	fa0,120(sp)
    8000324c:	35c6                	fld	fa1,112(sp)
    8000324e:	3626                	fld	fa2,104(sp)
    80003250:	3686                	fld	fa3,96(sp)
    80003252:	2766                	fld	fa4,88(sp)
    80003254:	27c6                	fld	fa5,80(sp)
    80003256:	2826                	fld	fa6,72(sp)
    80003258:	2886                	fld	fa7,64(sp)
    8000325a:	3e62                	fld	ft8,56(sp)
    8000325c:	3ec2                	fld	ft9,48(sp)
    8000325e:	3f22                	fld	ft10,40(sp)
    80003260:	3f82                	fld	ft11,32(sp)
    80003262:	6171                	addi	sp,sp,336
    80003264:	30200073          	mret

0000000080003268 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:259

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler(void) {
    80003268:	714d                	addi	sp,sp,-336
    8000326a:	e686                	sd	ra,328(sp)
    8000326c:	e296                	sd	t0,320(sp)
    8000326e:	fe1a                	sd	t1,312(sp)
    80003270:	fa1e                	sd	t2,304(sp)
    80003272:	f622                	sd	s0,296(sp)
    80003274:	f22a                	sd	a0,288(sp)
    80003276:	ee2e                	sd	a1,280(sp)
    80003278:	ea32                	sd	a2,272(sp)
    8000327a:	e636                	sd	a3,264(sp)
    8000327c:	e23a                	sd	a4,256(sp)
    8000327e:	fdbe                	sd	a5,248(sp)
    80003280:	f9c2                	sd	a6,240(sp)
    80003282:	f5c6                	sd	a7,232(sp)
    80003284:	f1f2                	sd	t3,224(sp)
    80003286:	edf6                	sd	t4,216(sp)
    80003288:	e9fa                	sd	t5,208(sp)
    8000328a:	e5fe                	sd	t6,200(sp)
    8000328c:	bd02                	fsd	ft0,184(sp)
    8000328e:	b906                	fsd	ft1,176(sp)
    80003290:	b50a                	fsd	ft2,168(sp)
    80003292:	b10e                	fsd	ft3,160(sp)
    80003294:	ad12                	fsd	ft4,152(sp)
    80003296:	a916                	fsd	ft5,144(sp)
    80003298:	a51a                	fsd	ft6,136(sp)
    8000329a:	a11e                	fsd	ft7,128(sp)
    8000329c:	bcaa                	fsd	fa0,120(sp)
    8000329e:	b8ae                	fsd	fa1,112(sp)
    800032a0:	b4b2                	fsd	fa2,104(sp)
    800032a2:	b0b6                	fsd	fa3,96(sp)
    800032a4:	acba                	fsd	fa4,88(sp)
    800032a6:	a8be                	fsd	fa5,80(sp)
    800032a8:	a4c2                	fsd	fa6,72(sp)
    800032aa:	a0c6                	fsd	fa7,64(sp)
    800032ac:	bc72                	fsd	ft8,56(sp)
    800032ae:	b876                	fsd	ft9,48(sp)
    800032b0:	b47a                	fsd	ft10,40(sp)
    800032b2:	b07e                	fsd	ft11,32(sp)
    800032b4:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:260
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC9);
    800032b6:	938ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    800032ba:	87aa                	mv	a5,a0
    800032bc:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    800032c0:	078e                	slli	a5,a5,0x3
    800032c2:	97ba                	add	a5,a5,a4
    800032c4:	639c                	ld	a5,0(a5)
    800032c6:	ecf43423          	sd	a5,-312(s0)
    800032ca:	ec843783          	ld	a5,-312(s0)
    800032ce:	c78d                	beqz	a5,800032f8 <metal_lc9_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:260 (discriminator 1)
    800032d0:	ec843503          	ld	a0,-312(s0)
    800032d4:	894ff0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    800032d8:	eca43023          	sd	a0,-320(s0)
    800032dc:	ec043783          	ld	a5,-320(s0)
    800032e0:	4487b783          	ld	a5,1096(a5)
    800032e4:	eaf43c23          	sd	a5,-328(s0)
    800032e8:	ec043783          	ld	a5,-320(s0)
    800032ec:	4387b783          	ld	a5,1080(a5)
    800032f0:	eb843583          	ld	a1,-328(s0)
    800032f4:	4565                	li	a0,25
    800032f6:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:261
}
    800032f8:	0001                	nop
    800032fa:	60b6                	ld	ra,328(sp)
    800032fc:	6296                	ld	t0,320(sp)
    800032fe:	7372                	ld	t1,312(sp)
    80003300:	73d2                	ld	t2,304(sp)
    80003302:	7432                	ld	s0,296(sp)
    80003304:	7512                	ld	a0,288(sp)
    80003306:	65f2                	ld	a1,280(sp)
    80003308:	6652                	ld	a2,272(sp)
    8000330a:	66b2                	ld	a3,264(sp)
    8000330c:	6712                	ld	a4,256(sp)
    8000330e:	77ee                	ld	a5,248(sp)
    80003310:	784e                	ld	a6,240(sp)
    80003312:	78ae                	ld	a7,232(sp)
    80003314:	7e0e                	ld	t3,224(sp)
    80003316:	6eee                	ld	t4,216(sp)
    80003318:	6f4e                	ld	t5,208(sp)
    8000331a:	6fae                	ld	t6,200(sp)
    8000331c:	306a                	fld	ft0,184(sp)
    8000331e:	30ca                	fld	ft1,176(sp)
    80003320:	312a                	fld	ft2,168(sp)
    80003322:	318a                	fld	ft3,160(sp)
    80003324:	226a                	fld	ft4,152(sp)
    80003326:	22ca                	fld	ft5,144(sp)
    80003328:	232a                	fld	ft6,136(sp)
    8000332a:	238a                	fld	ft7,128(sp)
    8000332c:	3566                	fld	fa0,120(sp)
    8000332e:	35c6                	fld	fa1,112(sp)
    80003330:	3626                	fld	fa2,104(sp)
    80003332:	3686                	fld	fa3,96(sp)
    80003334:	2766                	fld	fa4,88(sp)
    80003336:	27c6                	fld	fa5,80(sp)
    80003338:	2826                	fld	fa6,72(sp)
    8000333a:	2886                	fld	fa7,64(sp)
    8000333c:	3e62                	fld	ft8,56(sp)
    8000333e:	3ec2                	fld	ft9,48(sp)
    80003340:	3f22                	fld	ft10,40(sp)
    80003342:	3f82                	fld	ft11,32(sp)
    80003344:	6171                	addi	sp,sp,336
    80003346:	30200073          	mret

000000008000334a <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:265

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc10_interrupt_vector_handler(void) {
    8000334a:	714d                	addi	sp,sp,-336
    8000334c:	e686                	sd	ra,328(sp)
    8000334e:	e296                	sd	t0,320(sp)
    80003350:	fe1a                	sd	t1,312(sp)
    80003352:	fa1e                	sd	t2,304(sp)
    80003354:	f622                	sd	s0,296(sp)
    80003356:	f22a                	sd	a0,288(sp)
    80003358:	ee2e                	sd	a1,280(sp)
    8000335a:	ea32                	sd	a2,272(sp)
    8000335c:	e636                	sd	a3,264(sp)
    8000335e:	e23a                	sd	a4,256(sp)
    80003360:	fdbe                	sd	a5,248(sp)
    80003362:	f9c2                	sd	a6,240(sp)
    80003364:	f5c6                	sd	a7,232(sp)
    80003366:	f1f2                	sd	t3,224(sp)
    80003368:	edf6                	sd	t4,216(sp)
    8000336a:	e9fa                	sd	t5,208(sp)
    8000336c:	e5fe                	sd	t6,200(sp)
    8000336e:	bd02                	fsd	ft0,184(sp)
    80003370:	b906                	fsd	ft1,176(sp)
    80003372:	b50a                	fsd	ft2,168(sp)
    80003374:	b10e                	fsd	ft3,160(sp)
    80003376:	ad12                	fsd	ft4,152(sp)
    80003378:	a916                	fsd	ft5,144(sp)
    8000337a:	a51a                	fsd	ft6,136(sp)
    8000337c:	a11e                	fsd	ft7,128(sp)
    8000337e:	bcaa                	fsd	fa0,120(sp)
    80003380:	b8ae                	fsd	fa1,112(sp)
    80003382:	b4b2                	fsd	fa2,104(sp)
    80003384:	b0b6                	fsd	fa3,96(sp)
    80003386:	acba                	fsd	fa4,88(sp)
    80003388:	a8be                	fsd	fa5,80(sp)
    8000338a:	a4c2                	fsd	fa6,72(sp)
    8000338c:	a0c6                	fsd	fa7,64(sp)
    8000338e:	bc72                	fsd	ft8,56(sp)
    80003390:	b876                	fsd	ft9,48(sp)
    80003392:	b47a                	fsd	ft10,40(sp)
    80003394:	b07e                	fsd	ft11,32(sp)
    80003396:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:266
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC10);
    80003398:	856ff0ef          	jal	ra,800023ee <__metal_myhart_id>
    8000339c:	87aa                	mv	a5,a0
    8000339e:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    800033a2:	078e                	slli	a5,a5,0x3
    800033a4:	97ba                	add	a5,a5,a4
    800033a6:	639c                	ld	a5,0(a5)
    800033a8:	ecf43423          	sd	a5,-312(s0)
    800033ac:	ec843783          	ld	a5,-312(s0)
    800033b0:	c78d                	beqz	a5,800033da <metal_lc10_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:266 (discriminator 1)
    800033b2:	ec843503          	ld	a0,-312(s0)
    800033b6:	fb3fe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    800033ba:	eca43023          	sd	a0,-320(s0)
    800033be:	ec043783          	ld	a5,-320(s0)
    800033c2:	4687b783          	ld	a5,1128(a5)
    800033c6:	eaf43c23          	sd	a5,-328(s0)
    800033ca:	ec043783          	ld	a5,-320(s0)
    800033ce:	4587b783          	ld	a5,1112(a5)
    800033d2:	eb843583          	ld	a1,-328(s0)
    800033d6:	4569                	li	a0,26
    800033d8:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:267
}
    800033da:	0001                	nop
    800033dc:	60b6                	ld	ra,328(sp)
    800033de:	6296                	ld	t0,320(sp)
    800033e0:	7372                	ld	t1,312(sp)
    800033e2:	73d2                	ld	t2,304(sp)
    800033e4:	7432                	ld	s0,296(sp)
    800033e6:	7512                	ld	a0,288(sp)
    800033e8:	65f2                	ld	a1,280(sp)
    800033ea:	6652                	ld	a2,272(sp)
    800033ec:	66b2                	ld	a3,264(sp)
    800033ee:	6712                	ld	a4,256(sp)
    800033f0:	77ee                	ld	a5,248(sp)
    800033f2:	784e                	ld	a6,240(sp)
    800033f4:	78ae                	ld	a7,232(sp)
    800033f6:	7e0e                	ld	t3,224(sp)
    800033f8:	6eee                	ld	t4,216(sp)
    800033fa:	6f4e                	ld	t5,208(sp)
    800033fc:	6fae                	ld	t6,200(sp)
    800033fe:	306a                	fld	ft0,184(sp)
    80003400:	30ca                	fld	ft1,176(sp)
    80003402:	312a                	fld	ft2,168(sp)
    80003404:	318a                	fld	ft3,160(sp)
    80003406:	226a                	fld	ft4,152(sp)
    80003408:	22ca                	fld	ft5,144(sp)
    8000340a:	232a                	fld	ft6,136(sp)
    8000340c:	238a                	fld	ft7,128(sp)
    8000340e:	3566                	fld	fa0,120(sp)
    80003410:	35c6                	fld	fa1,112(sp)
    80003412:	3626                	fld	fa2,104(sp)
    80003414:	3686                	fld	fa3,96(sp)
    80003416:	2766                	fld	fa4,88(sp)
    80003418:	27c6                	fld	fa5,80(sp)
    8000341a:	2826                	fld	fa6,72(sp)
    8000341c:	2886                	fld	fa7,64(sp)
    8000341e:	3e62                	fld	ft8,56(sp)
    80003420:	3ec2                	fld	ft9,48(sp)
    80003422:	3f22                	fld	ft10,40(sp)
    80003424:	3f82                	fld	ft11,32(sp)
    80003426:	6171                	addi	sp,sp,336
    80003428:	30200073          	mret

000000008000342c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:271

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc11_interrupt_vector_handler(void) {
    8000342c:	714d                	addi	sp,sp,-336
    8000342e:	e686                	sd	ra,328(sp)
    80003430:	e296                	sd	t0,320(sp)
    80003432:	fe1a                	sd	t1,312(sp)
    80003434:	fa1e                	sd	t2,304(sp)
    80003436:	f622                	sd	s0,296(sp)
    80003438:	f22a                	sd	a0,288(sp)
    8000343a:	ee2e                	sd	a1,280(sp)
    8000343c:	ea32                	sd	a2,272(sp)
    8000343e:	e636                	sd	a3,264(sp)
    80003440:	e23a                	sd	a4,256(sp)
    80003442:	fdbe                	sd	a5,248(sp)
    80003444:	f9c2                	sd	a6,240(sp)
    80003446:	f5c6                	sd	a7,232(sp)
    80003448:	f1f2                	sd	t3,224(sp)
    8000344a:	edf6                	sd	t4,216(sp)
    8000344c:	e9fa                	sd	t5,208(sp)
    8000344e:	e5fe                	sd	t6,200(sp)
    80003450:	bd02                	fsd	ft0,184(sp)
    80003452:	b906                	fsd	ft1,176(sp)
    80003454:	b50a                	fsd	ft2,168(sp)
    80003456:	b10e                	fsd	ft3,160(sp)
    80003458:	ad12                	fsd	ft4,152(sp)
    8000345a:	a916                	fsd	ft5,144(sp)
    8000345c:	a51a                	fsd	ft6,136(sp)
    8000345e:	a11e                	fsd	ft7,128(sp)
    80003460:	bcaa                	fsd	fa0,120(sp)
    80003462:	b8ae                	fsd	fa1,112(sp)
    80003464:	b4b2                	fsd	fa2,104(sp)
    80003466:	b0b6                	fsd	fa3,96(sp)
    80003468:	acba                	fsd	fa4,88(sp)
    8000346a:	a8be                	fsd	fa5,80(sp)
    8000346c:	a4c2                	fsd	fa6,72(sp)
    8000346e:	a0c6                	fsd	fa7,64(sp)
    80003470:	bc72                	fsd	ft8,56(sp)
    80003472:	b876                	fsd	ft9,48(sp)
    80003474:	b47a                	fsd	ft10,40(sp)
    80003476:	b07e                	fsd	ft11,32(sp)
    80003478:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:272
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC11);
    8000347a:	f75fe0ef          	jal	ra,800023ee <__metal_myhart_id>
    8000347e:	87aa                	mv	a5,a0
    80003480:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80003484:	078e                	slli	a5,a5,0x3
    80003486:	97ba                	add	a5,a5,a4
    80003488:	639c                	ld	a5,0(a5)
    8000348a:	ecf43423          	sd	a5,-312(s0)
    8000348e:	ec843783          	ld	a5,-312(s0)
    80003492:	c78d                	beqz	a5,800034bc <metal_lc11_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:272 (discriminator 1)
    80003494:	ec843503          	ld	a0,-312(s0)
    80003498:	ed1fe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    8000349c:	eca43023          	sd	a0,-320(s0)
    800034a0:	ec043783          	ld	a5,-320(s0)
    800034a4:	4887b783          	ld	a5,1160(a5)
    800034a8:	eaf43c23          	sd	a5,-328(s0)
    800034ac:	ec043783          	ld	a5,-320(s0)
    800034b0:	4787b783          	ld	a5,1144(a5)
    800034b4:	eb843583          	ld	a1,-328(s0)
    800034b8:	456d                	li	a0,27
    800034ba:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:273
}
    800034bc:	0001                	nop
    800034be:	60b6                	ld	ra,328(sp)
    800034c0:	6296                	ld	t0,320(sp)
    800034c2:	7372                	ld	t1,312(sp)
    800034c4:	73d2                	ld	t2,304(sp)
    800034c6:	7432                	ld	s0,296(sp)
    800034c8:	7512                	ld	a0,288(sp)
    800034ca:	65f2                	ld	a1,280(sp)
    800034cc:	6652                	ld	a2,272(sp)
    800034ce:	66b2                	ld	a3,264(sp)
    800034d0:	6712                	ld	a4,256(sp)
    800034d2:	77ee                	ld	a5,248(sp)
    800034d4:	784e                	ld	a6,240(sp)
    800034d6:	78ae                	ld	a7,232(sp)
    800034d8:	7e0e                	ld	t3,224(sp)
    800034da:	6eee                	ld	t4,216(sp)
    800034dc:	6f4e                	ld	t5,208(sp)
    800034de:	6fae                	ld	t6,200(sp)
    800034e0:	306a                	fld	ft0,184(sp)
    800034e2:	30ca                	fld	ft1,176(sp)
    800034e4:	312a                	fld	ft2,168(sp)
    800034e6:	318a                	fld	ft3,160(sp)
    800034e8:	226a                	fld	ft4,152(sp)
    800034ea:	22ca                	fld	ft5,144(sp)
    800034ec:	232a                	fld	ft6,136(sp)
    800034ee:	238a                	fld	ft7,128(sp)
    800034f0:	3566                	fld	fa0,120(sp)
    800034f2:	35c6                	fld	fa1,112(sp)
    800034f4:	3626                	fld	fa2,104(sp)
    800034f6:	3686                	fld	fa3,96(sp)
    800034f8:	2766                	fld	fa4,88(sp)
    800034fa:	27c6                	fld	fa5,80(sp)
    800034fc:	2826                	fld	fa6,72(sp)
    800034fe:	2886                	fld	fa7,64(sp)
    80003500:	3e62                	fld	ft8,56(sp)
    80003502:	3ec2                	fld	ft9,48(sp)
    80003504:	3f22                	fld	ft10,40(sp)
    80003506:	3f82                	fld	ft11,32(sp)
    80003508:	6171                	addi	sp,sp,336
    8000350a:	30200073          	mret

000000008000350e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:277

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc12_interrupt_vector_handler(void) {
    8000350e:	714d                	addi	sp,sp,-336
    80003510:	e686                	sd	ra,328(sp)
    80003512:	e296                	sd	t0,320(sp)
    80003514:	fe1a                	sd	t1,312(sp)
    80003516:	fa1e                	sd	t2,304(sp)
    80003518:	f622                	sd	s0,296(sp)
    8000351a:	f22a                	sd	a0,288(sp)
    8000351c:	ee2e                	sd	a1,280(sp)
    8000351e:	ea32                	sd	a2,272(sp)
    80003520:	e636                	sd	a3,264(sp)
    80003522:	e23a                	sd	a4,256(sp)
    80003524:	fdbe                	sd	a5,248(sp)
    80003526:	f9c2                	sd	a6,240(sp)
    80003528:	f5c6                	sd	a7,232(sp)
    8000352a:	f1f2                	sd	t3,224(sp)
    8000352c:	edf6                	sd	t4,216(sp)
    8000352e:	e9fa                	sd	t5,208(sp)
    80003530:	e5fe                	sd	t6,200(sp)
    80003532:	bd02                	fsd	ft0,184(sp)
    80003534:	b906                	fsd	ft1,176(sp)
    80003536:	b50a                	fsd	ft2,168(sp)
    80003538:	b10e                	fsd	ft3,160(sp)
    8000353a:	ad12                	fsd	ft4,152(sp)
    8000353c:	a916                	fsd	ft5,144(sp)
    8000353e:	a51a                	fsd	ft6,136(sp)
    80003540:	a11e                	fsd	ft7,128(sp)
    80003542:	bcaa                	fsd	fa0,120(sp)
    80003544:	b8ae                	fsd	fa1,112(sp)
    80003546:	b4b2                	fsd	fa2,104(sp)
    80003548:	b0b6                	fsd	fa3,96(sp)
    8000354a:	acba                	fsd	fa4,88(sp)
    8000354c:	a8be                	fsd	fa5,80(sp)
    8000354e:	a4c2                	fsd	fa6,72(sp)
    80003550:	a0c6                	fsd	fa7,64(sp)
    80003552:	bc72                	fsd	ft8,56(sp)
    80003554:	b876                	fsd	ft9,48(sp)
    80003556:	b47a                	fsd	ft10,40(sp)
    80003558:	b07e                	fsd	ft11,32(sp)
    8000355a:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:278
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC12);
    8000355c:	e93fe0ef          	jal	ra,800023ee <__metal_myhart_id>
    80003560:	87aa                	mv	a5,a0
    80003562:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80003566:	078e                	slli	a5,a5,0x3
    80003568:	97ba                	add	a5,a5,a4
    8000356a:	639c                	ld	a5,0(a5)
    8000356c:	ecf43423          	sd	a5,-312(s0)
    80003570:	ec843783          	ld	a5,-312(s0)
    80003574:	c78d                	beqz	a5,8000359e <metal_lc12_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:278 (discriminator 1)
    80003576:	ec843503          	ld	a0,-312(s0)
    8000357a:	deffe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    8000357e:	eca43023          	sd	a0,-320(s0)
    80003582:	ec043783          	ld	a5,-320(s0)
    80003586:	4a87b783          	ld	a5,1192(a5)
    8000358a:	eaf43c23          	sd	a5,-328(s0)
    8000358e:	ec043783          	ld	a5,-320(s0)
    80003592:	4987b783          	ld	a5,1176(a5)
    80003596:	eb843583          	ld	a1,-328(s0)
    8000359a:	4571                	li	a0,28
    8000359c:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:279
}
    8000359e:	0001                	nop
    800035a0:	60b6                	ld	ra,328(sp)
    800035a2:	6296                	ld	t0,320(sp)
    800035a4:	7372                	ld	t1,312(sp)
    800035a6:	73d2                	ld	t2,304(sp)
    800035a8:	7432                	ld	s0,296(sp)
    800035aa:	7512                	ld	a0,288(sp)
    800035ac:	65f2                	ld	a1,280(sp)
    800035ae:	6652                	ld	a2,272(sp)
    800035b0:	66b2                	ld	a3,264(sp)
    800035b2:	6712                	ld	a4,256(sp)
    800035b4:	77ee                	ld	a5,248(sp)
    800035b6:	784e                	ld	a6,240(sp)
    800035b8:	78ae                	ld	a7,232(sp)
    800035ba:	7e0e                	ld	t3,224(sp)
    800035bc:	6eee                	ld	t4,216(sp)
    800035be:	6f4e                	ld	t5,208(sp)
    800035c0:	6fae                	ld	t6,200(sp)
    800035c2:	306a                	fld	ft0,184(sp)
    800035c4:	30ca                	fld	ft1,176(sp)
    800035c6:	312a                	fld	ft2,168(sp)
    800035c8:	318a                	fld	ft3,160(sp)
    800035ca:	226a                	fld	ft4,152(sp)
    800035cc:	22ca                	fld	ft5,144(sp)
    800035ce:	232a                	fld	ft6,136(sp)
    800035d0:	238a                	fld	ft7,128(sp)
    800035d2:	3566                	fld	fa0,120(sp)
    800035d4:	35c6                	fld	fa1,112(sp)
    800035d6:	3626                	fld	fa2,104(sp)
    800035d8:	3686                	fld	fa3,96(sp)
    800035da:	2766                	fld	fa4,88(sp)
    800035dc:	27c6                	fld	fa5,80(sp)
    800035de:	2826                	fld	fa6,72(sp)
    800035e0:	2886                	fld	fa7,64(sp)
    800035e2:	3e62                	fld	ft8,56(sp)
    800035e4:	3ec2                	fld	ft9,48(sp)
    800035e6:	3f22                	fld	ft10,40(sp)
    800035e8:	3f82                	fld	ft11,32(sp)
    800035ea:	6171                	addi	sp,sp,336
    800035ec:	30200073          	mret

00000000800035f0 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:283

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc13_interrupt_vector_handler(void) {
    800035f0:	714d                	addi	sp,sp,-336
    800035f2:	e686                	sd	ra,328(sp)
    800035f4:	e296                	sd	t0,320(sp)
    800035f6:	fe1a                	sd	t1,312(sp)
    800035f8:	fa1e                	sd	t2,304(sp)
    800035fa:	f622                	sd	s0,296(sp)
    800035fc:	f22a                	sd	a0,288(sp)
    800035fe:	ee2e                	sd	a1,280(sp)
    80003600:	ea32                	sd	a2,272(sp)
    80003602:	e636                	sd	a3,264(sp)
    80003604:	e23a                	sd	a4,256(sp)
    80003606:	fdbe                	sd	a5,248(sp)
    80003608:	f9c2                	sd	a6,240(sp)
    8000360a:	f5c6                	sd	a7,232(sp)
    8000360c:	f1f2                	sd	t3,224(sp)
    8000360e:	edf6                	sd	t4,216(sp)
    80003610:	e9fa                	sd	t5,208(sp)
    80003612:	e5fe                	sd	t6,200(sp)
    80003614:	bd02                	fsd	ft0,184(sp)
    80003616:	b906                	fsd	ft1,176(sp)
    80003618:	b50a                	fsd	ft2,168(sp)
    8000361a:	b10e                	fsd	ft3,160(sp)
    8000361c:	ad12                	fsd	ft4,152(sp)
    8000361e:	a916                	fsd	ft5,144(sp)
    80003620:	a51a                	fsd	ft6,136(sp)
    80003622:	a11e                	fsd	ft7,128(sp)
    80003624:	bcaa                	fsd	fa0,120(sp)
    80003626:	b8ae                	fsd	fa1,112(sp)
    80003628:	b4b2                	fsd	fa2,104(sp)
    8000362a:	b0b6                	fsd	fa3,96(sp)
    8000362c:	acba                	fsd	fa4,88(sp)
    8000362e:	a8be                	fsd	fa5,80(sp)
    80003630:	a4c2                	fsd	fa6,72(sp)
    80003632:	a0c6                	fsd	fa7,64(sp)
    80003634:	bc72                	fsd	ft8,56(sp)
    80003636:	b876                	fsd	ft9,48(sp)
    80003638:	b47a                	fsd	ft10,40(sp)
    8000363a:	b07e                	fsd	ft11,32(sp)
    8000363c:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:284
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC13);
    8000363e:	db1fe0ef          	jal	ra,800023ee <__metal_myhart_id>
    80003642:	87aa                	mv	a5,a0
    80003644:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    80003648:	078e                	slli	a5,a5,0x3
    8000364a:	97ba                	add	a5,a5,a4
    8000364c:	639c                	ld	a5,0(a5)
    8000364e:	ecf43423          	sd	a5,-312(s0)
    80003652:	ec843783          	ld	a5,-312(s0)
    80003656:	c78d                	beqz	a5,80003680 <metal_lc13_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:284 (discriminator 1)
    80003658:	ec843503          	ld	a0,-312(s0)
    8000365c:	d0dfe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80003660:	eca43023          	sd	a0,-320(s0)
    80003664:	ec043783          	ld	a5,-320(s0)
    80003668:	4c87b783          	ld	a5,1224(a5)
    8000366c:	eaf43c23          	sd	a5,-328(s0)
    80003670:	ec043783          	ld	a5,-320(s0)
    80003674:	4b87b783          	ld	a5,1208(a5)
    80003678:	eb843583          	ld	a1,-328(s0)
    8000367c:	4575                	li	a0,29
    8000367e:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:285
}
    80003680:	0001                	nop
    80003682:	60b6                	ld	ra,328(sp)
    80003684:	6296                	ld	t0,320(sp)
    80003686:	7372                	ld	t1,312(sp)
    80003688:	73d2                	ld	t2,304(sp)
    8000368a:	7432                	ld	s0,296(sp)
    8000368c:	7512                	ld	a0,288(sp)
    8000368e:	65f2                	ld	a1,280(sp)
    80003690:	6652                	ld	a2,272(sp)
    80003692:	66b2                	ld	a3,264(sp)
    80003694:	6712                	ld	a4,256(sp)
    80003696:	77ee                	ld	a5,248(sp)
    80003698:	784e                	ld	a6,240(sp)
    8000369a:	78ae                	ld	a7,232(sp)
    8000369c:	7e0e                	ld	t3,224(sp)
    8000369e:	6eee                	ld	t4,216(sp)
    800036a0:	6f4e                	ld	t5,208(sp)
    800036a2:	6fae                	ld	t6,200(sp)
    800036a4:	306a                	fld	ft0,184(sp)
    800036a6:	30ca                	fld	ft1,176(sp)
    800036a8:	312a                	fld	ft2,168(sp)
    800036aa:	318a                	fld	ft3,160(sp)
    800036ac:	226a                	fld	ft4,152(sp)
    800036ae:	22ca                	fld	ft5,144(sp)
    800036b0:	232a                	fld	ft6,136(sp)
    800036b2:	238a                	fld	ft7,128(sp)
    800036b4:	3566                	fld	fa0,120(sp)
    800036b6:	35c6                	fld	fa1,112(sp)
    800036b8:	3626                	fld	fa2,104(sp)
    800036ba:	3686                	fld	fa3,96(sp)
    800036bc:	2766                	fld	fa4,88(sp)
    800036be:	27c6                	fld	fa5,80(sp)
    800036c0:	2826                	fld	fa6,72(sp)
    800036c2:	2886                	fld	fa7,64(sp)
    800036c4:	3e62                	fld	ft8,56(sp)
    800036c6:	3ec2                	fld	ft9,48(sp)
    800036c8:	3f22                	fld	ft10,40(sp)
    800036ca:	3f82                	fld	ft11,32(sp)
    800036cc:	6171                	addi	sp,sp,336
    800036ce:	30200073          	mret

00000000800036d2 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc14_interrupt_vector_handler(void) {
    800036d2:	714d                	addi	sp,sp,-336
    800036d4:	e686                	sd	ra,328(sp)
    800036d6:	e296                	sd	t0,320(sp)
    800036d8:	fe1a                	sd	t1,312(sp)
    800036da:	fa1e                	sd	t2,304(sp)
    800036dc:	f622                	sd	s0,296(sp)
    800036de:	f22a                	sd	a0,288(sp)
    800036e0:	ee2e                	sd	a1,280(sp)
    800036e2:	ea32                	sd	a2,272(sp)
    800036e4:	e636                	sd	a3,264(sp)
    800036e6:	e23a                	sd	a4,256(sp)
    800036e8:	fdbe                	sd	a5,248(sp)
    800036ea:	f9c2                	sd	a6,240(sp)
    800036ec:	f5c6                	sd	a7,232(sp)
    800036ee:	f1f2                	sd	t3,224(sp)
    800036f0:	edf6                	sd	t4,216(sp)
    800036f2:	e9fa                	sd	t5,208(sp)
    800036f4:	e5fe                	sd	t6,200(sp)
    800036f6:	bd02                	fsd	ft0,184(sp)
    800036f8:	b906                	fsd	ft1,176(sp)
    800036fa:	b50a                	fsd	ft2,168(sp)
    800036fc:	b10e                	fsd	ft3,160(sp)
    800036fe:	ad12                	fsd	ft4,152(sp)
    80003700:	a916                	fsd	ft5,144(sp)
    80003702:	a51a                	fsd	ft6,136(sp)
    80003704:	a11e                	fsd	ft7,128(sp)
    80003706:	bcaa                	fsd	fa0,120(sp)
    80003708:	b8ae                	fsd	fa1,112(sp)
    8000370a:	b4b2                	fsd	fa2,104(sp)
    8000370c:	b0b6                	fsd	fa3,96(sp)
    8000370e:	acba                	fsd	fa4,88(sp)
    80003710:	a8be                	fsd	fa5,80(sp)
    80003712:	a4c2                	fsd	fa6,72(sp)
    80003714:	a0c6                	fsd	fa7,64(sp)
    80003716:	bc72                	fsd	ft8,56(sp)
    80003718:	b876                	fsd	ft9,48(sp)
    8000371a:	b47a                	fsd	ft10,40(sp)
    8000371c:	b07e                	fsd	ft11,32(sp)
    8000371e:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:290
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC14);
    80003720:	ccffe0ef          	jal	ra,800023ee <__metal_myhart_id>
    80003724:	87aa                	mv	a5,a0
    80003726:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    8000372a:	078e                	slli	a5,a5,0x3
    8000372c:	97ba                	add	a5,a5,a4
    8000372e:	639c                	ld	a5,0(a5)
    80003730:	ecf43423          	sd	a5,-312(s0)
    80003734:	ec843783          	ld	a5,-312(s0)
    80003738:	c78d                	beqz	a5,80003762 <metal_lc14_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:290 (discriminator 1)
    8000373a:	ec843503          	ld	a0,-312(s0)
    8000373e:	c2bfe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80003742:	eca43023          	sd	a0,-320(s0)
    80003746:	ec043783          	ld	a5,-320(s0)
    8000374a:	4e87b783          	ld	a5,1256(a5)
    8000374e:	eaf43c23          	sd	a5,-328(s0)
    80003752:	ec043783          	ld	a5,-320(s0)
    80003756:	4d87b783          	ld	a5,1240(a5)
    8000375a:	eb843583          	ld	a1,-328(s0)
    8000375e:	4579                	li	a0,30
    80003760:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:291
}
    80003762:	0001                	nop
    80003764:	60b6                	ld	ra,328(sp)
    80003766:	6296                	ld	t0,320(sp)
    80003768:	7372                	ld	t1,312(sp)
    8000376a:	73d2                	ld	t2,304(sp)
    8000376c:	7432                	ld	s0,296(sp)
    8000376e:	7512                	ld	a0,288(sp)
    80003770:	65f2                	ld	a1,280(sp)
    80003772:	6652                	ld	a2,272(sp)
    80003774:	66b2                	ld	a3,264(sp)
    80003776:	6712                	ld	a4,256(sp)
    80003778:	77ee                	ld	a5,248(sp)
    8000377a:	784e                	ld	a6,240(sp)
    8000377c:	78ae                	ld	a7,232(sp)
    8000377e:	7e0e                	ld	t3,224(sp)
    80003780:	6eee                	ld	t4,216(sp)
    80003782:	6f4e                	ld	t5,208(sp)
    80003784:	6fae                	ld	t6,200(sp)
    80003786:	306a                	fld	ft0,184(sp)
    80003788:	30ca                	fld	ft1,176(sp)
    8000378a:	312a                	fld	ft2,168(sp)
    8000378c:	318a                	fld	ft3,160(sp)
    8000378e:	226a                	fld	ft4,152(sp)
    80003790:	22ca                	fld	ft5,144(sp)
    80003792:	232a                	fld	ft6,136(sp)
    80003794:	238a                	fld	ft7,128(sp)
    80003796:	3566                	fld	fa0,120(sp)
    80003798:	35c6                	fld	fa1,112(sp)
    8000379a:	3626                	fld	fa2,104(sp)
    8000379c:	3686                	fld	fa3,96(sp)
    8000379e:	2766                	fld	fa4,88(sp)
    800037a0:	27c6                	fld	fa5,80(sp)
    800037a2:	2826                	fld	fa6,72(sp)
    800037a4:	2886                	fld	fa7,64(sp)
    800037a6:	3e62                	fld	ft8,56(sp)
    800037a8:	3ec2                	fld	ft9,48(sp)
    800037aa:	3f22                	fld	ft10,40(sp)
    800037ac:	3f82                	fld	ft11,32(sp)
    800037ae:	6171                	addi	sp,sp,336
    800037b0:	30200073          	mret

00000000800037b4 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:295

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc15_interrupt_vector_handler(void) {
    800037b4:	714d                	addi	sp,sp,-336
    800037b6:	e686                	sd	ra,328(sp)
    800037b8:	e296                	sd	t0,320(sp)
    800037ba:	fe1a                	sd	t1,312(sp)
    800037bc:	fa1e                	sd	t2,304(sp)
    800037be:	f622                	sd	s0,296(sp)
    800037c0:	f22a                	sd	a0,288(sp)
    800037c2:	ee2e                	sd	a1,280(sp)
    800037c4:	ea32                	sd	a2,272(sp)
    800037c6:	e636                	sd	a3,264(sp)
    800037c8:	e23a                	sd	a4,256(sp)
    800037ca:	fdbe                	sd	a5,248(sp)
    800037cc:	f9c2                	sd	a6,240(sp)
    800037ce:	f5c6                	sd	a7,232(sp)
    800037d0:	f1f2                	sd	t3,224(sp)
    800037d2:	edf6                	sd	t4,216(sp)
    800037d4:	e9fa                	sd	t5,208(sp)
    800037d6:	e5fe                	sd	t6,200(sp)
    800037d8:	bd02                	fsd	ft0,184(sp)
    800037da:	b906                	fsd	ft1,176(sp)
    800037dc:	b50a                	fsd	ft2,168(sp)
    800037de:	b10e                	fsd	ft3,160(sp)
    800037e0:	ad12                	fsd	ft4,152(sp)
    800037e2:	a916                	fsd	ft5,144(sp)
    800037e4:	a51a                	fsd	ft6,136(sp)
    800037e6:	a11e                	fsd	ft7,128(sp)
    800037e8:	bcaa                	fsd	fa0,120(sp)
    800037ea:	b8ae                	fsd	fa1,112(sp)
    800037ec:	b4b2                	fsd	fa2,104(sp)
    800037ee:	b0b6                	fsd	fa3,96(sp)
    800037f0:	acba                	fsd	fa4,88(sp)
    800037f2:	a8be                	fsd	fa5,80(sp)
    800037f4:	a4c2                	fsd	fa6,72(sp)
    800037f6:	a0c6                	fsd	fa7,64(sp)
    800037f8:	bc72                	fsd	ft8,56(sp)
    800037fa:	b876                	fsd	ft9,48(sp)
    800037fc:	b47a                	fsd	ft10,40(sp)
    800037fe:	b07e                	fsd	ft11,32(sp)
    80003800:	0a80                	addi	s0,sp,336
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:296
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC15);
    80003802:	bedfe0ef          	jal	ra,800023ee <__metal_myhart_id>
    80003806:	87aa                	mv	a5,a0
    80003808:	82018713          	addi	a4,gp,-2016 # 80006bc8 <__metal_cpu_table>
    8000380c:	078e                	slli	a5,a5,0x3
    8000380e:	97ba                	add	a5,a5,a4
    80003810:	639c                	ld	a5,0(a5)
    80003812:	ecf43423          	sd	a5,-312(s0)
    80003816:	ec843783          	ld	a5,-312(s0)
    8000381a:	c78d                	beqz	a5,80003844 <metal_lc15_interrupt_vector_handler+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:296 (discriminator 1)
    8000381c:	ec843503          	ld	a0,-312(s0)
    80003820:	b49fe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80003824:	eca43023          	sd	a0,-320(s0)
    80003828:	ec043783          	ld	a5,-320(s0)
    8000382c:	5087b783          	ld	a5,1288(a5)
    80003830:	eaf43c23          	sd	a5,-328(s0)
    80003834:	ec043783          	ld	a5,-320(s0)
    80003838:	4f87b783          	ld	a5,1272(a5)
    8000383c:	eb843583          	ld	a1,-328(s0)
    80003840:	457d                	li	a0,31
    80003842:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:297
}
    80003844:	0001                	nop
    80003846:	60b6                	ld	ra,328(sp)
    80003848:	6296                	ld	t0,320(sp)
    8000384a:	7372                	ld	t1,312(sp)
    8000384c:	73d2                	ld	t2,304(sp)
    8000384e:	7432                	ld	s0,296(sp)
    80003850:	7512                	ld	a0,288(sp)
    80003852:	65f2                	ld	a1,280(sp)
    80003854:	6652                	ld	a2,272(sp)
    80003856:	66b2                	ld	a3,264(sp)
    80003858:	6712                	ld	a4,256(sp)
    8000385a:	77ee                	ld	a5,248(sp)
    8000385c:	784e                	ld	a6,240(sp)
    8000385e:	78ae                	ld	a7,232(sp)
    80003860:	7e0e                	ld	t3,224(sp)
    80003862:	6eee                	ld	t4,216(sp)
    80003864:	6f4e                	ld	t5,208(sp)
    80003866:	6fae                	ld	t6,200(sp)
    80003868:	306a                	fld	ft0,184(sp)
    8000386a:	30ca                	fld	ft1,176(sp)
    8000386c:	312a                	fld	ft2,168(sp)
    8000386e:	318a                	fld	ft3,160(sp)
    80003870:	226a                	fld	ft4,152(sp)
    80003872:	22ca                	fld	ft5,144(sp)
    80003874:	232a                	fld	ft6,136(sp)
    80003876:	238a                	fld	ft7,128(sp)
    80003878:	3566                	fld	fa0,120(sp)
    8000387a:	35c6                	fld	fa1,112(sp)
    8000387c:	3626                	fld	fa2,104(sp)
    8000387e:	3686                	fld	fa3,96(sp)
    80003880:	2766                	fld	fa4,88(sp)
    80003882:	27c6                	fld	fa5,80(sp)
    80003884:	2826                	fld	fa6,72(sp)
    80003886:	2886                	fld	fa7,64(sp)
    80003888:	3e62                	fld	ft8,56(sp)
    8000388a:	3ec2                	fld	ft9,48(sp)
    8000388c:	3f22                	fld	ft10,40(sp)
    8000388e:	3f82                	fld	ft11,32(sp)
    80003890:	6171                	addi	sp,sp,336
    80003892:	30200073          	mret

0000000080003896 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:299

metal_vector_mode __metal_controller_interrupt_vector_mode(void) {
    80003896:	1101                	addi	sp,sp,-32
    80003898:	ec22                	sd	s0,24(sp)
    8000389a:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:302
    uintptr_t val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
    8000389c:	305027f3          	csrr	a5,mtvec
    800038a0:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:303
    val &= METAL_MTVEC_MASK;
    800038a4:	fe843783          	ld	a5,-24(s0)
    800038a8:	03f7f793          	andi	a5,a5,63
    800038ac:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:305

    switch (val) {
    800038b0:	fe843703          	ld	a4,-24(s0)
    800038b4:	4789                	li	a5,2
    800038b6:	00f70d63          	beq	a4,a5,800038d0 <__metal_controller_interrupt_vector_mode+0x3a>
    800038ba:	fe843703          	ld	a4,-24(s0)
    800038be:	478d                	li	a5,3
    800038c0:	00f70a63          	beq	a4,a5,800038d4 <__metal_controller_interrupt_vector_mode+0x3e>
    800038c4:	fe843703          	ld	a4,-24(s0)
    800038c8:	4785                	li	a5,1
    800038ca:	00f70763          	beq	a4,a5,800038d8 <__metal_controller_interrupt_vector_mode+0x42>
    800038ce:	a039                	j	800038dc <__metal_controller_interrupt_vector_mode+0x46>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:307
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
    800038d0:	478d                	li	a5,3
    800038d2:	a031                	j	800038de <__metal_controller_interrupt_vector_mode+0x48>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:309
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
    800038d4:	4791                	li	a5,4
    800038d6:	a021                	j	800038de <__metal_controller_interrupt_vector_mode+0x48>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:311
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
    800038d8:	4785                	li	a5,1
    800038da:	a011                	j	800038de <__metal_controller_interrupt_vector_mode+0x48>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:313
    }
    return METAL_DIRECT_MODE;
    800038dc:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:314
}
    800038de:	853e                	mv	a0,a5
    800038e0:	6462                	ld	s0,24(sp)
    800038e2:	6105                	addi	sp,sp,32
    800038e4:	8082                	ret

00000000800038e6 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:317

void __metal_controller_interrupt_vector(metal_vector_mode mode,
                                         void *vec_table) {
    800038e6:	7179                	addi	sp,sp,-48
    800038e8:	f422                	sd	s0,40(sp)
    800038ea:	1800                	addi	s0,sp,48
    800038ec:	87aa                	mv	a5,a0
    800038ee:	fcb43823          	sd	a1,-48(s0)
    800038f2:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:320
    uintptr_t trap_entry, val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
    800038f6:	305027f3          	csrr	a5,mtvec
    800038fa:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:321
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
    800038fe:	fe843783          	ld	a5,-24(s0)
    80003902:	fc07f793          	andi	a5,a5,-64
    80003906:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:322
    trap_entry = (uintptr_t)vec_table;
    8000390a:	fd043783          	ld	a5,-48(s0)
    8000390e:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:324

    switch (mode) {
    80003912:	fdc42783          	lw	a5,-36(s0)
    80003916:	0007871b          	sext.w	a4,a5
    8000391a:	4791                	li	a5,4
    8000391c:	06e7e763          	bltu	a5,a4,8000398a <__metal_controller_interrupt_vector+0xa4>
    80003920:	fdc46783          	lwu	a5,-36(s0)
    80003924:	00279713          	slli	a4,a5,0x2
    80003928:	ffffd797          	auipc	a5,0xffffd
    8000392c:	c6878793          	addi	a5,a5,-920 # 80000590 <__metal_driver_vtable_riscv_clint0+0xc8>
    80003930:	97ba                	add	a5,a5,a4
    80003932:	439c                	lw	a5,0(a5)
    80003934:	0007871b          	sext.w	a4,a5
    80003938:	ffffd797          	auipc	a5,0xffffd
    8000393c:	c5878793          	addi	a5,a5,-936 # 80000590 <__metal_driver_vtable_riscv_clint0+0xc8>
    80003940:	97ba                	add	a5,a5,a4
    80003942:	8782                	jr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:327
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
    80003944:	fe043783          	ld	a5,-32(s0)
    80003948:	30779073          	csrw	mtvt,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:328
        __asm__ volatile("csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC));
    8000394c:	fe843783          	ld	a5,-24(s0)
    80003950:	0027e793          	ori	a5,a5,2
    80003954:	30579073          	csrw	mtvec,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:329
        break;
    80003958:	a80d                	j	8000398a <__metal_controller_interrupt_vector+0xa4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:331
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
    8000395a:	fe043783          	ld	a5,-32(s0)
    8000395e:	30779073          	csrw	mtvt,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:333
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC_VECTORED));
    80003962:	fe843783          	ld	a5,-24(s0)
    80003966:	0037e793          	ori	a5,a5,3
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:332
        __asm__ volatile(
    8000396a:	30579073          	csrw	mtvec,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:334
        break;
    8000396e:	a831                	j	8000398a <__metal_controller_interrupt_vector+0xa4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:337
    case METAL_VECTOR_MODE:
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(trap_entry | METAL_MTVEC_VECTORED));
    80003970:	fe043783          	ld	a5,-32(s0)
    80003974:	0017e793          	ori	a5,a5,1
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:336
        __asm__ volatile(
    80003978:	30579073          	csrw	mtvec,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:338
        break;
    8000397c:	a039                	j	8000398a <__metal_controller_interrupt_vector+0xa4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:341
    case METAL_DIRECT_MODE:
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
    8000397e:	fe043783          	ld	a5,-32(s0)
    80003982:	9bf1                	andi	a5,a5,-4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:340
        __asm__ volatile(
    80003984:	30579073          	csrw	mtvec,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:342
        break;
    80003988:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:344
    }
}
    8000398a:	0001                	nop
    8000398c:	7422                	ld	s0,40(sp)
    8000398e:	6145                	addi	sp,sp,48
    80003990:	8082                	ret

0000000080003992 <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:346

int __metal_valid_interrupt_id(int id) {
    80003992:	1101                	addi	sp,sp,-32
    80003994:	ec22                	sd	s0,24(sp)
    80003996:	1000                	addi	s0,sp,32
    80003998:	87aa                	mv	a5,a0
    8000399a:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
    8000399e:	fec42783          	lw	a5,-20(s0)
    800039a2:	0007871b          	sext.w	a4,a5
    800039a6:	47ad                	li	a5,11
    800039a8:	04f70e63          	beq	a4,a5,80003a04 <__metal_valid_interrupt_id+0x72>
    800039ac:	fec42783          	lw	a5,-20(s0)
    800039b0:	0007871b          	sext.w	a4,a5
    800039b4:	47ad                	li	a5,11
    800039b6:	02e7c163          	blt	a5,a4,800039d8 <__metal_valid_interrupt_id+0x46>
    800039ba:	fec42783          	lw	a5,-20(s0)
    800039be:	0007871b          	sext.w	a4,a5
    800039c2:	478d                	li	a5,3
    800039c4:	04f70063          	beq	a4,a5,80003a04 <__metal_valid_interrupt_id+0x72>
    800039c8:	fec42783          	lw	a5,-20(s0)
    800039cc:	0007871b          	sext.w	a4,a5
    800039d0:	479d                	li	a5,7
    800039d2:	02f70963          	beq	a4,a5,80003a04 <__metal_valid_interrupt_id+0x72>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:370
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
    case METAL_INTERRUPT_ID_BEU:
        return 1;
    default:
        break;
    800039d6:	a80d                	j	80003a08 <__metal_valid_interrupt_id+0x76>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
    800039d8:	fec42783          	lw	a5,-20(s0)
    800039dc:	0007871b          	sext.w	a4,a5
    800039e0:	47c1                	li	a5,16
    800039e2:	02f74363          	blt	a4,a5,80003a08 <__metal_valid_interrupt_id+0x76>
    800039e6:	fec42783          	lw	a5,-20(s0)
    800039ea:	0007871b          	sext.w	a4,a5
    800039ee:	47fd                	li	a5,31
    800039f0:	00e7da63          	bge	a5,a4,80003a04 <__metal_valid_interrupt_id+0x72>
    800039f4:	fec42783          	lw	a5,-20(s0)
    800039f8:	0007871b          	sext.w	a4,a5
    800039fc:	08000793          	li	a5,128
    80003a00:	00f71463          	bne	a4,a5,80003a08 <__metal_valid_interrupt_id+0x76>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:368
        return 1;
    80003a04:	4785                	li	a5,1
    80003a06:	a019                	j	80003a0c <__metal_valid_interrupt_id+0x7a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:370
        break;
    80003a08:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:373
    }

    return 0;
    80003a0a:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:374
}
    80003a0c:	853e                	mv	a0,a5
    80003a0e:	6462                	ld	s0,24(sp)
    80003a10:	6105                	addi	sp,sp,32
    80003a12:	8082                	ret

0000000080003a14 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:377

int __metal_local_interrupt_enable(struct metal_interrupt *controller,
                                   metal_interrupt_id_e id, int enable) {
    80003a14:	7179                	addi	sp,sp,-48
    80003a16:	f406                	sd	ra,40(sp)
    80003a18:	f022                	sd	s0,32(sp)
    80003a1a:	1800                	addi	s0,sp,48
    80003a1c:	fca43c23          	sd	a0,-40(s0)
    80003a20:	87ae                	mv	a5,a1
    80003a22:	8732                	mv	a4,a2
    80003a24:	fcf42a23          	sw	a5,-44(s0)
    80003a28:	87ba                	mv	a5,a4
    80003a2a:	fcf42823          	sw	a5,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:378
    int rc = 0;
    80003a2e:	fe042623          	sw	zero,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:380

    if (!controller) {
    80003a32:	fd843783          	ld	a5,-40(s0)
    80003a36:	e399                	bnez	a5,80003a3c <__metal_local_interrupt_enable+0x28>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:381
        return -1;
    80003a38:	57fd                	li	a5,-1
    80003a3a:	a07d                	j	80003ae8 <__metal_local_interrupt_enable+0xd4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:384
    }

    switch (id) {
    80003a3c:	fd442783          	lw	a5,-44(s0)
    80003a40:	0007871b          	sext.w	a4,a5
    80003a44:	47fd                	li	a5,31
    80003a46:	08e7ec63          	bltu	a5,a4,80003ade <__metal_local_interrupt_enable+0xca>
    80003a4a:	fd446783          	lwu	a5,-44(s0)
    80003a4e:	00279713          	slli	a4,a5,0x2
    80003a52:	ffffd797          	auipc	a5,0xffffd
    80003a56:	b5278793          	addi	a5,a5,-1198 # 800005a4 <__metal_driver_vtable_riscv_clint0+0xdc>
    80003a5a:	97ba                	add	a5,a5,a4
    80003a5c:	439c                	lw	a5,0(a5)
    80003a5e:	0007871b          	sext.w	a4,a5
    80003a62:	ffffd797          	auipc	a5,0xffffd
    80003a66:	b4278793          	addi	a5,a5,-1214 # 800005a4 <__metal_driver_vtable_riscv_clint0+0xdc>
    80003a6a:	97ba                	add	a5,a5,a4
    80003a6c:	8782                	jr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:386
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
    80003a6e:	fd042783          	lw	a5,-48(s0)
    80003a72:	2781                	sext.w	a5,a5
    80003a74:	c781                	beqz	a5,80003a7c <__metal_local_interrupt_enable+0x68>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:387
            __metal_interrupt_global_enable();
    80003a76:	993fe0ef          	jal	ra,80002408 <__metal_interrupt_global_enable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:391
        } else {
            __metal_interrupt_global_disable();
        }
        break;
    80003a7a:	a0ad                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:389
            __metal_interrupt_global_disable();
    80003a7c:	9a5fe0ef          	jal	ra,80002420 <__metal_interrupt_global_disable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:391
        break;
    80003a80:	a095                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:393
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
    80003a82:	fd042783          	lw	a5,-48(s0)
    80003a86:	2781                	sext.w	a5,a5
    80003a88:	c781                	beqz	a5,80003a90 <__metal_local_interrupt_enable+0x7c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:394
            __metal_interrupt_software_enable();
    80003a8a:	9affe0ef          	jal	ra,80002438 <__metal_interrupt_software_enable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:398
        } else {
            __metal_interrupt_software_disable();
        }
        break;
    80003a8e:	a899                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:396
            __metal_interrupt_software_disable();
    80003a90:	9c1fe0ef          	jal	ra,80002450 <__metal_interrupt_software_disable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:398
        break;
    80003a94:	a881                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:400
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
    80003a96:	fd042783          	lw	a5,-48(s0)
    80003a9a:	2781                	sext.w	a5,a5
    80003a9c:	c781                	beqz	a5,80003aa4 <__metal_local_interrupt_enable+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:401
            __metal_interrupt_timer_enable();
    80003a9e:	9cbfe0ef          	jal	ra,80002468 <__metal_interrupt_timer_enable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:405
        } else {
            __metal_interrupt_timer_disable();
        }
        break;
    80003aa2:	a089                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:403
            __metal_interrupt_timer_disable();
    80003aa4:	9dffe0ef          	jal	ra,80002482 <__metal_interrupt_timer_disable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:405
        break;
    80003aa8:	a835                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:407
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
    80003aaa:	fd042783          	lw	a5,-48(s0)
    80003aae:	2781                	sext.w	a5,a5
    80003ab0:	c781                	beqz	a5,80003ab8 <__metal_local_interrupt_enable+0xa4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:408
            __metal_interrupt_external_enable();
    80003ab2:	9ebfe0ef          	jal	ra,8000249c <__metal_interrupt_external_enable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:412
        } else {
            __metal_interrupt_external_disable();
        }
        break;
    80003ab6:	a03d                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:410
            __metal_interrupt_external_disable();
    80003ab8:	a01fe0ef          	jal	ra,800024b8 <__metal_interrupt_external_disable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:412
        break;
    80003abc:	a025                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:429
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
    80003abe:	fd042783          	lw	a5,-48(s0)
    80003ac2:	2781                	sext.w	a5,a5
    80003ac4:	c799                	beqz	a5,80003ad2 <__metal_local_interrupt_enable+0xbe>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:430
            __metal_interrupt_local_enable(id);
    80003ac6:	fd442783          	lw	a5,-44(s0)
    80003aca:	853e                	mv	a0,a5
    80003acc:	a09fe0ef          	jal	ra,800024d4 <__metal_interrupt_local_enable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:434
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
    80003ad0:	a811                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:432
            __metal_interrupt_local_disable(id);
    80003ad2:	fd442783          	lw	a5,-44(s0)
    80003ad6:	853e                	mv	a0,a5
    80003ad8:	a2dfe0ef          	jal	ra,80002504 <__metal_interrupt_local_disable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:434
        break;
    80003adc:	a021                	j	80003ae4 <__metal_local_interrupt_enable+0xd0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:436
    default:
        rc = -1;
    80003ade:	57fd                	li	a5,-1
    80003ae0:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:438
    }
    return rc;
    80003ae4:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:439
}
    80003ae8:	853e                	mv	a0,a5
    80003aea:	70a2                	ld	ra,40(sp)
    80003aec:	7402                	ld	s0,32(sp)
    80003aee:	6145                	addi	sp,sp,48
    80003af0:	8082                	ret

0000000080003af2 <__metal_exception_register>:
__metal_exception_register():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:442

int __metal_exception_register(struct metal_interrupt *controller, int ecode,
                               metal_exception_handler_t isr) {
    80003af2:	7139                	addi	sp,sp,-64
    80003af4:	fc22                	sd	s0,56(sp)
    80003af6:	0080                	addi	s0,sp,64
    80003af8:	fca43c23          	sd	a0,-40(s0)
    80003afc:	87ae                	mv	a5,a1
    80003afe:	fcc43423          	sd	a2,-56(s0)
    80003b02:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:443
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    80003b06:	fd843783          	ld	a5,-40(s0)
    80003b0a:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:445

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
    80003b0e:	fd442783          	lw	a5,-44(s0)
    80003b12:	0007871b          	sext.w	a4,a5
    80003b16:	47ad                	li	a5,11
    80003b18:	02e7c263          	blt	a5,a4,80003b3c <__metal_exception_register+0x4a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:445 (discriminator 1)
    80003b1c:	fc843783          	ld	a5,-56(s0)
    80003b20:	cf91                	beqz	a5,80003b3c <__metal_exception_register+0x4a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:446
        intc->metal_exception_table[ecode] = isr;
    80003b22:	fe843703          	ld	a4,-24(s0)
    80003b26:	fd442783          	lw	a5,-44(s0)
    80003b2a:	0a678793          	addi	a5,a5,166
    80003b2e:	078e                	slli	a5,a5,0x3
    80003b30:	97ba                	add	a5,a5,a4
    80003b32:	fc843703          	ld	a4,-56(s0)
    80003b36:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:447
        return 0;
    80003b38:	4781                	li	a5,0
    80003b3a:	a011                	j	80003b3e <__metal_exception_register+0x4c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:449
    }
    return -1;
    80003b3c:	57fd                	li	a5,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:450
}
    80003b3e:	853e                	mv	a0,a5
    80003b40:	7462                	ld	s0,56(sp)
    80003b42:	6121                	addi	sp,sp,64
    80003b44:	8082                	ret

0000000080003b46 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:454

extern void early_trap_vector(void);
void __metal_driver_riscv_cpu_controller_interrupt_init(
    struct metal_interrupt *controller) {
    80003b46:	7139                	addi	sp,sp,-64
    80003b48:	fc06                	sd	ra,56(sp)
    80003b4a:	f822                	sd	s0,48(sp)
    80003b4c:	0080                	addi	s0,sp,64
    80003b4e:	fca43423          	sd	a0,-56(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:455
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    80003b52:	fc843783          	ld	a5,-56(s0)
    80003b56:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:457

    if (!intc->init_done) {
    80003b5a:	fe043783          	ld	a5,-32(s0)
    80003b5e:	479c                	lw	a5,8(a5)
    80003b60:	efcd                	bnez	a5,80003c1a <__metal_driver_riscv_cpu_controller_interrupt_init+0xd4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:459
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
    80003b62:	fe042623          	sw	zero,-20(s0)
    80003b66:	a081                	j	80003ba6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x60>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:460 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
    80003b68:	fe043703          	ld	a4,-32(s0)
    80003b6c:	fec42783          	lw	a5,-20(s0)
    80003b70:	0796                	slli	a5,a5,0x5
    80003b72:	97ba                	add	a5,a5,a4
    80003b74:	1007bc23          	sd	zero,280(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:461 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
    80003b78:	fe043703          	ld	a4,-32(s0)
    80003b7c:	fec42783          	lw	a5,-20(s0)
    80003b80:	07a5                	addi	a5,a5,9
    80003b82:	0796                	slli	a5,a5,0x5
    80003b84:	97ba                	add	a5,a5,a4
    80003b86:	0007b023          	sd	zero,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:462 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
    80003b8a:	fe043703          	ld	a4,-32(s0)
    80003b8e:	fec42783          	lw	a5,-20(s0)
    80003b92:	07a5                	addi	a5,a5,9
    80003b94:	0796                	slli	a5,a5,0x5
    80003b96:	97ba                	add	a5,a5,a4
    80003b98:	0007b423          	sd	zero,8(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:459 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
    80003b9c:	fec42783          	lw	a5,-20(s0)
    80003ba0:	2785                	addiw	a5,a5,1
    80003ba2:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:459 (discriminator 1)
    80003ba6:	fec42783          	lw	a5,-20(s0)
    80003baa:	0007871b          	sext.w	a4,a5
    80003bae:	47fd                	li	a5,31
    80003bb0:	fae7dce3          	bge	a5,a4,80003b68 <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:465
        }

        for (int i = 0; i < METAL_MAX_ME; i++) {
    80003bb4:	fe042423          	sw	zero,-24(s0)
    80003bb8:	a01d                	j	80003bde <__metal_driver_riscv_cpu_controller_interrupt_init+0x98>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:466 (discriminator 3)
            intc->metal_exception_table[i] = __metal_default_exception_handler;
    80003bba:	fe043703          	ld	a4,-32(s0)
    80003bbe:	fe842783          	lw	a5,-24(s0)
    80003bc2:	0a678793          	addi	a5,a5,166
    80003bc6:	078e                	slli	a5,a5,0x3
    80003bc8:	97ba                	add	a5,a5,a4
    80003bca:	fffff717          	auipc	a4,0xfffff
    80003bce:	96a70713          	addi	a4,a4,-1686 # 80002534 <__metal_default_exception_handler>
    80003bd2:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:465 (discriminator 3)
        for (int i = 0; i < METAL_MAX_ME; i++) {
    80003bd4:	fe842783          	lw	a5,-24(s0)
    80003bd8:	2785                	addiw	a5,a5,1
    80003bda:	fef42423          	sw	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:465 (discriminator 1)
    80003bde:	fe842783          	lw	a5,-24(s0)
    80003be2:	0007871b          	sext.w	a4,a5
    80003be6:	47ad                	li	a5,11
    80003be8:	fce7d9e3          	bge	a5,a4,80003bba <__metal_driver_riscv_cpu_controller_interrupt_init+0x74>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:475
         * Set the real trap handler if the value of mtvec is equal to
         * early_trap_vector. If mtvec is not equal to early_trap_vector,
         * that means user has own trap handler, then we don't overwrite it.
         */
        uintptr_t mtvec;
        __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
    80003bec:	305027f3          	csrr	a5,mtvec
    80003bf0:	fcf43c23          	sd	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:476
        if (mtvec == (uintptr_t)&early_trap_vector) {
    80003bf4:	ffffc797          	auipc	a5,0xffffc
    80003bf8:	59478793          	addi	a5,a5,1428 # 80000188 <early_trap_vector>
    80003bfc:	fd843703          	ld	a4,-40(s0)
    80003c00:	00f71963          	bne	a4,a5,80003c12 <__metal_driver_riscv_cpu_controller_interrupt_init+0xcc>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:477
            __metal_controller_interrupt_vector(
    80003c04:	fffff597          	auipc	a1,0xfffff
    80003c08:	c7c58593          	addi	a1,a1,-900 # 80002880 <__metal_exception_handler>
    80003c0c:	4501                	li	a0,0
    80003c0e:	cd9ff0ef          	jal	ra,800038e6 <__metal_controller_interrupt_vector>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:481
                METAL_DIRECT_MODE,
                (void *)(uintptr_t)&__metal_exception_handler);
        }
        intc->init_done = 1;
    80003c12:	fe043783          	ld	a5,-32(s0)
    80003c16:	4705                	li	a4,1
    80003c18:	c798                	sw	a4,8(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:483
    }
}
    80003c1a:	0001                	nop
    80003c1c:	70e2                	ld	ra,56(sp)
    80003c1e:	7442                	ld	s0,48(sp)
    80003c20:	6121                	addi	sp,sp,64
    80003c22:	8082                	ret

0000000080003c24 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:487

int __metal_driver_riscv_cpu_controller_interrupt_register(
    struct metal_interrupt *controller, int id, metal_interrupt_handler_t isr,
    void *priv) {
    80003c24:	7139                	addi	sp,sp,-64
    80003c26:	fc06                	sd	ra,56(sp)
    80003c28:	f822                	sd	s0,48(sp)
    80003c2a:	0080                	addi	s0,sp,64
    80003c2c:	fca43c23          	sd	a0,-40(s0)
    80003c30:	87ae                	mv	a5,a1
    80003c32:	fcc43423          	sd	a2,-56(s0)
    80003c36:	fcd43023          	sd	a3,-64(s0)
    80003c3a:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:488
    int rc = 0;
    80003c3e:	fe042623          	sw	zero,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:489
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    80003c42:	fd843783          	ld	a5,-40(s0)
    80003c46:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:491

    if (!__metal_valid_interrupt_id(id)) {
    80003c4a:	fd442783          	lw	a5,-44(s0)
    80003c4e:	853e                	mv	a0,a5
    80003c50:	d43ff0ef          	jal	ra,80003992 <__metal_valid_interrupt_id>
    80003c54:	87aa                	mv	a5,a0
    80003c56:	e399                	bnez	a5,80003c5c <__metal_driver_riscv_cpu_controller_interrupt_register+0x38>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:492
        return -11;
    80003c58:	57d5                	li	a5,-11
    80003c5a:	aa51                	j	80003dee <__metal_driver_riscv_cpu_controller_interrupt_register+0x1ca>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:494
    }
    if ((id == METAL_INTERRUPT_ID_BEU) &&
    80003c5c:	fd442783          	lw	a5,-44(s0)
    80003c60:	0007871b          	sext.w	a4,a5
    80003c64:	08000793          	li	a5,128
    80003c68:	00f71963          	bne	a4,a5,80003c7a <__metal_driver_riscv_cpu_controller_interrupt_register+0x56>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:495 (discriminator 1)
        (__metal_controller_interrupt_vector_mode() != METAL_DIRECT_MODE)) {
    80003c6c:	c2bff0ef          	jal	ra,80003896 <__metal_controller_interrupt_vector_mode>
    80003c70:	87aa                	mv	a5,a0
    80003c72:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:494 (discriminator 1)
    if ((id == METAL_INTERRUPT_ID_BEU) &&
    80003c74:	c399                	beqz	a5,80003c7a <__metal_driver_riscv_cpu_controller_interrupt_register+0x56>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:498
        /* Only allow registration of the bus error unit interrupt if
         * interrupt vectoring if off */
        return -13;
    80003c76:	57cd                	li	a5,-13
    80003c78:	aa9d                	j	80003dee <__metal_driver_riscv_cpu_controller_interrupt_register+0x1ca>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:501
    }

    if (isr) {
    80003c7a:	fc843783          	ld	a5,-56(s0)
    80003c7e:	cbb9                	beqz	a5,80003cd4 <__metal_driver_riscv_cpu_controller_interrupt_register+0xb0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:502
        if (id == METAL_INTERRUPT_ID_BEU) {
    80003c80:	fd442783          	lw	a5,-44(s0)
    80003c84:	0007871b          	sext.w	a4,a5
    80003c88:	08000793          	li	a5,128
    80003c8c:	00f71f63          	bne	a4,a5,80003caa <__metal_driver_riscv_cpu_controller_interrupt_register+0x86>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:503
            intc->metal_int_beu.handler = isr;
    80003c90:	fe043783          	ld	a5,-32(s0)
    80003c94:	fc843703          	ld	a4,-56(s0)
    80003c98:	50e7bc23          	sd	a4,1304(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:504
            intc->metal_int_beu.exint_data = priv;
    80003c9c:	fe043783          	ld	a5,-32(s0)
    80003ca0:	fc043703          	ld	a4,-64(s0)
    80003ca4:	52e7b423          	sd	a4,1320(a5)
    80003ca8:	a289                	j	80003dea <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:506
        } else {
            intc->metal_int_table[id].handler = isr;
    80003caa:	fe043703          	ld	a4,-32(s0)
    80003cae:	fd442783          	lw	a5,-44(s0)
    80003cb2:	0796                	slli	a5,a5,0x5
    80003cb4:	97ba                	add	a5,a5,a4
    80003cb6:	fc843703          	ld	a4,-56(s0)
    80003cba:	10e7bc23          	sd	a4,280(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:507
            intc->metal_int_table[id].exint_data = priv;
    80003cbe:	fe043703          	ld	a4,-32(s0)
    80003cc2:	fd442783          	lw	a5,-44(s0)
    80003cc6:	07a5                	addi	a5,a5,9
    80003cc8:	0796                	slli	a5,a5,0x5
    80003cca:	97ba                	add	a5,a5,a4
    80003ccc:	fc043703          	ld	a4,-64(s0)
    80003cd0:	e798                	sd	a4,8(a5)
    80003cd2:	aa21                	j	80003dea <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:510
        }
    } else {
        switch (id) {
    80003cd4:	fd442783          	lw	a5,-44(s0)
    80003cd8:	0007871b          	sext.w	a4,a5
    80003cdc:	47ad                	li	a5,11
    80003cde:	0cf70c63          	beq	a4,a5,80003db6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x192>
    80003ce2:	fd442783          	lw	a5,-44(s0)
    80003ce6:	0007871b          	sext.w	a4,a5
    80003cea:	47ad                	li	a5,11
    80003cec:	02e7c163          	blt	a5,a4,80003d0e <__metal_driver_riscv_cpu_controller_interrupt_register+0xea>
    80003cf0:	fd442783          	lw	a5,-44(s0)
    80003cf4:	0007871b          	sext.w	a4,a5
    80003cf8:	478d                	li	a5,3
    80003cfa:	04f70163          	beq	a4,a5,80003d3c <__metal_driver_riscv_cpu_controller_interrupt_register+0x118>
    80003cfe:	fd442783          	lw	a5,-44(s0)
    80003d02:	0007871b          	sext.w	a4,a5
    80003d06:	479d                	li	a5,7
    80003d08:	06f70163          	beq	a4,a5,80003d6a <__metal_driver_riscv_cpu_controller_interrupt_register+0x146>
    80003d0c:	a8e1                	j	80003de4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c0>
    80003d0e:	fd442783          	lw	a5,-44(s0)
    80003d12:	0007871b          	sext.w	a4,a5
    80003d16:	47c1                	li	a5,16
    80003d18:	0cf74663          	blt	a4,a5,80003de4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c0>
    80003d1c:	fd442783          	lw	a5,-44(s0)
    80003d20:	0007871b          	sext.w	a4,a5
    80003d24:	47fd                	li	a5,31
    80003d26:	08e7d863          	bge	a5,a4,80003db6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x192>
    80003d2a:	fd442783          	lw	a5,-44(s0)
    80003d2e:	0007871b          	sext.w	a4,a5
    80003d32:	08000793          	li	a5,128
    80003d36:	06f70163          	beq	a4,a5,80003d98 <__metal_driver_riscv_cpu_controller_interrupt_register+0x174>
    80003d3a:	a06d                	j	80003de4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c0>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:512
        case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
    80003d3c:	fe043703          	ld	a4,-32(s0)
    80003d40:	fd442783          	lw	a5,-44(s0)
    80003d44:	0796                	slli	a5,a5,0x5
    80003d46:	97ba                	add	a5,a5,a4
    80003d48:	fffff717          	auipc	a4,0xfffff
    80003d4c:	95870713          	addi	a4,a4,-1704 # 800026a0 <__metal_default_sw_handler>
    80003d50:	10e7bc23          	sd	a4,280(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:513
            intc->metal_int_table[id].sub_int = priv;
    80003d54:	fe043703          	ld	a4,-32(s0)
    80003d58:	fd442783          	lw	a5,-44(s0)
    80003d5c:	07a5                	addi	a5,a5,9
    80003d5e:	0796                	slli	a5,a5,0x5
    80003d60:	97ba                	add	a5,a5,a4
    80003d62:	fc043703          	ld	a4,-64(s0)
    80003d66:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:514
            break;
    80003d68:	a049                	j	80003dea <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:516
        case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
    80003d6a:	fe043703          	ld	a4,-32(s0)
    80003d6e:	fd442783          	lw	a5,-44(s0)
    80003d72:	0796                	slli	a5,a5,0x5
    80003d74:	97ba                	add	a5,a5,a4
    80003d76:	fffff717          	auipc	a4,0xfffff
    80003d7a:	a9070713          	addi	a4,a4,-1392 # 80002806 <__metal_default_timer_handler>
    80003d7e:	10e7bc23          	sd	a4,280(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:517
            intc->metal_int_table[id].sub_int = priv;
    80003d82:	fe043703          	ld	a4,-32(s0)
    80003d86:	fd442783          	lw	a5,-44(s0)
    80003d8a:	07a5                	addi	a5,a5,9
    80003d8c:	0796                	slli	a5,a5,0x5
    80003d8e:	97ba                	add	a5,a5,a4
    80003d90:	fc043703          	ld	a4,-64(s0)
    80003d94:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:518
            break;
    80003d96:	a891                	j	80003dea <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:520
        case METAL_INTERRUPT_ID_BEU:
            intc->metal_int_beu.handler = __metal_default_beu_handler;
    80003d98:	fe043783          	ld	a5,-32(s0)
    80003d9c:	fffff717          	auipc	a4,0xfffff
    80003da0:	a5270713          	addi	a4,a4,-1454 # 800027ee <__metal_default_beu_handler>
    80003da4:	50e7bc23          	sd	a4,1304(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:521
            intc->metal_int_beu.exint_data = priv;
    80003da8:	fe043783          	ld	a5,-32(s0)
    80003dac:	fc043703          	ld	a4,-64(s0)
    80003db0:	52e7b423          	sd	a4,1320(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:522
            break;
    80003db4:	a81d                	j	80003dea <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:540
        case METAL_INTERRUPT_ID_LC11:
        case METAL_INTERRUPT_ID_LC12:
        case METAL_INTERRUPT_ID_LC13:
        case METAL_INTERRUPT_ID_LC14:
        case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler =
    80003db6:	fe043703          	ld	a4,-32(s0)
    80003dba:	fd442783          	lw	a5,-44(s0)
    80003dbe:	0796                	slli	a5,a5,0x5
    80003dc0:	97ba                	add	a5,a5,a4
    80003dc2:	ffffe717          	auipc	a4,0xffffe
    80003dc6:	78c70713          	addi	a4,a4,1932 # 8000254e <__metal_default_interrupt_handler>
    80003dca:	10e7bc23          	sd	a4,280(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:542
                __metal_default_interrupt_handler;
            intc->metal_int_table[id].sub_int = priv;
    80003dce:	fe043703          	ld	a4,-32(s0)
    80003dd2:	fd442783          	lw	a5,-44(s0)
    80003dd6:	07a5                	addi	a5,a5,9
    80003dd8:	0796                	slli	a5,a5,0x5
    80003dda:	97ba                	add	a5,a5,a4
    80003ddc:	fc043703          	ld	a4,-64(s0)
    80003de0:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:543
            break;
    80003de2:	a021                	j	80003dea <__metal_driver_riscv_cpu_controller_interrupt_register+0x1c6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:545
        default:
            rc = -12;
    80003de4:	57d1                	li	a5,-12
    80003de6:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:548
        }
    }
    return rc;
    80003dea:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:549
}
    80003dee:	853e                	mv	a0,a5
    80003df0:	70e2                	ld	ra,56(sp)
    80003df2:	7442                	ld	s0,48(sp)
    80003df4:	6121                	addi	sp,sp,64
    80003df6:	8082                	ret

0000000080003df8 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:552

int __metal_driver_riscv_cpu_controller_interrupt_enable(
    struct metal_interrupt *controller, int id) {
    80003df8:	1101                	addi	sp,sp,-32
    80003dfa:	ec06                	sd	ra,24(sp)
    80003dfc:	e822                	sd	s0,16(sp)
    80003dfe:	1000                	addi	s0,sp,32
    80003e00:	fea43423          	sd	a0,-24(s0)
    80003e04:	87ae                	mv	a5,a1
    80003e06:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:553
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
    80003e0a:	fe442783          	lw	a5,-28(s0)
    80003e0e:	4605                	li	a2,1
    80003e10:	85be                	mv	a1,a5
    80003e12:	fe843503          	ld	a0,-24(s0)
    80003e16:	bffff0ef          	jal	ra,80003a14 <__metal_local_interrupt_enable>
    80003e1a:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:554
}
    80003e1c:	853e                	mv	a0,a5
    80003e1e:	60e2                	ld	ra,24(sp)
    80003e20:	6442                	ld	s0,16(sp)
    80003e22:	6105                	addi	sp,sp,32
    80003e24:	8082                	ret

0000000080003e26 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:557

int __metal_driver_riscv_cpu_controller_interrupt_disable(
    struct metal_interrupt *controller, int id) {
    80003e26:	1101                	addi	sp,sp,-32
    80003e28:	ec06                	sd	ra,24(sp)
    80003e2a:	e822                	sd	s0,16(sp)
    80003e2c:	1000                	addi	s0,sp,32
    80003e2e:	fea43423          	sd	a0,-24(s0)
    80003e32:	87ae                	mv	a5,a1
    80003e34:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:558
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
    80003e38:	fe442783          	lw	a5,-28(s0)
    80003e3c:	4601                	li	a2,0
    80003e3e:	85be                	mv	a1,a5
    80003e40:	fe843503          	ld	a0,-24(s0)
    80003e44:	bd1ff0ef          	jal	ra,80003a14 <__metal_local_interrupt_enable>
    80003e48:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:559
}
    80003e4a:	853e                	mv	a0,a5
    80003e4c:	60e2                	ld	ra,24(sp)
    80003e4e:	6442                	ld	s0,16(sp)
    80003e50:	6105                	addi	sp,sp,32
    80003e52:	8082                	ret

0000000080003e54 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:591
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode(
    struct metal_interrupt *controller) {
    80003e54:	1101                	addi	sp,sp,-32
    80003e56:	ec06                	sd	ra,24(sp)
    80003e58:	e822                	sd	s0,16(sp)
    80003e5a:	1000                	addi	s0,sp,32
    80003e5c:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:592
    return __metal_controller_interrupt_vector_mode();
    80003e60:	a37ff0ef          	jal	ra,80003896 <__metal_controller_interrupt_vector_mode>
    80003e64:	87aa                	mv	a5,a0
    80003e66:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:593
}
    80003e68:	853e                	mv	a0,a5
    80003e6a:	60e2                	ld	ra,24(sp)
    80003e6c:	6442                	ld	s0,16(sp)
    80003e6e:	6105                	addi	sp,sp,32
    80003e70:	8082                	ret

0000000080003e72 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:596

int __metal_driver_riscv_cpu_controller_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
    80003e72:	1101                	addi	sp,sp,-32
    80003e74:	ec06                	sd	ra,24(sp)
    80003e76:	e822                	sd	s0,16(sp)
    80003e78:	1000                	addi	s0,sp,32
    80003e7a:	fea43423          	sd	a0,-24(s0)
    80003e7e:	87ae                	mv	a5,a1
    80003e80:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:598

    if (mode == METAL_DIRECT_MODE) {
    80003e84:	fe442783          	lw	a5,-28(s0)
    80003e88:	2781                	sext.w	a5,a5
    80003e8a:	ef81                	bnez	a5,80003ea2 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x30>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:599
        __metal_controller_interrupt_vector(
    80003e8c:	fe442783          	lw	a5,-28(s0)
    80003e90:	fffff597          	auipc	a1,0xfffff
    80003e94:	9f058593          	addi	a1,a1,-1552 # 80002880 <__metal_exception_handler>
    80003e98:	853e                	mv	a0,a5
    80003e9a:	a4dff0ef          	jal	ra,800038e6 <__metal_controller_interrupt_vector>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:601
            mode, (void *)(uintptr_t)&__metal_exception_handler);
        return 0;
    80003e9e:	4781                	li	a5,0
    80003ea0:	a025                	j	80003ec8 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x56>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:603
    }
    if (mode == METAL_VECTOR_MODE) {
    80003ea2:	fe442783          	lw	a5,-28(s0)
    80003ea6:	0007871b          	sext.w	a4,a5
    80003eaa:	4785                	li	a5,1
    80003eac:	00f71d63          	bne	a4,a5,80003ec6 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x54>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:604
        __metal_controller_interrupt_vector(
    80003eb0:	fe442783          	lw	a5,-28(s0)
    80003eb4:	00001597          	auipc	a1,0x1
    80003eb8:	74c58593          	addi	a1,a1,1868 # 80005600 <__metal_vector_table>
    80003ebc:	853e                	mv	a0,a5
    80003ebe:	a29ff0ef          	jal	ra,800038e6 <__metal_controller_interrupt_vector>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:606
            mode, (void *)(uintptr_t)__metal_vector_table);
        return 0;
    80003ec2:	4781                	li	a5,0
    80003ec4:	a011                	j	80003ec8 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x56>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:608
    }
    return -1;
    80003ec6:	57fd                	li	a5,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:609
}
    80003ec8:	853e                	mv	a0,a5
    80003eca:	60e2                	ld	ra,24(sp)
    80003ecc:	6442                	ld	s0,16(sp)
    80003ece:	6105                	addi	sp,sp,32
    80003ed0:	8082                	ret

0000000080003ed2 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:612

int __metal_driver_riscv_cpu_controller_command_request(
    struct metal_interrupt *controller, int cmd, void *data) {
    80003ed2:	7179                	addi	sp,sp,-48
    80003ed4:	f422                	sd	s0,40(sp)
    80003ed6:	1800                	addi	s0,sp,48
    80003ed8:	fea43423          	sd	a0,-24(s0)
    80003edc:	87ae                	mv	a5,a1
    80003ede:	fcc43c23          	sd	a2,-40(s0)
    80003ee2:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:615
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic
     */
    return 0;
    80003ee6:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:616
}
    80003ee8:	853e                	mv	a0,a5
    80003eea:	7422                	ld	s0,40(sp)
    80003eec:	6145                	addi	sp,sp,48
    80003eee:	8082                	ret

0000000080003ef0 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:620

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu) {
    80003ef0:	7179                	addi	sp,sp,-48
    80003ef2:	f422                	sd	s0,40(sp)
    80003ef4:	1800                	addi	s0,sp,48
    80003ef6:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:621
    unsigned long long val = 0;
    80003efa:	fe043423          	sd	zero,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:636
         * so we must retry. */
    } while (hi != hi1);

    val = ((unsigned long long)hi << 32) | lo;
#else
    __asm__ volatile("csrr %0, mcycle" : "=r"(val));
    80003efe:	b00027f3          	csrr	a5,mcycle
    80003f02:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:639
#endif

    return val;
    80003f06:	fe843783          	ld	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:640
}
    80003f0a:	853e                	mv	a0,a5
    80003f0c:	7422                	ld	s0,40(sp)
    80003f0e:	6145                	addi	sp,sp,48
    80003f10:	8082                	ret

0000000080003f12 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:642

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu) {
    80003f12:	7179                	addi	sp,sp,-48
    80003f14:	f406                	sd	ra,40(sp)
    80003f16:	f022                	sd	s0,32(sp)
    80003f18:	1800                	addi	s0,sp,48
    80003f1a:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:644
    int timebase;
    if (!cpu) {
    80003f1e:	fd843783          	ld	a5,-40(s0)
    80003f22:	e399                	bnez	a5,80003f28 <__metal_driver_cpu_timebase_get+0x16>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:645
        return 0;
    80003f24:	4781                	li	a5,0
    80003f26:	a811                	j	80003f3a <__metal_driver_cpu_timebase_get+0x28>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:648
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
    80003f28:	fd843503          	ld	a0,-40(s0)
    80003f2c:	c0efe0ef          	jal	ra,8000233a <__metal_driver_cpu_timebase>
    80003f30:	87aa                	mv	a5,a0
    80003f32:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:649
    return timebase;
    80003f36:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:650
}
    80003f3a:	853e                	mv	a0,a5
    80003f3c:	70a2                	ld	ra,40(sp)
    80003f3e:	7402                	ld	s0,32(sp)
    80003f40:	6145                	addi	sp,sp,48
    80003f42:	8082                	ret

0000000080003f44 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:652

unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu) {
    80003f44:	7139                	addi	sp,sp,-64
    80003f46:	fc06                	sd	ra,56(sp)
    80003f48:	f822                	sd	s0,48(sp)
    80003f4a:	0080                	addi	s0,sp,64
    80003f4c:	fca43423          	sd	a0,-56(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:653
    unsigned long long time = 0;
    80003f50:	fc043c23          	sd	zero,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:657
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    80003f54:	fc843503          	ld	a0,-56(s0)
    80003f58:	c10fe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80003f5c:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:659

    if (intc) {
    80003f60:	fe843783          	ld	a5,-24(s0)
    80003f64:	c78d                	beqz	a5,80003f8e <__metal_driver_cpu_mtime_get+0x4a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:660
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
    80003f66:	fe843783          	ld	a5,-24(s0)
    80003f6a:	2007b783          	ld	a5,512(a5)
    80003f6e:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:661
        if (tmr_intc) {
    80003f72:	fe043783          	ld	a5,-32(s0)
    80003f76:	cf81                	beqz	a5,80003f8e <__metal_driver_cpu_mtime_get+0x4a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:662
            tmr_intc->vtable->command_request(tmr_intc, METAL_TIMER_MTIME_GET,
    80003f78:	fe043783          	ld	a5,-32(s0)
    80003f7c:	639c                	ld	a5,0(a5)
    80003f7e:	6fd8                	ld	a4,152(a5)
    80003f80:	fd840793          	addi	a5,s0,-40
    80003f84:	863e                	mv	a2,a5
    80003f86:	4585                	li	a1,1
    80003f88:	fe043503          	ld	a0,-32(s0)
    80003f8c:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:666
                                              &time);
        }
    }
    return time;
    80003f8e:	fd843783          	ld	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:667
}
    80003f92:	853e                	mv	a0,a5
    80003f94:	70e2                	ld	ra,56(sp)
    80003f96:	7442                	ld	s0,48(sp)
    80003f98:	6121                	addi	sp,sp,64
    80003f9a:	8082                	ret

0000000080003f9c <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:670

int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time) {
    80003f9c:	715d                	addi	sp,sp,-80
    80003f9e:	e486                	sd	ra,72(sp)
    80003fa0:	e0a2                	sd	s0,64(sp)
    80003fa2:	fc26                	sd	s1,56(sp)
    80003fa4:	0880                	addi	s0,sp,80
    80003fa6:	faa43c23          	sd	a0,-72(s0)
    80003faa:	fab43823          	sd	a1,-80(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:671
    int rc = -1;
    80003fae:	57fd                	li	a5,-1
    80003fb0:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:675
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    80003fb4:	fb843503          	ld	a0,-72(s0)
    80003fb8:	bb0fe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80003fbc:	fca43823          	sd	a0,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:677

    if (intc) {
    80003fc0:	fd043783          	ld	a5,-48(s0)
    80003fc4:	cf85                	beqz	a5,80003ffc <__metal_driver_cpu_mtimecmp_set+0x60>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:678
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
    80003fc6:	fd043783          	ld	a5,-48(s0)
    80003fca:	2007b783          	ld	a5,512(a5)
    80003fce:	fcf43423          	sd	a5,-56(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:679
        if (tmr_intc) {
    80003fd2:	fc843783          	ld	a5,-56(s0)
    80003fd6:	c39d                	beqz	a5,80003ffc <__metal_driver_cpu_mtimecmp_set+0x60>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:680
            rc = tmr_intc->vtable->mtimecmp_set(
    80003fd8:	fc843783          	ld	a5,-56(s0)
    80003fdc:	639c                	ld	a5,0(a5)
    80003fde:	73c4                	ld	s1,160(a5)
    80003fe0:	fb843503          	ld	a0,-72(s0)
    80003fe4:	b2efe0ef          	jal	ra,80002312 <__metal_driver_cpu_hartid>
    80003fe8:	87aa                	mv	a5,a0
    80003fea:	fb043603          	ld	a2,-80(s0)
    80003fee:	85be                	mv	a1,a5
    80003ff0:	fc843503          	ld	a0,-56(s0)
    80003ff4:	9482                	jalr	s1
    80003ff6:	87aa                	mv	a5,a0
    80003ff8:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:684
                tmr_intc, __metal_driver_cpu_hartid(cpu), time);
        }
    }
    return rc;
    80003ffc:	fdc42783          	lw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:685
}
    80004000:	853e                	mv	a0,a5
    80004002:	60a6                	ld	ra,72(sp)
    80004004:	6406                	ld	s0,64(sp)
    80004006:	74e2                	ld	s1,56(sp)
    80004008:	6161                	addi	sp,sp,80
    8000400a:	8082                	ret

000000008000400c <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:688

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu) {
    8000400c:	1101                	addi	sp,sp,-32
    8000400e:	ec22                	sd	s0,24(sp)
    80004010:	1000                	addi	s0,sp,32
    80004012:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:690
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
    80004016:	00002797          	auipc	a5,0x2
    8000401a:	d2278793          	addi	a5,a5,-734 # 80005d38 <__metal_dt_clint_2000000>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:699
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
    8000401e:	853e                	mv	a0,a5
    80004020:	6462                	ld	s0,24(sp)
    80004022:	6105                	addi	sp,sp,32
    80004024:	8082                	ret

0000000080004026 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:701

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu) {
    80004026:	1101                	addi	sp,sp,-32
    80004028:	ec22                	sd	s0,24(sp)
    8000402a:	1000                	addi	s0,sp,32
    8000402c:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:702
    return METAL_INTERRUPT_ID_TMR;
    80004030:	479d                	li	a5,7
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:703
}
    80004032:	853e                	mv	a0,a5
    80004034:	6462                	ld	s0,24(sp)
    80004036:	6105                	addi	sp,sp,32
    80004038:	8082                	ret

000000008000403a <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:706

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu) {
    8000403a:	1101                	addi	sp,sp,-32
    8000403c:	ec22                	sd	s0,24(sp)
    8000403e:	1000                	addi	s0,sp,32
    80004040:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:708
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
    80004044:	00002797          	auipc	a5,0x2
    80004048:	cf478793          	addi	a5,a5,-780 # 80005d38 <__metal_dt_clint_2000000>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:717
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
    8000404c:	853e                	mv	a0,a5
    8000404e:	6462                	ld	s0,24(sp)
    80004050:	6105                	addi	sp,sp,32
    80004052:	8082                	ret

0000000080004054 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:719

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu) {
    80004054:	1101                	addi	sp,sp,-32
    80004056:	ec22                	sd	s0,24(sp)
    80004058:	1000                	addi	s0,sp,32
    8000405a:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:720
    return METAL_INTERRUPT_ID_SW;
    8000405e:	478d                	li	a5,3
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:721
}
    80004060:	853e                	mv	a0,a5
    80004062:	6462                	ld	s0,24(sp)
    80004064:	6105                	addi	sp,sp,32
    80004066:	8082                	ret

0000000080004068 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:723

int __metal_driver_cpu_set_sw_ipi(struct metal_cpu *cpu, int hartid) {
    80004068:	7139                	addi	sp,sp,-64
    8000406a:	fc06                	sd	ra,56(sp)
    8000406c:	f822                	sd	s0,48(sp)
    8000406e:	0080                	addi	s0,sp,64
    80004070:	fca43423          	sd	a0,-56(s0)
    80004074:	87ae                	mv	a5,a1
    80004076:	fcf42223          	sw	a5,-60(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:724
    int rc = -1;
    8000407a:	57fd                	li	a5,-1
    8000407c:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:728
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    80004080:	fc843503          	ld	a0,-56(s0)
    80004084:	ae4fe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80004088:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:730

    if (intc) {
    8000408c:	fe043783          	ld	a5,-32(s0)
    80004090:	cb85                	beqz	a5,800040c0 <__metal_driver_cpu_set_sw_ipi+0x58>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:731
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    80004092:	fe043783          	ld	a5,-32(s0)
    80004096:	1807b783          	ld	a5,384(a5)
    8000409a:	fcf43c23          	sd	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:732
        if (sw_intc) {
    8000409e:	fd843783          	ld	a5,-40(s0)
    800040a2:	cf99                	beqz	a5,800040c0 <__metal_driver_cpu_set_sw_ipi+0x58>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:733
            rc = sw_intc->vtable->command_request(
    800040a4:	fd843783          	ld	a5,-40(s0)
    800040a8:	639c                	ld	a5,0(a5)
    800040aa:	6fd8                	ld	a4,152(a5)
    800040ac:	fc440793          	addi	a5,s0,-60
    800040b0:	863e                	mv	a2,a5
    800040b2:	458d                	li	a1,3
    800040b4:	fd843503          	ld	a0,-40(s0)
    800040b8:	9702                	jalr	a4
    800040ba:	87aa                	mv	a5,a0
    800040bc:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:737
                sw_intc, METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
    800040c0:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:738
}
    800040c4:	853e                	mv	a0,a5
    800040c6:	70e2                	ld	ra,56(sp)
    800040c8:	7442                	ld	s0,48(sp)
    800040ca:	6121                	addi	sp,sp,64
    800040cc:	8082                	ret

00000000800040ce <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:740

int __metal_driver_cpu_clear_sw_ipi(struct metal_cpu *cpu, int hartid) {
    800040ce:	7139                	addi	sp,sp,-64
    800040d0:	fc06                	sd	ra,56(sp)
    800040d2:	f822                	sd	s0,48(sp)
    800040d4:	0080                	addi	s0,sp,64
    800040d6:	fca43423          	sd	a0,-56(s0)
    800040da:	87ae                	mv	a5,a1
    800040dc:	fcf42223          	sw	a5,-60(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:741
    int rc = -1;
    800040e0:	57fd                	li	a5,-1
    800040e2:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:745
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    800040e6:	fc843503          	ld	a0,-56(s0)
    800040ea:	a7efe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    800040ee:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:747

    if (intc) {
    800040f2:	fe043783          	ld	a5,-32(s0)
    800040f6:	cb85                	beqz	a5,80004126 <__metal_driver_cpu_clear_sw_ipi+0x58>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:748
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    800040f8:	fe043783          	ld	a5,-32(s0)
    800040fc:	1807b783          	ld	a5,384(a5)
    80004100:	fcf43c23          	sd	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:749
        if (sw_intc) {
    80004104:	fd843783          	ld	a5,-40(s0)
    80004108:	cf99                	beqz	a5,80004126 <__metal_driver_cpu_clear_sw_ipi+0x58>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:750
            rc = sw_intc->vtable->command_request(
    8000410a:	fd843783          	ld	a5,-40(s0)
    8000410e:	639c                	ld	a5,0(a5)
    80004110:	6fd8                	ld	a4,152(a5)
    80004112:	fc440793          	addi	a5,s0,-60
    80004116:	863e                	mv	a2,a5
    80004118:	4589                	li	a1,2
    8000411a:	fd843503          	ld	a0,-40(s0)
    8000411e:	9702                	jalr	a4
    80004120:	87aa                	mv	a5,a0
    80004122:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:754
                sw_intc, METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
    80004126:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:755
}
    8000412a:	853e                	mv	a0,a5
    8000412c:	70e2                	ld	ra,56(sp)
    8000412e:	7442                	ld	s0,48(sp)
    80004130:	6121                	addi	sp,sp,64
    80004132:	8082                	ret

0000000080004134 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:757

int __metal_driver_cpu_get_msip(struct metal_cpu *cpu, int hartid) {
    80004134:	7139                	addi	sp,sp,-64
    80004136:	fc06                	sd	ra,56(sp)
    80004138:	f822                	sd	s0,48(sp)
    8000413a:	0080                	addi	s0,sp,64
    8000413c:	fca43423          	sd	a0,-56(s0)
    80004140:	87ae                	mv	a5,a1
    80004142:	fcf42223          	sw	a5,-60(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:758
    int rc = 0;
    80004146:	fe042623          	sw	zero,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:762
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    8000414a:	fc843503          	ld	a0,-56(s0)
    8000414e:	a1afe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    80004152:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:764

    if (intc) {
    80004156:	fe043783          	ld	a5,-32(s0)
    8000415a:	cb85                	beqz	a5,8000418a <__metal_driver_cpu_get_msip+0x56>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:765
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    8000415c:	fe043783          	ld	a5,-32(s0)
    80004160:	1807b783          	ld	a5,384(a5)
    80004164:	fcf43c23          	sd	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:766
        if (sw_intc) {
    80004168:	fd843783          	ld	a5,-40(s0)
    8000416c:	cf99                	beqz	a5,8000418a <__metal_driver_cpu_get_msip+0x56>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:767
            rc = sw_intc->vtable->command_request(
    8000416e:	fd843783          	ld	a5,-40(s0)
    80004172:	639c                	ld	a5,0(a5)
    80004174:	6fd8                	ld	a4,152(a5)
    80004176:	fc440793          	addi	a5,s0,-60
    8000417a:	863e                	mv	a2,a5
    8000417c:	4591                	li	a1,4
    8000417e:	fd843503          	ld	a0,-40(s0)
    80004182:	9702                	jalr	a4
    80004184:	87aa                	mv	a5,a0
    80004186:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:771
                sw_intc, METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
    8000418a:	fec42783          	lw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:772
}
    8000418e:	853e                	mv	a0,a5
    80004190:	70e2                	ld	ra,56(sp)
    80004192:	7442                	ld	s0,48(sp)
    80004194:	6121                	addi	sp,sp,64
    80004196:	8082                	ret

0000000080004198 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:775

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu) {
    80004198:	1101                	addi	sp,sp,-32
    8000419a:	ec06                	sd	ra,24(sp)
    8000419c:	e822                	sd	s0,16(sp)
    8000419e:	1000                	addi	s0,sp,32
    800041a0:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:776
    return __metal_driver_cpu_interrupt_controller(cpu);
    800041a4:	fe843503          	ld	a0,-24(s0)
    800041a8:	9c0fe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    800041ac:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:777
}
    800041ae:	853e                	mv	a0,a5
    800041b0:	60e2                	ld	ra,24(sp)
    800041b2:	6442                	ld	s0,16(sp)
    800041b4:	6105                	addi	sp,sp,32
    800041b6:	8082                	ret

00000000800041b8 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:798
    }
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
                                          metal_exception_handler_t isr) {
    800041b8:	7139                	addi	sp,sp,-64
    800041ba:	fc06                	sd	ra,56(sp)
    800041bc:	f822                	sd	s0,48(sp)
    800041be:	0080                	addi	s0,sp,64
    800041c0:	fca43c23          	sd	a0,-40(s0)
    800041c4:	87ae                	mv	a5,a1
    800041c6:	fcc43423          	sd	a2,-56(s0)
    800041ca:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:801
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    800041ce:	fd843503          	ld	a0,-40(s0)
    800041d2:	996fe0ef          	jal	ra,80002368 <__metal_driver_cpu_interrupt_controller>
    800041d6:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:803

    if (intc) {
    800041da:	fe843783          	ld	a5,-24(s0)
    800041de:	cf81                	beqz	a5,800041f6 <__metal_driver_cpu_exception_register+0x3e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:804
        return __metal_exception_register((struct metal_interrupt *)intc, ecode,
    800041e0:	fd442783          	lw	a5,-44(s0)
    800041e4:	fc843603          	ld	a2,-56(s0)
    800041e8:	85be                	mv	a1,a5
    800041ea:	fe843503          	ld	a0,-24(s0)
    800041ee:	905ff0ef          	jal	ra,80003af2 <__metal_exception_register>
    800041f2:	87aa                	mv	a5,a0
    800041f4:	a011                	j	800041f8 <__metal_driver_cpu_exception_register+0x40>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:807
                                          isr);
    }
    return -1;
    800041f6:	57fd                	li	a5,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:808
}
    800041f8:	853e                	mv	a0,a5
    800041fa:	70e2                	ld	ra,56(sp)
    800041fc:	7442                	ld	s0,48(sp)
    800041fe:	6121                	addi	sp,sp,64
    80004200:	8082                	ret

0000000080004202 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:811

int __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu,
                                              uintptr_t epc) {
    80004202:	1101                	addi	sp,sp,-32
    80004204:	ec22                	sd	s0,24(sp)
    80004206:	1000                	addi	s0,sp,32
    80004208:	fea43423          	sd	a0,-24(s0)
    8000420c:	feb43023          	sd	a1,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:817
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short *)epc & METAL_INSN_LENGTH_MASK) ==
    80004210:	fe043783          	ld	a5,-32(s0)
    80004214:	0007d783          	lhu	a5,0(a5)
    80004218:	2781                	sext.w	a5,a5
    8000421a:	8b8d                	andi	a5,a5,3
    8000421c:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:820
            METAL_INSN_NOT_COMPRESSED)
               ? 4
               : 2;
    8000421e:	873e                	mv	a4,a5
    80004220:	478d                	li	a5,3
    80004222:	00f71463          	bne	a4,a5,8000422a <__metal_driver_cpu_get_instruction_length+0x28>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:820 (discriminator 1)
    80004226:	4791                	li	a5,4
    80004228:	a011                	j	8000422c <__metal_driver_cpu_get_instruction_length+0x2a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:820 (discriminator 2)
    8000422a:	4789                	li	a5,2
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:821 (discriminator 4)
}
    8000422c:	853e                	mv	a0,a5
    8000422e:	6462                	ld	s0,24(sp)
    80004230:	6105                	addi	sp,sp,32
    80004232:	8082                	ret

0000000080004234 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:823

uintptr_t __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu) {
    80004234:	7179                	addi	sp,sp,-48
    80004236:	f422                	sd	s0,40(sp)
    80004238:	1800                	addi	s0,sp,48
    8000423a:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:825
    uintptr_t mepc;
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
    8000423e:	341027f3          	csrr	a5,mepc
    80004242:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:826
    return mepc;
    80004246:	fe843783          	ld	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:827
}
    8000424a:	853e                	mv	a0,a5
    8000424c:	7422                	ld	s0,40(sp)
    8000424e:	6145                	addi	sp,sp,48
    80004250:	8082                	ret

0000000080004252 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:829

int __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc) {
    80004252:	1101                	addi	sp,sp,-32
    80004254:	ec22                	sd	s0,24(sp)
    80004256:	1000                	addi	s0,sp,32
    80004258:	fea43423          	sd	a0,-24(s0)
    8000425c:	feb43023          	sd	a1,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:830
    __asm__ volatile("csrw mepc, %0" ::"r"(mepc));
    80004260:	fe043783          	ld	a5,-32(s0)
    80004264:	34179073          	csrw	mepc,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:831
    return 0;
    80004268:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:832
}
    8000426a:	853e                	mv	a0,a5
    8000426c:	6462                	ld	s0,24(sp)
    8000426e:	6105                	addi	sp,sp,32
    80004270:	8082                	ret

0000000080004272 <__metal_driver_cpu_get_buserror>:
__metal_driver_cpu_get_buserror():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:834

struct metal_buserror *__metal_driver_cpu_get_buserror(struct metal_cpu *cpu) {
    80004272:	1101                	addi	sp,sp,-32
    80004274:	ec06                	sd	ra,24(sp)
    80004276:	e822                	sd	s0,16(sp)
    80004278:	1000                	addi	s0,sp,32
    8000427a:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:835
    return __metal_driver_cpu_buserror(cpu);
    8000427e:	fe843503          	ld	a0,-24(s0)
    80004282:	914fe0ef          	jal	ra,80002396 <__metal_driver_cpu_buserror>
    80004286:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_cpu.c:836
}
    80004288:	853e                	mv	a0,a5
    8000428a:	60e2                	ld	ra,24(sp)
    8000428c:	6442                	ld	s0,16(sp)
    8000428e:	6105                	addi	sp,sp,32
    80004290:	8082                	ret

0000000080004292 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:227



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
    80004292:	1101                	addi	sp,sp,-32
    80004294:	ec22                	sd	s0,24(sp)
    80004296:	1000                	addi	s0,sp,32
    80004298:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:228
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
    8000429c:	fe843703          	ld	a4,-24(s0)
    800042a0:	00002797          	auipc	a5,0x2
    800042a4:	04878793          	addi	a5,a5,72 # 800062e8 <__metal_dt_interrupt_controller_c000000>
    800042a8:	00f71563          	bne	a4,a5,800042b2 <__metal_driver_sifive_plic0_control_base+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:229
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
    800042ac:	0c0007b7          	lui	a5,0xc000
    800042b0:	a011                	j	800042b4 <__metal_driver_sifive_plic0_control_base+0x22>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:232
	}
	else {
		return 0;
    800042b2:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:234
	}
}
    800042b4:	853e                	mv	a0,a5
    800042b6:	6462                	ld	s0,24(sp)
    800042b8:	6105                	addi	sp,sp,32
    800042ba:	8082                	ret

00000000800042bc <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:247
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
    800042bc:	1101                	addi	sp,sp,-32
    800042be:	ec22                	sd	s0,24(sp)
    800042c0:	1000                	addi	s0,sp,32
    800042c2:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:248
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
    800042c6:	fe843703          	ld	a4,-24(s0)
    800042ca:	00002797          	auipc	a5,0x2
    800042ce:	01e78793          	addi	a5,a5,30 # 800062e8 <__metal_dt_interrupt_controller_c000000>
    800042d2:	00f71563          	bne	a4,a5,800042dc <__metal_driver_sifive_plic0_num_interrupts+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:249
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
    800042d6:	03600793          	li	a5,54
    800042da:	a011                	j	800042de <__metal_driver_sifive_plic0_num_interrupts+0x22>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:252
	}
	else {
		return 0;
    800042dc:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:254
	}
}
    800042de:	853e                	mv	a0,a5
    800042e0:	6462                	ld	s0,24(sp)
    800042e2:	6105                	addi	sp,sp,32
    800042e4:	8082                	ret

00000000800042e6 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:257

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
    800042e6:	1101                	addi	sp,sp,-32
    800042e8:	ec22                	sd	s0,24(sp)
    800042ea:	1000                	addi	s0,sp,32
    800042ec:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:258
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
    800042f0:	fe843703          	ld	a4,-24(s0)
    800042f4:	00002797          	auipc	a5,0x2
    800042f8:	ff478793          	addi	a5,a5,-12 # 800062e8 <__metal_dt_interrupt_controller_c000000>
    800042fc:	00f71463          	bne	a4,a5,80004304 <__metal_driver_sifive_plic0_max_priority+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:259
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
    80004300:	479d                	li	a5,7
    80004302:	a011                	j	80004306 <__metal_driver_sifive_plic0_max_priority+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:262
	}
	else {
		return 0;
    80004304:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:264
	}
}
    80004306:	853e                	mv	a0,a5
    80004308:	6462                	ld	s0,24(sp)
    8000430a:	6105                	addi	sp,sp,32
    8000430c:	8082                	ret

000000008000430e <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:267

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
    8000430e:	1101                	addi	sp,sp,-32
    80004310:	ec22                	sd	s0,24(sp)
    80004312:	1000                	addi	s0,sp,32
    80004314:	fea43423          	sd	a0,-24(s0)
    80004318:	87ae                	mv	a5,a1
    8000431a:	fef42223          	sw	a5,-28(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:268
	if (idx == 0) {
    8000431e:	fe442783          	lw	a5,-28(s0)
    80004322:	2781                	sext.w	a5,a5
    80004324:	e791                	bnez	a5,80004330 <__metal_driver_sifive_plic0_interrupt_parents+0x22>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:269
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    80004326:	00002797          	auipc	a5,0x2
    8000432a:	a3278793          	addi	a5,a5,-1486 # 80005d58 <__metal_dt_cpu_0_interrupt_controller>
    8000432e:	a831                	j	8000434a <__metal_driver_sifive_plic0_interrupt_parents+0x3c>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:271
	}
	else if (idx == 1) {
    80004330:	fe442783          	lw	a5,-28(s0)
    80004334:	0007871b          	sext.w	a4,a5
    80004338:	4785                	li	a5,1
    8000433a:	00f71763          	bne	a4,a5,80004348 <__metal_driver_sifive_plic0_interrupt_parents+0x3a>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:272
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    8000433e:	00002797          	auipc	a5,0x2
    80004342:	a1a78793          	addi	a5,a5,-1510 # 80005d58 <__metal_dt_cpu_0_interrupt_controller>
    80004346:	a011                	j	8000434a <__metal_driver_sifive_plic0_interrupt_parents+0x3c>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:275
	}
	else {
		return NULL;
    80004348:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:277
	}
}
    8000434a:	853e                	mv	a0,a5
    8000434c:	6462                	ld	s0,24(sp)
    8000434e:	6105                	addi	sp,sp,32
    80004350:	8082                	ret

0000000080004352 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:280

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
    80004352:	1101                	addi	sp,sp,-32
    80004354:	ec22                	sd	s0,24(sp)
    80004356:	1000                	addi	s0,sp,32
    80004358:	fea43423          	sd	a0,-24(s0)
    8000435c:	87ae                	mv	a5,a1
    8000435e:	fef42223          	sw	a5,-28(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:281
	if (idx == 0) {
    80004362:	fe442783          	lw	a5,-28(s0)
    80004366:	2781                	sext.w	a5,a5
    80004368:	e399                	bnez	a5,8000436e <__metal_driver_sifive_plic0_interrupt_lines+0x1c>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:282
		return 11;
    8000436a:	47ad                	li	a5,11
    8000436c:	a819                	j	80004382 <__metal_driver_sifive_plic0_interrupt_lines+0x30>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:284
	}
	else if (idx == 1) {
    8000436e:	fe442783          	lw	a5,-28(s0)
    80004372:	0007871b          	sext.w	a4,a5
    80004376:	4785                	li	a5,1
    80004378:	00f71463          	bne	a4,a5,80004380 <__metal_driver_sifive_plic0_interrupt_lines+0x2e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:285
		return 9;
    8000437c:	47a5                	li	a5,9
    8000437e:	a011                	j	80004382 <__metal_driver_sifive_plic0_interrupt_lines+0x30>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:288
	}
	else {
		return 0;
    80004380:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:290
	}
}
    80004382:	853e                	mv	a0,a5
    80004384:	6462                	ld	s0,24(sp)
    80004386:	6105                	addi	sp,sp,32
    80004388:	8082                	ret

000000008000438a <__metal_driver_sifive_plic0_context_ids>:
__metal_driver_sifive_plic0_context_ids():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:293

static __inline__ int __metal_driver_sifive_plic0_context_ids(int hartid)
{
    8000438a:	1101                	addi	sp,sp,-32
    8000438c:	ec22                	sd	s0,24(sp)
    8000438e:	1000                	addi	s0,sp,32
    80004390:	87aa                	mv	a5,a0
    80004392:	fef42623          	sw	a5,-20(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:294
	if (hartid == 0) {
    80004396:	fec42783          	lw	a5,-20(s0)
    8000439a:	2781                	sext.w	a5,a5
    8000439c:	e399                	bnez	a5,800043a2 <__metal_driver_sifive_plic0_context_ids+0x18>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:295
		return 0;
    8000439e:	4781                	li	a5,0
    800043a0:	a011                	j	800043a4 <__metal_driver_sifive_plic0_context_ids+0x1a>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:298
	}
	else {
		return -1;
    800043a2:	57fd                	li	a5,-1
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:300
	}
}
    800043a4:	853e                	mv	a0,a5
    800043a6:	6462                	ld	s0,24(sp)
    800043a8:	6105                	addi	sp,sp,32
    800043aa:	8082                	ret

00000000800043ac <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:18
#include <metal/machine.h>
#include <metal/shutdown.h>

unsigned int
__metal_plic0_claim_interrupt(struct __metal_driver_riscv_plic0 *plic,
                              int context_id) {
    800043ac:	7179                	addi	sp,sp,-48
    800043ae:	f406                	sd	ra,40(sp)
    800043b0:	f022                	sd	s0,32(sp)
    800043b2:	1800                	addi	s0,sp,48
    800043b4:	fca43c23          	sd	a0,-40(s0)
    800043b8:	87ae                	mv	a5,a1
    800043ba:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:19
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
    800043be:	fd843503          	ld	a0,-40(s0)
    800043c2:	ed1ff0ef          	jal	ra,80004292 <__metal_driver_sifive_plic0_control_base>
    800043c6:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:21
        (struct metal_interrupt *)plic);
    return __METAL_ACCESS_ONCE(
    800043ca:	fd442783          	lw	a5,-44(s0)
    800043ce:	00c79713          	slli	a4,a5,0xc
    800043d2:	fe843783          	ld	a5,-24(s0)
    800043d6:	973e                	add	a4,a4,a5
    800043d8:	002007b7          	lui	a5,0x200
    800043dc:	0791                	addi	a5,a5,4
    800043de:	97ba                	add	a5,a5,a4
    800043e0:	439c                	lw	a5,0(a5)
    800043e2:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:25
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM));
}
    800043e4:	853e                	mv	a0,a5
    800043e6:	70a2                	ld	ra,40(sp)
    800043e8:	7402                	ld	s0,32(sp)
    800043ea:	6145                	addi	sp,sp,48
    800043ec:	8082                	ret

00000000800043ee <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:28

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
                                      int context_id, unsigned int id) {
    800043ee:	7179                	addi	sp,sp,-48
    800043f0:	f406                	sd	ra,40(sp)
    800043f2:	f022                	sd	s0,32(sp)
    800043f4:	1800                	addi	s0,sp,48
    800043f6:	fca43c23          	sd	a0,-40(s0)
    800043fa:	87ae                	mv	a5,a1
    800043fc:	8732                	mv	a4,a2
    800043fe:	fcf42a23          	sw	a5,-44(s0)
    80004402:	87ba                	mv	a5,a4
    80004404:	fcf42823          	sw	a5,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:29
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
    80004408:	fd843503          	ld	a0,-40(s0)
    8000440c:	e87ff0ef          	jal	ra,80004292 <__metal_driver_sifive_plic0_control_base>
    80004410:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:31
        (struct metal_interrupt *)plic);
    __METAL_ACCESS_ONCE(
    80004414:	fd442783          	lw	a5,-44(s0)
    80004418:	00c79713          	slli	a4,a5,0xc
    8000441c:	fe843783          	ld	a5,-24(s0)
    80004420:	973e                	add	a4,a4,a5
    80004422:	002007b7          	lui	a5,0x200
    80004426:	0791                	addi	a5,a5,4
    80004428:	97ba                	add	a5,a5,a4
    8000442a:	873e                	mv	a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:34
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM)) = id;
    8000442c:	fd042783          	lw	a5,-48(s0)
    80004430:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:35
}
    80004432:	0001                	nop
    80004434:	70a2                	ld	ra,40(sp)
    80004436:	7402                	ld	s0,32(sp)
    80004438:	6145                	addi	sp,sp,48
    8000443a:	8082                	ret

000000008000443c <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:38

int __metal_plic0_set_threshold(struct metal_interrupt *controller,
                                int context_id, unsigned int threshold) {
    8000443c:	7179                	addi	sp,sp,-48
    8000443e:	f406                	sd	ra,40(sp)
    80004440:	f022                	sd	s0,32(sp)
    80004442:	1800                	addi	s0,sp,48
    80004444:	fca43c23          	sd	a0,-40(s0)
    80004448:	87ae                	mv	a5,a1
    8000444a:	8732                	mv	a4,a2
    8000444c:	fcf42a23          	sw	a5,-44(s0)
    80004450:	87ba                	mv	a5,a4
    80004452:	fcf42823          	sw	a5,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:40
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
    80004456:	fd843503          	ld	a0,-40(s0)
    8000445a:	e39ff0ef          	jal	ra,80004292 <__metal_driver_sifive_plic0_control_base>
    8000445e:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:41
    __METAL_ACCESS_ONCE(
    80004462:	fd442783          	lw	a5,-44(s0)
    80004466:	00c79713          	slli	a4,a5,0xc
    8000446a:	fe843783          	ld	a5,-24(s0)
    8000446e:	973e                	add	a4,a4,a5
    80004470:	002007b7          	lui	a5,0x200
    80004474:	97ba                	add	a5,a5,a4
    80004476:	873e                	mv	a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:44
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD)) = threshold;
    80004478:	fd042783          	lw	a5,-48(s0)
    8000447c:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:45
    return 0;
    8000447e:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:46
}
    80004480:	853e                	mv	a0,a5
    80004482:	70a2                	ld	ra,40(sp)
    80004484:	7402                	ld	s0,32(sp)
    80004486:	6145                	addi	sp,sp,48
    80004488:	8082                	ret

000000008000448a <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:49

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller,
                                         int context_id) {
    8000448a:	7179                	addi	sp,sp,-48
    8000448c:	f406                	sd	ra,40(sp)
    8000448e:	f022                	sd	s0,32(sp)
    80004490:	1800                	addi	s0,sp,48
    80004492:	fca43c23          	sd	a0,-40(s0)
    80004496:	87ae                	mv	a5,a1
    80004498:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:51
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
    8000449c:	fd843503          	ld	a0,-40(s0)
    800044a0:	df3ff0ef          	jal	ra,80004292 <__metal_driver_sifive_plic0_control_base>
    800044a4:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:52
    return __METAL_ACCESS_ONCE(
    800044a8:	fd442783          	lw	a5,-44(s0)
    800044ac:	00c79713          	slli	a4,a5,0xc
    800044b0:	fe843783          	ld	a5,-24(s0)
    800044b4:	973e                	add	a4,a4,a5
    800044b6:	002007b7          	lui	a5,0x200
    800044ba:	97ba                	add	a5,a5,a4
    800044bc:	439c                	lw	a5,0(a5)
    800044be:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:56
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD));
}
    800044c0:	853e                	mv	a0,a5
    800044c2:	70a2                	ld	ra,40(sp)
    800044c4:	7402                	ld	s0,32(sp)
    800044c6:	6145                	addi	sp,sp,48
    800044c8:	8082                	ret

00000000800044ca <__metal_driver_riscv_plic0_set_priority>:
__metal_driver_riscv_plic0_set_priority():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:59

int __metal_driver_riscv_plic0_set_priority(struct metal_interrupt *controller,
                                            int id, unsigned int priority) {
    800044ca:	7179                	addi	sp,sp,-48
    800044cc:	f406                	sd	ra,40(sp)
    800044ce:	f022                	sd	s0,32(sp)
    800044d0:	1800                	addi	s0,sp,48
    800044d2:	fca43c23          	sd	a0,-40(s0)
    800044d6:	87ae                	mv	a5,a1
    800044d8:	8732                	mv	a4,a2
    800044da:	fcf42a23          	sw	a5,-44(s0)
    800044de:	87ba                	mv	a5,a4
    800044e0:	fcf42823          	sw	a5,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:60
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
    800044e4:	fd843503          	ld	a0,-40(s0)
    800044e8:	dabff0ef          	jal	ra,80004292 <__metal_driver_sifive_plic0_control_base>
    800044ec:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:62
        (struct metal_interrupt *)controller);
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority(
    800044f0:	fd843503          	ld	a0,-40(s0)
    800044f4:	df3ff0ef          	jal	ra,800042e6 <__metal_driver_sifive_plic0_max_priority>
    800044f8:	87aa                	mv	a5,a0
    800044fa:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:64
        (struct metal_interrupt *)controller);
    if ((max_priority) && (priority < max_priority)) {
    800044fe:	fe442783          	lw	a5,-28(s0)
    80004502:	2781                	sext.w	a5,a5
    80004504:	cb85                	beqz	a5,80004534 <__metal_driver_riscv_plic0_set_priority+0x6a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:64 (discriminator 1)
    80004506:	fd042703          	lw	a4,-48(s0)
    8000450a:	fe442783          	lw	a5,-28(s0)
    8000450e:	2701                	sext.w	a4,a4
    80004510:	2781                	sext.w	a5,a5
    80004512:	02f77163          	bgeu	a4,a5,80004534 <__metal_driver_riscv_plic0_set_priority+0x6a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:65
        __METAL_ACCESS_ONCE(
    80004516:	fd442783          	lw	a5,-44(s0)
    8000451a:	0027979b          	slliw	a5,a5,0x2
    8000451e:	2781                	sext.w	a5,a5
    80004520:	873e                	mv	a4,a5
    80004522:	fe843783          	ld	a5,-24(s0)
    80004526:	97ba                	add	a5,a5,a4
    80004528:	873e                	mv	a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:67
            (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                               (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) =
    8000452a:	fd042783          	lw	a5,-48(s0)
    8000452e:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:69
            priority;
        return 0;
    80004530:	4781                	li	a5,0
    80004532:	a011                	j	80004536 <__metal_driver_riscv_plic0_set_priority+0x6c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:71
    }
    return -1;
    80004534:	57fd                	li	a5,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:72
}
    80004536:	853e                	mv	a0,a5
    80004538:	70a2                	ld	ra,40(sp)
    8000453a:	7402                	ld	s0,32(sp)
    8000453c:	6145                	addi	sp,sp,48
    8000453e:	8082                	ret

0000000080004540 <__metal_driver_riscv_plic0_get_priority>:
__metal_driver_riscv_plic0_get_priority():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:76

unsigned int
__metal_driver_riscv_plic0_get_priority(struct metal_interrupt *controller,
                                        int id) {
    80004540:	7179                	addi	sp,sp,-48
    80004542:	f406                	sd	ra,40(sp)
    80004544:	f022                	sd	s0,32(sp)
    80004546:	1800                	addi	s0,sp,48
    80004548:	fca43c23          	sd	a0,-40(s0)
    8000454c:	87ae                	mv	a5,a1
    8000454e:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:78
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
    80004552:	fd843503          	ld	a0,-40(s0)
    80004556:	d3dff0ef          	jal	ra,80004292 <__metal_driver_sifive_plic0_control_base>
    8000455a:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:80

    return __METAL_ACCESS_ONCE(
    8000455e:	fd442783          	lw	a5,-44(s0)
    80004562:	0027979b          	slliw	a5,a5,0x2
    80004566:	2781                	sext.w	a5,a5
    80004568:	873e                	mv	a4,a5
    8000456a:	fe843783          	ld	a5,-24(s0)
    8000456e:	97ba                	add	a5,a5,a4
    80004570:	439c                	lw	a5,0(a5)
    80004572:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:83
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                           (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
    80004574:	853e                	mv	a0,a5
    80004576:	70a2                	ld	ra,40(sp)
    80004578:	7402                	ld	s0,32(sp)
    8000457a:	6145                	addi	sp,sp,48
    8000457c:	8082                	ret

000000008000457e <__metal_plic0_enable>:
__metal_plic0_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:86

int __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic,
                         int context_id, int id, int enable) {
    8000457e:	7139                	addi	sp,sp,-64
    80004580:	fc06                	sd	ra,56(sp)
    80004582:	f822                	sd	s0,48(sp)
    80004584:	0080                	addi	s0,sp,64
    80004586:	fca43c23          	sd	a0,-40(s0)
    8000458a:	87ae                	mv	a5,a1
    8000458c:	8736                	mv	a4,a3
    8000458e:	fcf42a23          	sw	a5,-44(s0)
    80004592:	87b2                	mv	a5,a2
    80004594:	fcf42823          	sw	a5,-48(s0)
    80004598:	87ba                	mv	a5,a4
    8000459a:	fcf42623          	sw	a5,-52(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
    8000459e:	fd843503          	ld	a0,-40(s0)
    800045a2:	cf1ff0ef          	jal	ra,80004292 <__metal_driver_sifive_plic0_control_base>
    800045a6:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:91
        (struct metal_interrupt *)plic);

    current = __METAL_ACCESS_ONCE(
    800045aa:	fd442783          	lw	a5,-44(s0)
    800045ae:	00779713          	slli	a4,a5,0x7
    800045b2:	fe843783          	ld	a5,-24(s0)
    800045b6:	97ba                	add	a5,a5,a4
    800045b8:	fd042703          	lw	a4,-48(s0)
    800045bc:	4057571b          	sraiw	a4,a4,0x5
    800045c0:	2701                	sext.w	a4,a4
    800045c2:	0027171b          	slliw	a4,a4,0x2
    800045c6:	2701                	sext.w	a4,a4
    800045c8:	973e                	add	a4,a4,a5
    800045ca:	6789                	lui	a5,0x2
    800045cc:	97ba                	add	a5,a5,a4
    800045ce:	439c                	lw	a5,0(a5)
    800045d0:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:100
    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_ENABLE_BASE +
                           (context_id * METAL_RISCV_PLIC0_ENABLE_PER_HART) +
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
    800045d4:	fcc42783          	lw	a5,-52(s0)
    800045d8:	2781                	sext.w	a5,a5
    800045da:	c385                	beqz	a5,800045fa <__metal_plic0_enable+0x7c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:99 (discriminator 1)
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
    800045dc:	fd042783          	lw	a5,-48(s0)
    800045e0:	8bfd                	andi	a5,a5,31
    800045e2:	2781                	sext.w	a5,a5
    800045e4:	4705                	li	a4,1
    800045e6:	00f717bb          	sllw	a5,a4,a5
    800045ea:	2781                	sext.w	a5,a5
    800045ec:	0007871b          	sext.w	a4,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 1)
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
    800045f0:	fe442783          	lw	a5,-28(s0)
    800045f4:	8fd9                	or	a5,a5,a4
    800045f6:	2781                	sext.w	a5,a5
    800045f8:	a015                	j	8000461c <__metal_plic0_enable+0x9e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 2)
    800045fa:	fd042783          	lw	a5,-48(s0)
    800045fe:	8bfd                	andi	a5,a5,31
    80004600:	2781                	sext.w	a5,a5
    80004602:	4705                	li	a4,1
    80004604:	00f717bb          	sllw	a5,a4,a5
    80004608:	2781                	sext.w	a5,a5
    8000460a:	fff7c793          	not	a5,a5
    8000460e:	2781                	sext.w	a5,a5
    80004610:	0007871b          	sext.w	a4,a5
    80004614:	fe442783          	lw	a5,-28(s0)
    80004618:	8ff9                	and	a5,a5,a4
    8000461a:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:95
    __METAL_ACCESS_ONCE(
    8000461c:	fd442703          	lw	a4,-44(s0)
    80004620:	00771693          	slli	a3,a4,0x7
    80004624:	fe843703          	ld	a4,-24(s0)
    80004628:	9736                	add	a4,a4,a3
    8000462a:	fd042683          	lw	a3,-48(s0)
    8000462e:	4056d69b          	sraiw	a3,a3,0x5
    80004632:	2681                	sext.w	a3,a3
    80004634:	0026969b          	slliw	a3,a3,0x2
    80004638:	2681                	sext.w	a3,a3
    8000463a:	96ba                	add	a3,a3,a4
    8000463c:	6709                	lui	a4,0x2
    8000463e:	9736                	add	a4,a4,a3
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:98
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
    80004640:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:102

    return 0;
    80004642:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:103
}
    80004644:	853e                	mv	a0,a5
    80004646:	70e2                	ld	ra,56(sp)
    80004648:	7442                	ld	s0,48(sp)
    8000464a:	6121                	addi	sp,sp,64
    8000464c:	8082                	ret

000000008000464e <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:105

void __metal_plic0_default_handler(int id, void *priv) { metal_shutdown(300); }
    8000464e:	1101                	addi	sp,sp,-32
    80004650:	ec06                	sd	ra,24(sp)
    80004652:	e822                	sd	s0,16(sp)
    80004654:	1000                	addi	s0,sp,32
    80004656:	87aa                	mv	a5,a0
    80004658:	feb43023          	sd	a1,-32(s0)
    8000465c:	fef42623          	sw	a5,-20(s0)
    80004660:	12c00513          	li	a0,300
    80004664:	6b9000ef          	jal	ra,8000551c <metal_shutdown>

0000000080004668 <__metal_plic0_handler>:
__metal_plic0_handler():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:107

void __metal_plic0_handler(int id, void *priv) {
    80004668:	7139                	addi	sp,sp,-64
    8000466a:	fc06                	sd	ra,56(sp)
    8000466c:	f822                	sd	s0,48(sp)
    8000466e:	0080                	addi	s0,sp,64
    80004670:	87aa                	mv	a5,a0
    80004672:	fcb43023          	sd	a1,-64(s0)
    80004676:	fcf42623          	sw	a5,-52(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:108
    struct __metal_driver_riscv_plic0 *plic = priv;
    8000467a:	fc043783          	ld	a5,-64(s0)
    8000467e:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:110
    int contextid =
        __metal_driver_sifive_plic0_context_ids(__metal_myhart_id());
    80004682:	d6dfd0ef          	jal	ra,800023ee <__metal_myhart_id>
    80004686:	87aa                	mv	a5,a0
    80004688:	2781                	sext.w	a5,a5
    8000468a:	853e                	mv	a0,a5
    8000468c:	cffff0ef          	jal	ra,8000438a <__metal_driver_sifive_plic0_context_ids>
    80004690:	87aa                	mv	a5,a0
    80004692:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:111
    unsigned int idx = __metal_plic0_claim_interrupt(plic, contextid);
    80004696:	fe442783          	lw	a5,-28(s0)
    8000469a:	85be                	mv	a1,a5
    8000469c:	fe843503          	ld	a0,-24(s0)
    800046a0:	d0dff0ef          	jal	ra,800043ac <__metal_plic0_claim_interrupt>
    800046a4:	87aa                	mv	a5,a0
    800046a6:	fef42023          	sw	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:112
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts(
    800046aa:	fe843503          	ld	a0,-24(s0)
    800046ae:	c0fff0ef          	jal	ra,800042bc <__metal_driver_sifive_plic0_num_interrupts>
    800046b2:	87aa                	mv	a5,a0
    800046b4:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:115
        (struct metal_interrupt *)plic);

    if ((idx < num_interrupts) && (plic->metal_exint_table[idx])) {
    800046b8:	fe042703          	lw	a4,-32(s0)
    800046bc:	fdc42783          	lw	a5,-36(s0)
    800046c0:	2701                	sext.w	a4,a4
    800046c2:	2781                	sext.w	a5,a5
    800046c4:	04f77063          	bgeu	a4,a5,80004704 <__metal_plic0_handler+0x9c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
    800046c8:	fe843703          	ld	a4,-24(s0)
    800046cc:	fe046783          	lwu	a5,-32(s0)
    800046d0:	0789                	addi	a5,a5,2
    800046d2:	078e                	slli	a5,a5,0x3
    800046d4:	97ba                	add	a5,a5,a4
    800046d6:	639c                	ld	a5,0(a5)
    800046d8:	c795                	beqz	a5,80004704 <__metal_plic0_handler+0x9c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:116
        plic->metal_exint_table[idx](idx,
    800046da:	fe843703          	ld	a4,-24(s0)
    800046de:	fe046783          	lwu	a5,-32(s0)
    800046e2:	0789                	addi	a5,a5,2
    800046e4:	078e                	slli	a5,a5,0x3
    800046e6:	97ba                	add	a5,a5,a4
    800046e8:	6390                	ld	a2,0(a5)
    800046ea:	fe042683          	lw	a3,-32(s0)
    800046ee:	fe843703          	ld	a4,-24(s0)
    800046f2:	fe046783          	lwu	a5,-32(s0)
    800046f6:	0796                	slli	a5,a5,0x5
    800046f8:	97ba                	add	a5,a5,a4
    800046fa:	1d87b783          	ld	a5,472(a5) # 21d8 <__heap_size+0x19d8>
    800046fe:	85be                	mv	a1,a5
    80004700:	8536                	mv	a0,a3
    80004702:	9602                	jalr	a2
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:120
                                     plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, contextid, idx);
    80004704:	fe042703          	lw	a4,-32(s0)
    80004708:	fe442783          	lw	a5,-28(s0)
    8000470c:	863a                	mv	a2,a4
    8000470e:	85be                	mv	a1,a5
    80004710:	fe843503          	ld	a0,-24(s0)
    80004714:	cdbff0ef          	jal	ra,800043ee <__metal_plic0_complete_interrupt>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:121
}
    80004718:	0001                	nop
    8000471a:	70e2                	ld	ra,56(sp)
    8000471c:	7442                	ld	s0,48(sp)
    8000471e:	6121                	addi	sp,sp,64
    80004720:	8082                	ret

0000000080004722 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:123

void __metal_driver_riscv_plic0_init(struct metal_interrupt *controller) {
    80004722:	715d                	addi	sp,sp,-80
    80004724:	e486                	sd	ra,72(sp)
    80004726:	e0a2                	sd	s0,64(sp)
    80004728:	0880                	addi	s0,sp,80
    8000472a:	faa43c23          	sd	a0,-72(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:124
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    8000472e:	fb843783          	ld	a5,-72(s0)
    80004732:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:126

    if (!plic->init_done) {
    80004736:	fe043783          	ld	a5,-32(s0)
    8000473a:	479c                	lw	a5,8(a5)
    8000473c:	14079963          	bnez	a5,8000488e <__metal_driver_riscv_plic0_init+0x16c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:130
        int num_interrupts, line;
        struct metal_interrupt *intc;

        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
    80004740:	fe042623          	sw	zero,-20(s0)
    80004744:	aa15                	j	80004878 <__metal_driver_riscv_plic0_init+0x156>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:132
            num_interrupts =
                __metal_driver_sifive_plic0_num_interrupts(controller);
    80004746:	fb843503          	ld	a0,-72(s0)
    8000474a:	b73ff0ef          	jal	ra,800042bc <__metal_driver_sifive_plic0_num_interrupts>
    8000474e:	87aa                	mv	a5,a0
    80004750:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:133
            intc = __metal_driver_sifive_plic0_interrupt_parents(controller,
    80004754:	fec42783          	lw	a5,-20(s0)
    80004758:	85be                	mv	a1,a5
    8000475a:	fb843503          	ld	a0,-72(s0)
    8000475e:	bb1ff0ef          	jal	ra,8000430e <__metal_driver_sifive_plic0_interrupt_parents>
    80004762:	fca43823          	sd	a0,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:136
                                                                 parent);
            line =
                __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
    80004766:	fec42783          	lw	a5,-20(s0)
    8000476a:	85be                	mv	a1,a5
    8000476c:	fb843503          	ld	a0,-72(s0)
    80004770:	be3ff0ef          	jal	ra,80004352 <__metal_driver_sifive_plic0_interrupt_lines>
    80004774:	87aa                	mv	a5,a0
    80004776:	fcf42623          	sw	a5,-52(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:139

            /* Initialize ist parent controller, aka cpu_intc. */
            intc->vtable->interrupt_init(intc);
    8000477a:	fd043783          	ld	a5,-48(s0)
    8000477e:	639c                	ld	a5,0(a5)
    80004780:	639c                	ld	a5,0(a5)
    80004782:	fd043503          	ld	a0,-48(s0)
    80004786:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:141

            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
    80004788:	fe042423          	sw	zero,-24(s0)
    8000478c:	a895                	j	80004800 <__metal_driver_riscv_plic0_init+0xde>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:142
                __metal_plic0_enable(plic, parent, i, METAL_DISABLE);
    8000478e:	fe842703          	lw	a4,-24(s0)
    80004792:	fec42783          	lw	a5,-20(s0)
    80004796:	4681                	li	a3,0
    80004798:	863a                	mv	a2,a4
    8000479a:	85be                	mv	a1,a5
    8000479c:	fe043503          	ld	a0,-32(s0)
    800047a0:	ddfff0ef          	jal	ra,8000457e <__metal_plic0_enable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:143
                if (i < num_interrupts) {
    800047a4:	fe842703          	lw	a4,-24(s0)
    800047a8:	fdc42783          	lw	a5,-36(s0)
    800047ac:	2701                	sext.w	a4,a4
    800047ae:	2781                	sext.w	a5,a5
    800047b0:	04f75363          	bge	a4,a5,800047f6 <__metal_driver_riscv_plic0_init+0xd4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:144
                    __metal_driver_riscv_plic0_set_priority(controller, i, 0);
    800047b4:	fe842783          	lw	a5,-24(s0)
    800047b8:	4601                	li	a2,0
    800047ba:	85be                	mv	a1,a5
    800047bc:	fb843503          	ld	a0,-72(s0)
    800047c0:	d0bff0ef          	jal	ra,800044ca <__metal_driver_riscv_plic0_set_priority>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:145
                    plic->metal_exint_table[i] = NULL;
    800047c4:	fe043703          	ld	a4,-32(s0)
    800047c8:	fe842783          	lw	a5,-24(s0)
    800047cc:	0789                	addi	a5,a5,2
    800047ce:	078e                	slli	a5,a5,0x3
    800047d0:	97ba                	add	a5,a5,a4
    800047d2:	0007b023          	sd	zero,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:146
                    plic->metal_exdata_table[i].sub_int = NULL;
    800047d6:	fe043703          	ld	a4,-32(s0)
    800047da:	fe842783          	lw	a5,-24(s0)
    800047de:	0796                	slli	a5,a5,0x5
    800047e0:	97ba                	add	a5,a5,a4
    800047e2:	1c07b823          	sd	zero,464(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:147
                    plic->metal_exdata_table[i].exint_data = NULL;
    800047e6:	fe043703          	ld	a4,-32(s0)
    800047ea:	fe842783          	lw	a5,-24(s0)
    800047ee:	0796                	slli	a5,a5,0x5
    800047f0:	97ba                	add	a5,a5,a4
    800047f2:	1c07bc23          	sd	zero,472(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:141 (discriminator 2)
            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
    800047f6:	fe842783          	lw	a5,-24(s0)
    800047fa:	2785                	addiw	a5,a5,1
    800047fc:	fef42423          	sw	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:141 (discriminator 1)
    80004800:	fe842783          	lw	a5,-24(s0)
    80004804:	0007871b          	sext.w	a4,a5
    80004808:	3ff00793          	li	a5,1023
    8000480c:	f8e7d1e3          	bge	a5,a4,8000478e <__metal_driver_riscv_plic0_init+0x6c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:151 (discriminator 2)
                }
            }

            __metal_plic0_set_threshold(controller, parent, 0);
    80004810:	fec42783          	lw	a5,-20(s0)
    80004814:	4601                	li	a2,0
    80004816:	85be                	mv	a1,a5
    80004818:	fb843503          	ld	a0,-72(s0)
    8000481c:	c21ff0ef          	jal	ra,8000443c <__metal_plic0_set_threshold>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:154 (discriminator 2)

            /* Register plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_register(intc, line, NULL, plic);
    80004820:	fd043783          	ld	a5,-48(s0)
    80004824:	639c                	ld	a5,0(a5)
    80004826:	7f98                	ld	a4,56(a5)
    80004828:	fcc42783          	lw	a5,-52(s0)
    8000482c:	fe043683          	ld	a3,-32(s0)
    80004830:	4601                	li	a2,0
    80004832:	85be                	mv	a1,a5
    80004834:	fd043503          	ld	a0,-48(s0)
    80004838:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:156 (discriminator 2)
            /* Register plic handler for dispatching its device interrupts */
            intc->vtable->interrupt_register(intc, line, __metal_plic0_handler,
    8000483a:	fd043783          	ld	a5,-48(s0)
    8000483e:	639c                	ld	a5,0(a5)
    80004840:	7f98                	ld	a4,56(a5)
    80004842:	fcc42783          	lw	a5,-52(s0)
    80004846:	fe043683          	ld	a3,-32(s0)
    8000484a:	00000617          	auipc	a2,0x0
    8000484e:	e1e60613          	addi	a2,a2,-482 # 80004668 <__metal_plic0_handler>
    80004852:	85be                	mv	a1,a5
    80004854:	fd043503          	ld	a0,-48(s0)
    80004858:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:159 (discriminator 2)
                                             plic);
            /* Enable plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_enable(intc, line);
    8000485a:	fd043783          	ld	a5,-48(s0)
    8000485e:	639c                	ld	a5,0(a5)
    80004860:	67b8                	ld	a4,72(a5)
    80004862:	fcc42783          	lw	a5,-52(s0)
    80004866:	85be                	mv	a1,a5
    80004868:	fd043503          	ld	a0,-48(s0)
    8000486c:	9702                	jalr	a4
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
    8000486e:	fec42783          	lw	a5,-20(s0)
    80004872:	2785                	addiw	a5,a5,1
    80004874:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 1)
    80004878:	fec42783          	lw	a5,-20(s0)
    8000487c:	0007871b          	sext.w	a4,a5
    80004880:	4785                	li	a5,1
    80004882:	ece7d2e3          	bge	a5,a4,80004746 <__metal_driver_riscv_plic0_init+0x24>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:161
        }
        plic->init_done = 1;
    80004886:	fe043783          	ld	a5,-32(s0)
    8000488a:	4705                	li	a4,1
    8000488c:	c798                	sw	a4,8(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:163
    }
}
    8000488e:	0001                	nop
    80004890:	60a6                	ld	ra,72(sp)
    80004892:	6406                	ld	s0,64(sp)
    80004894:	6161                	addi	sp,sp,80
    80004896:	8082                	ret

0000000080004898 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:167

int __metal_driver_riscv_plic0_register(struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv) {
    80004898:	7139                	addi	sp,sp,-64
    8000489a:	fc06                	sd	ra,56(sp)
    8000489c:	f822                	sd	s0,48(sp)
    8000489e:	0080                	addi	s0,sp,64
    800048a0:	fca43c23          	sd	a0,-40(s0)
    800048a4:	87ae                	mv	a5,a1
    800048a6:	fcc43423          	sd	a2,-56(s0)
    800048aa:	fcd43023          	sd	a3,-64(s0)
    800048ae:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:168
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    800048b2:	fd843783          	ld	a5,-40(s0)
    800048b6:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:170

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    800048ba:	fd843503          	ld	a0,-40(s0)
    800048be:	9ffff0ef          	jal	ra,800042bc <__metal_driver_sifive_plic0_num_interrupts>
    800048c2:	87aa                	mv	a5,a0
    800048c4:	873e                	mv	a4,a5
    800048c6:	fd442783          	lw	a5,-44(s0)
    800048ca:	2781                	sext.w	a5,a5
    800048cc:	00e7c463          	blt	a5,a4,800048d4 <__metal_driver_riscv_plic0_register+0x3c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:171
        return -1;
    800048d0:	57fd                	li	a5,-1
    800048d2:	a041                	j	80004952 <__metal_driver_riscv_plic0_register+0xba>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:174
    }

    if (isr) {
    800048d4:	fc843783          	ld	a5,-56(s0)
    800048d8:	cf95                	beqz	a5,80004914 <__metal_driver_riscv_plic0_register+0x7c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:175
        __metal_driver_riscv_plic0_set_priority(controller, id, 2);
    800048da:	fd442783          	lw	a5,-44(s0)
    800048de:	4609                	li	a2,2
    800048e0:	85be                	mv	a1,a5
    800048e2:	fd843503          	ld	a0,-40(s0)
    800048e6:	be5ff0ef          	jal	ra,800044ca <__metal_driver_riscv_plic0_set_priority>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:176
        plic->metal_exint_table[id] = isr;
    800048ea:	fe843703          	ld	a4,-24(s0)
    800048ee:	fd442783          	lw	a5,-44(s0)
    800048f2:	0789                	addi	a5,a5,2
    800048f4:	078e                	slli	a5,a5,0x3
    800048f6:	97ba                	add	a5,a5,a4
    800048f8:	fc843703          	ld	a4,-56(s0)
    800048fc:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:177
        plic->metal_exdata_table[id].exint_data = priv;
    800048fe:	fe843703          	ld	a4,-24(s0)
    80004902:	fd442783          	lw	a5,-44(s0)
    80004906:	0796                	slli	a5,a5,0x5
    80004908:	97ba                	add	a5,a5,a4
    8000490a:	fc043703          	ld	a4,-64(s0)
    8000490e:	1ce7bc23          	sd	a4,472(a5)
    80004912:	a83d                	j	80004950 <__metal_driver_riscv_plic0_register+0xb8>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:179
    } else {
        __metal_driver_riscv_plic0_set_priority(controller, id, 1);
    80004914:	fd442783          	lw	a5,-44(s0)
    80004918:	4605                	li	a2,1
    8000491a:	85be                	mv	a1,a5
    8000491c:	fd843503          	ld	a0,-40(s0)
    80004920:	babff0ef          	jal	ra,800044ca <__metal_driver_riscv_plic0_set_priority>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:180
        plic->metal_exint_table[id] = __metal_plic0_default_handler;
    80004924:	fe843703          	ld	a4,-24(s0)
    80004928:	fd442783          	lw	a5,-44(s0)
    8000492c:	0789                	addi	a5,a5,2
    8000492e:	078e                	slli	a5,a5,0x3
    80004930:	97ba                	add	a5,a5,a4
    80004932:	00000717          	auipc	a4,0x0
    80004936:	d1c70713          	addi	a4,a4,-740 # 8000464e <__metal_plic0_default_handler>
    8000493a:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:181
        plic->metal_exdata_table[id].sub_int = priv;
    8000493c:	fe843703          	ld	a4,-24(s0)
    80004940:	fd442783          	lw	a5,-44(s0)
    80004944:	0796                	slli	a5,a5,0x5
    80004946:	97ba                	add	a5,a5,a4
    80004948:	fc043703          	ld	a4,-64(s0)
    8000494c:	1ce7b823          	sd	a4,464(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:184
    }

    return 0;
    80004950:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:185
}
    80004952:	853e                	mv	a0,a5
    80004954:	70e2                	ld	ra,56(sp)
    80004956:	7442                	ld	s0,48(sp)
    80004958:	6121                	addi	sp,sp,64
    8000495a:	8082                	ret

000000008000495c <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:188

int __metal_driver_riscv_plic0_enable(struct metal_interrupt *controller,
                                      int id) {
    8000495c:	7179                	addi	sp,sp,-48
    8000495e:	f406                	sd	ra,40(sp)
    80004960:	f022                	sd	s0,32(sp)
    80004962:	1800                	addi	s0,sp,48
    80004964:	fca43c23          	sd	a0,-40(s0)
    80004968:	87ae                	mv	a5,a1
    8000496a:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:189
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    8000496e:	fd843783          	ld	a5,-40(s0)
    80004972:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:191

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    80004976:	fd843503          	ld	a0,-40(s0)
    8000497a:	943ff0ef          	jal	ra,800042bc <__metal_driver_sifive_plic0_num_interrupts>
    8000497e:	87aa                	mv	a5,a0
    80004980:	873e                	mv	a4,a5
    80004982:	fd442783          	lw	a5,-44(s0)
    80004986:	2781                	sext.w	a5,a5
    80004988:	00e7c463          	blt	a5,a4,80004990 <__metal_driver_riscv_plic0_enable+0x34>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:192
        return -1;
    8000498c:	57fd                	li	a5,-1
    8000498e:	a839                	j	800049ac <__metal_driver_riscv_plic0_enable+0x50>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:195
    }

    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_ENABLE);
    80004990:	a5ffd0ef          	jal	ra,800023ee <__metal_myhart_id>
    80004994:	87aa                	mv	a5,a0
    80004996:	2781                	sext.w	a5,a5
    80004998:	fd442703          	lw	a4,-44(s0)
    8000499c:	4685                	li	a3,1
    8000499e:	863a                	mv	a2,a4
    800049a0:	85be                	mv	a1,a5
    800049a2:	fe843503          	ld	a0,-24(s0)
    800049a6:	bd9ff0ef          	jal	ra,8000457e <__metal_plic0_enable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:196
    return 0;
    800049aa:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:197
}
    800049ac:	853e                	mv	a0,a5
    800049ae:	70a2                	ld	ra,40(sp)
    800049b0:	7402                	ld	s0,32(sp)
    800049b2:	6145                	addi	sp,sp,48
    800049b4:	8082                	ret

00000000800049b6 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:200

int __metal_driver_riscv_plic0_disable(struct metal_interrupt *controller,
                                       int id) {
    800049b6:	7179                	addi	sp,sp,-48
    800049b8:	f406                	sd	ra,40(sp)
    800049ba:	f022                	sd	s0,32(sp)
    800049bc:	1800                	addi	s0,sp,48
    800049be:	fca43c23          	sd	a0,-40(s0)
    800049c2:	87ae                	mv	a5,a1
    800049c4:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:201
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    800049c8:	fd843783          	ld	a5,-40(s0)
    800049cc:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:203

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    800049d0:	fd843503          	ld	a0,-40(s0)
    800049d4:	8e9ff0ef          	jal	ra,800042bc <__metal_driver_sifive_plic0_num_interrupts>
    800049d8:	87aa                	mv	a5,a0
    800049da:	873e                	mv	a4,a5
    800049dc:	fd442783          	lw	a5,-44(s0)
    800049e0:	2781                	sext.w	a5,a5
    800049e2:	00e7c463          	blt	a5,a4,800049ea <__metal_driver_riscv_plic0_disable+0x34>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:204
        return -1;
    800049e6:	57fd                	li	a5,-1
    800049e8:	a839                	j	80004a06 <__metal_driver_riscv_plic0_disable+0x50>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:206
    }
    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_DISABLE);
    800049ea:	a05fd0ef          	jal	ra,800023ee <__metal_myhart_id>
    800049ee:	87aa                	mv	a5,a0
    800049f0:	2781                	sext.w	a5,a5
    800049f2:	fd442703          	lw	a4,-44(s0)
    800049f6:	4681                	li	a3,0
    800049f8:	863a                	mv	a2,a4
    800049fa:	85be                	mv	a1,a5
    800049fc:	fe843503          	ld	a0,-24(s0)
    80004a00:	b7fff0ef          	jal	ra,8000457e <__metal_plic0_enable>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:207
    return 0;
    80004a04:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:208
}
    80004a06:	853e                	mv	a0,a5
    80004a08:	70a2                	ld	ra,40(sp)
    80004a0a:	7402                	ld	s0,32(sp)
    80004a0c:	6145                	addi	sp,sp,48
    80004a0e:	8082                	ret

0000000080004a10 <__metal_driver_riscv_plic0_set_threshold>:
__metal_driver_riscv_plic0_set_threshold():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:211

int __metal_driver_riscv_plic0_set_threshold(struct metal_interrupt *controller,
                                             unsigned int threshold) {
    80004a10:	1101                	addi	sp,sp,-32
    80004a12:	ec06                	sd	ra,24(sp)
    80004a14:	e822                	sd	s0,16(sp)
    80004a16:	1000                	addi	s0,sp,32
    80004a18:	fea43423          	sd	a0,-24(s0)
    80004a1c:	87ae                	mv	a5,a1
    80004a1e:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:212
    return __metal_plic0_set_threshold(controller, __metal_myhart_id(),
    80004a22:	9cdfd0ef          	jal	ra,800023ee <__metal_myhart_id>
    80004a26:	87aa                	mv	a5,a0
    80004a28:	2781                	sext.w	a5,a5
    80004a2a:	fe442703          	lw	a4,-28(s0)
    80004a2e:	863a                	mv	a2,a4
    80004a30:	85be                	mv	a1,a5
    80004a32:	fe843503          	ld	a0,-24(s0)
    80004a36:	a07ff0ef          	jal	ra,8000443c <__metal_plic0_set_threshold>
    80004a3a:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:214
                                       threshold);
}
    80004a3c:	853e                	mv	a0,a5
    80004a3e:	60e2                	ld	ra,24(sp)
    80004a40:	6442                	ld	s0,16(sp)
    80004a42:	6105                	addi	sp,sp,32
    80004a44:	8082                	ret

0000000080004a46 <__metal_driver_riscv_plic0_get_threshold>:
__metal_driver_riscv_plic0_get_threshold():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:217

unsigned int
__metal_driver_riscv_plic0_get_threshold(struct metal_interrupt *controller) {
    80004a46:	1101                	addi	sp,sp,-32
    80004a48:	ec06                	sd	ra,24(sp)
    80004a4a:	e822                	sd	s0,16(sp)
    80004a4c:	1000                	addi	s0,sp,32
    80004a4e:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:218
    return __metal_plic0_get_threshold(controller, __metal_myhart_id());
    80004a52:	99dfd0ef          	jal	ra,800023ee <__metal_myhart_id>
    80004a56:	87aa                	mv	a5,a0
    80004a58:	2781                	sext.w	a5,a5
    80004a5a:	85be                	mv	a1,a5
    80004a5c:	fe843503          	ld	a0,-24(s0)
    80004a60:	a2bff0ef          	jal	ra,8000448a <__metal_plic0_get_threshold>
    80004a64:	87aa                	mv	a5,a0
    80004a66:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:219
}
    80004a68:	853e                	mv	a0,a5
    80004a6a:	60e2                	ld	ra,24(sp)
    80004a6c:	6442                	ld	s0,16(sp)
    80004a6e:	6105                	addi	sp,sp,32
    80004a70:	8082                	ret

0000000080004a72 <__metal_driver_riscv_plic0_affinity_enable>:
__metal_driver_riscv_plic0_affinity_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:223

metal_affinity
__metal_driver_riscv_plic0_affinity_enable(struct metal_interrupt *controller,
                                           metal_affinity bitmask, int id) {
    80004a72:	715d                	addi	sp,sp,-80
    80004a74:	e486                	sd	ra,72(sp)
    80004a76:	e0a2                	sd	s0,64(sp)
    80004a78:	0880                	addi	s0,sp,80
    80004a7a:	fca43423          	sd	a0,-56(s0)
    80004a7e:	fcb43023          	sd	a1,-64(s0)
    80004a82:	87b2                	mv	a5,a2
    80004a84:	faf42e23          	sw	a5,-68(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:224
    metal_affinity ret = {0};
    80004a88:	fc043c23          	sd	zero,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:227
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    80004a8c:	fc843783          	ld	a5,-56(s0)
    80004a90:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:229

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    80004a94:	fc843503          	ld	a0,-56(s0)
    80004a98:	825ff0ef          	jal	ra,800042bc <__metal_driver_sifive_plic0_num_interrupts>
    80004a9c:	87aa                	mv	a5,a0
    80004a9e:	873e                	mv	a4,a5
    80004aa0:	fbc42783          	lw	a5,-68(s0)
    80004aa4:	2781                	sext.w	a5,a5
    80004aa6:	00e7c863          	blt	a5,a4,80004ab6 <__metal_driver_riscv_plic0_affinity_enable+0x44>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:230
        metal_affinity_set_val(ret, -1);
    80004aaa:	57fd                	li	a5,-1
    80004aac:	fcf43c23          	sd	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:231
        return ret;
    80004ab0:	fd843783          	ld	a5,-40(s0)
    80004ab4:	a08d                	j	80004b16 <__metal_driver_riscv_plic0_affinity_enable+0xa4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:234
    }

    for_each_metal_affinity(context, bitmask) {
    80004ab6:	fe042623          	sw	zero,-20(s0)
    80004aba:	a889                	j	80004b0c <__metal_driver_riscv_plic0_affinity_enable+0x9a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:235
        if (context != 0)
    80004abc:	fec42783          	lw	a5,-20(s0)
    80004ac0:	2781                	sext.w	a5,a5
    80004ac2:	cb9d                	beqz	a5,80004af8 <__metal_driver_riscv_plic0_affinity_enable+0x86>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:236
            metal_affinity_set_bit(
    80004ac4:	fbc42703          	lw	a4,-68(s0)
    80004ac8:	fec42783          	lw	a5,-20(s0)
    80004acc:	4685                	li	a3,1
    80004ace:	863a                	mv	a2,a4
    80004ad0:	85be                	mv	a1,a5
    80004ad2:	fe043503          	ld	a0,-32(s0)
    80004ad6:	aa9ff0ef          	jal	ra,8000457e <__metal_plic0_enable>
    80004ada:	87aa                	mv	a5,a0
    80004adc:	8b85                	andi	a5,a5,1
    80004ade:	0007871b          	sext.w	a4,a5
    80004ae2:	fec42783          	lw	a5,-20(s0)
    80004ae6:	00f717bb          	sllw	a5,a4,a5
    80004aea:	0007871b          	sext.w	a4,a5
    80004aee:	fd843783          	ld	a5,-40(s0)
    80004af2:	8fd9                	or	a5,a5,a4
    80004af4:	fcf43c23          	sd	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
    80004af8:	fec42783          	lw	a5,-20(s0)
    80004afc:	2785                	addiw	a5,a5,1
    80004afe:	fef42623          	sw	a5,-20(s0)
    80004b02:	fc043783          	ld	a5,-64(s0)
    80004b06:	8385                	srli	a5,a5,0x1
    80004b08:	fcf43023          	sd	a5,-64(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 1)
    80004b0c:	fc043783          	ld	a5,-64(s0)
    80004b10:	f7d5                	bnez	a5,80004abc <__metal_driver_riscv_plic0_affinity_enable+0x4a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:241
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_ENABLE));
    }

    return ret;
    80004b12:	fd843783          	ld	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:242 (discriminator 1)
}
    80004b16:	853e                	mv	a0,a5
    80004b18:	60a6                	ld	ra,72(sp)
    80004b1a:	6406                	ld	s0,64(sp)
    80004b1c:	6161                	addi	sp,sp,80
    80004b1e:	8082                	ret

0000000080004b20 <__metal_driver_riscv_plic0_affinity_disable>:
__metal_driver_riscv_plic0_affinity_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:246

metal_affinity
__metal_driver_riscv_plic0_affinity_disable(struct metal_interrupt *controller,
                                            metal_affinity bitmask, int id) {
    80004b20:	715d                	addi	sp,sp,-80
    80004b22:	e486                	sd	ra,72(sp)
    80004b24:	e0a2                	sd	s0,64(sp)
    80004b26:	0880                	addi	s0,sp,80
    80004b28:	fca43423          	sd	a0,-56(s0)
    80004b2c:	fcb43023          	sd	a1,-64(s0)
    80004b30:	87b2                	mv	a5,a2
    80004b32:	faf42e23          	sw	a5,-68(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:247
    metal_affinity ret = {0};
    80004b36:	fc043c23          	sd	zero,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:250
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
    80004b3a:	fc843783          	ld	a5,-56(s0)
    80004b3e:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:252

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
    80004b42:	fc843503          	ld	a0,-56(s0)
    80004b46:	f76ff0ef          	jal	ra,800042bc <__metal_driver_sifive_plic0_num_interrupts>
    80004b4a:	87aa                	mv	a5,a0
    80004b4c:	873e                	mv	a4,a5
    80004b4e:	fbc42783          	lw	a5,-68(s0)
    80004b52:	2781                	sext.w	a5,a5
    80004b54:	00e7c863          	blt	a5,a4,80004b64 <__metal_driver_riscv_plic0_affinity_disable+0x44>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:253
        metal_affinity_set_val(ret, -1);
    80004b58:	57fd                	li	a5,-1
    80004b5a:	fcf43c23          	sd	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:254
        return ret;
    80004b5e:	fd843783          	ld	a5,-40(s0)
    80004b62:	a08d                	j	80004bc4 <__metal_driver_riscv_plic0_affinity_disable+0xa4>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:257
    }

    for_each_metal_affinity(context, bitmask) {
    80004b64:	fe042623          	sw	zero,-20(s0)
    80004b68:	a889                	j	80004bba <__metal_driver_riscv_plic0_affinity_disable+0x9a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:258
        if (context != 0)
    80004b6a:	fec42783          	lw	a5,-20(s0)
    80004b6e:	2781                	sext.w	a5,a5
    80004b70:	cb9d                	beqz	a5,80004ba6 <__metal_driver_riscv_plic0_affinity_disable+0x86>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:259
            metal_affinity_set_bit(
    80004b72:	fbc42703          	lw	a4,-68(s0)
    80004b76:	fec42783          	lw	a5,-20(s0)
    80004b7a:	4681                	li	a3,0
    80004b7c:	863a                	mv	a2,a4
    80004b7e:	85be                	mv	a1,a5
    80004b80:	fe043503          	ld	a0,-32(s0)
    80004b84:	9fbff0ef          	jal	ra,8000457e <__metal_plic0_enable>
    80004b88:	87aa                	mv	a5,a0
    80004b8a:	8b85                	andi	a5,a5,1
    80004b8c:	0007871b          	sext.w	a4,a5
    80004b90:	fec42783          	lw	a5,-20(s0)
    80004b94:	00f717bb          	sllw	a5,a4,a5
    80004b98:	0007871b          	sext.w	a4,a5
    80004b9c:	fd843783          	ld	a5,-40(s0)
    80004ba0:	8fd9                	or	a5,a5,a4
    80004ba2:	fcf43c23          	sd	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
    80004ba6:	fec42783          	lw	a5,-20(s0)
    80004baa:	2785                	addiw	a5,a5,1
    80004bac:	fef42623          	sw	a5,-20(s0)
    80004bb0:	fc043783          	ld	a5,-64(s0)
    80004bb4:	8385                	srli	a5,a5,0x1
    80004bb6:	fcf43023          	sd	a5,-64(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 1)
    80004bba:	fc043783          	ld	a5,-64(s0)
    80004bbe:	f7d5                	bnez	a5,80004b6a <__metal_driver_riscv_plic0_affinity_disable+0x4a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:264
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_DISABLE));
    }

    return ret;
    80004bc0:	fd843783          	ld	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:265 (discriminator 1)
}
    80004bc4:	853e                	mv	a0,a5
    80004bc6:	60a6                	ld	ra,72(sp)
    80004bc8:	6406                	ld	s0,64(sp)
    80004bca:	6161                	addi	sp,sp,80
    80004bcc:	8082                	ret

0000000080004bce <__metal_driver_riscv_plic0_affinity_set_threshold>:
__metal_driver_riscv_plic0_affinity_set_threshold():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:269

metal_affinity __metal_driver_riscv_plic0_affinity_set_threshold(
    struct metal_interrupt *controller, metal_affinity bitmask,
    unsigned int threshold) {
    80004bce:	7139                	addi	sp,sp,-64
    80004bd0:	fc06                	sd	ra,56(sp)
    80004bd2:	f822                	sd	s0,48(sp)
    80004bd4:	0080                	addi	s0,sp,64
    80004bd6:	fca43c23          	sd	a0,-40(s0)
    80004bda:	fcb43823          	sd	a1,-48(s0)
    80004bde:	87b2                	mv	a5,a2
    80004be0:	fcf42623          	sw	a5,-52(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:270
    metal_affinity ret = {0};
    80004be4:	fe043023          	sd	zero,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:273
    int context;

    for_each_metal_affinity(context, bitmask) {
    80004be8:	fe042623          	sw	zero,-20(s0)
    80004bec:	a881                	j	80004c3c <__metal_driver_riscv_plic0_affinity_set_threshold+0x6e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:274
        if (context != 0)
    80004bee:	fec42783          	lw	a5,-20(s0)
    80004bf2:	2781                	sext.w	a5,a5
    80004bf4:	cb95                	beqz	a5,80004c28 <__metal_driver_riscv_plic0_affinity_set_threshold+0x5a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:275
            metal_affinity_set_bit(
    80004bf6:	fcc42703          	lw	a4,-52(s0)
    80004bfa:	fec42783          	lw	a5,-20(s0)
    80004bfe:	863a                	mv	a2,a4
    80004c00:	85be                	mv	a1,a5
    80004c02:	fd843503          	ld	a0,-40(s0)
    80004c06:	837ff0ef          	jal	ra,8000443c <__metal_plic0_set_threshold>
    80004c0a:	87aa                	mv	a5,a0
    80004c0c:	8b85                	andi	a5,a5,1
    80004c0e:	0007871b          	sext.w	a4,a5
    80004c12:	fec42783          	lw	a5,-20(s0)
    80004c16:	00f717bb          	sllw	a5,a4,a5
    80004c1a:	0007871b          	sext.w	a4,a5
    80004c1e:	fe043783          	ld	a5,-32(s0)
    80004c22:	8fd9                	or	a5,a5,a4
    80004c24:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
    80004c28:	fec42783          	lw	a5,-20(s0)
    80004c2c:	2785                	addiw	a5,a5,1
    80004c2e:	fef42623          	sw	a5,-20(s0)
    80004c32:	fd043783          	ld	a5,-48(s0)
    80004c36:	8385                	srli	a5,a5,0x1
    80004c38:	fcf43823          	sd	a5,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 1)
    80004c3c:	fd043783          	ld	a5,-48(s0)
    80004c40:	f7dd                	bnez	a5,80004bee <__metal_driver_riscv_plic0_affinity_set_threshold+0x20>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:280
                ret, context,
                __metal_plic0_set_threshold(controller, context, threshold));
    }

    return ret;
    80004c42:	fe043783          	ld	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:281
}
    80004c46:	853e                	mv	a0,a5
    80004c48:	70e2                	ld	ra,56(sp)
    80004c4a:	7442                	ld	s0,48(sp)
    80004c4c:	6121                	addi	sp,sp,64
    80004c4e:	8082                	ret

0000000080004c50 <__metal_driver_riscv_plic0_affinity_get_threshold>:
__metal_driver_riscv_plic0_affinity_get_threshold():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:284

unsigned int __metal_driver_riscv_plic0_affinity_get_threshold(
    struct metal_interrupt *controller, int context_id) {
    80004c50:	1101                	addi	sp,sp,-32
    80004c52:	ec06                	sd	ra,24(sp)
    80004c54:	e822                	sd	s0,16(sp)
    80004c56:	1000                	addi	s0,sp,32
    80004c58:	fea43423          	sd	a0,-24(s0)
    80004c5c:	87ae                	mv	a5,a1
    80004c5e:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:285
    __metal_plic0_get_threshold(controller, context_id);
    80004c62:	fe442783          	lw	a5,-28(s0)
    80004c66:	85be                	mv	a1,a5
    80004c68:	fe843503          	ld	a0,-24(s0)
    80004c6c:	81fff0ef          	jal	ra,8000448a <__metal_plic0_get_threshold>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:286
    return 0;
    80004c70:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/riscv_plic0.c:287
}
    80004c72:	853e                	mv	a0,a5
    80004c74:	60e2                	ld	ra,24(sp)
    80004c76:	6442                	ld	s0,16(sp)
    80004c78:	6105                	addi	sp,sp,32
    80004c7a:	8082                	ret

0000000080004c7c <__metal_driver_sifive_test0_base>:
__metal_driver_sifive_test0_base():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:343



/* --------------------- sifive_test0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_test0_base(const struct __metal_shutdown *sd)
{
    80004c7c:	1101                	addi	sp,sp,-32
    80004c7e:	ec22                	sd	s0,24(sp)
    80004c80:	1000                	addi	s0,sp,32
    80004c82:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:344
	if ((uintptr_t)sd == (uintptr_t)&__metal_dt_test_100000) {
    80004c86:	fe843703          	ld	a4,-24(s0)
    80004c8a:	83018793          	addi	a5,gp,-2000 # 80006bd8 <__metal_dt_test_100000>
    80004c8e:	00f71563          	bne	a4,a5,80004c98 <__metal_driver_sifive_test0_base+0x1c>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:345
		return METAL_SIFIVE_TEST0_100000_BASE_ADDRESS;
    80004c92:	001007b7          	lui	a5,0x100
    80004c96:	a011                	j	80004c9a <__metal_driver_sifive_test0_base+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:348
	}
	else {
		return 0;
    80004c98:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:350
	}
}
    80004c9a:	853e                	mv	a0,a5
    80004c9c:	6462                	ld	s0,24(sp)
    80004c9e:	6105                	addi	sp,sp,32
    80004ca0:	8082                	ret

0000000080004ca2 <__metal_driver_sifive_test0_exit>:
__metal_driver_sifive_test0_exit():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_test0.c:18
#include <metal/io.h>

void __metal_driver_sifive_test0_exit(const struct __metal_shutdown *sd,
                                      int code) __attribute__((noreturn));
void __metal_driver_sifive_test0_exit(const struct __metal_shutdown *sd,
                                      int code) {
    80004ca2:	7179                	addi	sp,sp,-48
    80004ca4:	f406                	sd	ra,40(sp)
    80004ca6:	f022                	sd	s0,32(sp)
    80004ca8:	1800                	addi	s0,sp,48
    80004caa:	fca43c23          	sd	a0,-40(s0)
    80004cae:	87ae                	mv	a5,a1
    80004cb0:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_test0.c:19
    long base = __metal_driver_sifive_test0_base(sd);
    80004cb4:	fd843503          	ld	a0,-40(s0)
    80004cb8:	fc5ff0ef          	jal	ra,80004c7c <__metal_driver_sifive_test0_base>
    80004cbc:	87aa                	mv	a5,a0
    80004cbe:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_test0.c:20
    uint32_t out = (code << 16) + (code == 0 ? 0x5555 : 0x3333);
    80004cc2:	fd442783          	lw	a5,-44(s0)
    80004cc6:	0107979b          	slliw	a5,a5,0x10
    80004cca:	0007871b          	sext.w	a4,a5
    80004cce:	fd442783          	lw	a5,-44(s0)
    80004cd2:	2781                	sext.w	a5,a5
    80004cd4:	e789                	bnez	a5,80004cde <__metal_driver_sifive_test0_exit+0x3c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_test0.c:20 (discriminator 1)
    80004cd6:	6795                	lui	a5,0x5
    80004cd8:	55578793          	addi	a5,a5,1365 # 5555 <__heap_size+0x4d55>
    80004cdc:	a021                	j	80004ce4 <__metal_driver_sifive_test0_exit+0x42>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_test0.c:20 (discriminator 2)
    80004cde:	678d                	lui	a5,0x3
    80004ce0:	33378793          	addi	a5,a5,819 # 3333 <__heap_size+0x2b33>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_test0.c:20 (discriminator 4)
    80004ce4:	9fb9                	addw	a5,a5,a4
    80004ce6:	2781                	sext.w	a5,a5
    80004ce8:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_test0.c:22 (discriminator 1)
    while (1) {
        __METAL_ACCESS_ONCE((
    80004cec:	fe843783          	ld	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_test0.c:23 (discriminator 1)
            __metal_io_u32 *)(base + METAL_SIFIVE_TEST0_FINISHER_OFFSET)) = out;
    80004cf0:	fe442703          	lw	a4,-28(s0)
    80004cf4:	c398                	sw	a4,0(a5)
    80004cf6:	bfdd                	j	80004cec <__metal_driver_sifive_test0_exit+0x4a>

0000000080004cf8 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:368

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
    80004cf8:	1101                	addi	sp,sp,-32
    80004cfa:	ec22                	sd	s0,24(sp)
    80004cfc:	1000                	addi	s0,sp,32
    80004cfe:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:369
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_uart_10013000) {
    80004d02:	fe843703          	ld	a4,-24(s0)
    80004d06:	00002797          	auipc	a5,0x2
    80004d0a:	e6278793          	addi	a5,a5,-414 # 80006b68 <__metal_dt_uart_10013000>
    80004d0e:	00f71563          	bne	a4,a5,80004d18 <__metal_driver_sifive_uart0_control_base+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:370
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
    80004d12:	100137b7          	lui	a5,0x10013
    80004d16:	a011                	j	80004d1a <__metal_driver_sifive_uart0_control_base+0x22>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:373
	}
	else {
		return 0;
    80004d18:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:375
	}
}
    80004d1a:	853e                	mv	a0,a5
    80004d1c:	6462                	ld	s0,24(sp)
    80004d1e:	6105                	addi	sp,sp,32
    80004d20:	8082                	ret

0000000080004d22 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:398
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
    80004d22:	1101                	addi	sp,sp,-32
    80004d24:	ec22                	sd	s0,24(sp)
    80004d26:	1000                	addi	s0,sp,32
    80004d28:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:399
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_uart_10013000) {
    80004d2c:	fe843703          	ld	a4,-24(s0)
    80004d30:	00002797          	auipc	a5,0x2
    80004d34:	e3878793          	addi	a5,a5,-456 # 80006b68 <__metal_dt_uart_10013000>
    80004d38:	00f71763          	bne	a4,a5,80004d46 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:400
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
    80004d3c:	00001797          	auipc	a5,0x1
    80004d40:	5ac78793          	addi	a5,a5,1452 # 800062e8 <__metal_dt_interrupt_controller_c000000>
    80004d44:	a011                	j	80004d48 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:403
	}
	else {
		return 0;
    80004d46:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:405
	}
}
    80004d48:	853e                	mv	a0,a5
    80004d4a:	6462                	ld	s0,24(sp)
    80004d4c:	6105                	addi	sp,sp,32
    80004d4e:	8082                	ret

0000000080004d50 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:408

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
    80004d50:	1101                	addi	sp,sp,-32
    80004d52:	ec22                	sd	s0,24(sp)
    80004d54:	1000                	addi	s0,sp,32
    80004d56:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:409
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_uart_10013000) {
    80004d5a:	fe843703          	ld	a4,-24(s0)
    80004d5e:	00002797          	auipc	a5,0x2
    80004d62:	e0a78793          	addi	a5,a5,-502 # 80006b68 <__metal_dt_uart_10013000>
    80004d66:	00f71463          	bne	a4,a5,80004d6e <__metal_driver_sifive_uart0_interrupt_line+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:410
		return 1;
    80004d6a:	4785                	li	a5,1
    80004d6c:	a011                	j	80004d70 <__metal_driver_sifive_uart0_interrupt_line+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:413
	}
	else {
		return 0;
    80004d6e:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:415
	}
}
    80004d70:	853e                	mv	a0,a5
    80004d72:	6462                	ld	s0,24(sp)
    80004d74:	6105                	addi	sp,sp,32
    80004d76:	8082                	ret

0000000080004d78 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:418

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
    80004d78:	1101                	addi	sp,sp,-32
    80004d7a:	ec22                	sd	s0,24(sp)
    80004d7c:	1000                	addi	s0,sp,32
    80004d7e:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:419
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_uart_10013000) {
    80004d82:	fe843703          	ld	a4,-24(s0)
    80004d86:	00002797          	auipc	a5,0x2
    80004d8a:	de278793          	addi	a5,a5,-542 # 80006b68 <__metal_dt_uart_10013000>
    80004d8e:	00f71463          	bne	a4,a5,80004d96 <__metal_driver_sifive_uart0_clock+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:420
		return NULL;
    80004d92:	4781                	li	a5,0
    80004d94:	a011                	j	80004d98 <__metal_driver_sifive_uart0_clock+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:423
	}
	else {
		return 0;
    80004d96:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:425
	}
}
    80004d98:	853e                	mv	a0,a5
    80004d9a:	6462                	ld	s0,24(sp)
    80004d9c:	6105                	addi	sp,sp,32
    80004d9e:	8082                	ret

0000000080004da0 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:428

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
    80004da0:	1101                	addi	sp,sp,-32
    80004da2:	ec22                	sd	s0,24(sp)
    80004da4:	1000                	addi	s0,sp,32
    80004da6:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:429
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_uart_10013000) {
    80004daa:	fe843703          	ld	a4,-24(s0)
    80004dae:	00002797          	auipc	a5,0x2
    80004db2:	dba78793          	addi	a5,a5,-582 # 80006b68 <__metal_dt_uart_10013000>
    80004db6:	00f71463          	bne	a4,a5,80004dbe <__metal_driver_sifive_uart0_pinmux+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:430
		return NULL;
    80004dba:	4781                	li	a5,0
    80004dbc:	a011                	j	80004dc0 <__metal_driver_sifive_uart0_pinmux+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:433
	}
	else {
		return 0;
    80004dbe:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:435
	}
}
    80004dc0:	853e                	mv	a0,a5
    80004dc2:	6462                	ld	s0,24(sp)
    80004dc4:	6105                	addi	sp,sp,32
    80004dc6:	8082                	ret

0000000080004dc8 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:438

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
    80004dc8:	1101                	addi	sp,sp,-32
    80004dca:	ec22                	sd	s0,24(sp)
    80004dcc:	1000                	addi	s0,sp,32
    80004dce:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:439
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_uart_10013000) {
    80004dd2:	fe843703          	ld	a4,-24(s0)
    80004dd6:	00002797          	auipc	a5,0x2
    80004dda:	d9278793          	addi	a5,a5,-622 # 80006b68 <__metal_dt_uart_10013000>
    80004dde:	00f71463          	bne	a4,a5,80004de6 <__metal_driver_sifive_uart0_pinmux_output_selector+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:440
		return 0;
    80004de2:	4781                	li	a5,0
    80004de4:	a011                	j	80004de8 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:443
	}
	else {
		return 0;
    80004de6:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:445
	}
}
    80004de8:	853e                	mv	a0,a5
    80004dea:	6462                	ld	s0,24(sp)
    80004dec:	6105                	addi	sp,sp,32
    80004dee:	8082                	ret

0000000080004df0 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:448

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
    80004df0:	1101                	addi	sp,sp,-32
    80004df2:	ec22                	sd	s0,24(sp)
    80004df4:	1000                	addi	s0,sp,32
    80004df6:	fea43423          	sd	a0,-24(s0)
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:449
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_uart_10013000) {
    80004dfa:	fe843703          	ld	a4,-24(s0)
    80004dfe:	00002797          	auipc	a5,0x2
    80004e02:	d6a78793          	addi	a5,a5,-662 # 80006b68 <__metal_dt_uart_10013000>
    80004e06:	00f71463          	bne	a4,a5,80004e0e <__metal_driver_sifive_uart0_pinmux_source_selector+0x1e>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:450
		return 0;
    80004e0a:	4781                	li	a5,0
    80004e0c:	a011                	j	80004e10 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:453
	}
	else {
		return 0;
    80004e0e:	4781                	li	a5,0
C:\Users\Igor\git\tests\test_u54\bsp\build\debug/./metal/machine.h:455
	}
}
    80004e10:	853e                	mv	a0,a5
    80004e12:	6462                	ld	s0,24(sp)
    80004e14:	6105                	addi	sp,sp,32
    80004e16:	8082                	ret

0000000080004e18 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:37
    (__METAL_ACCESS_ONCE((__metal_io_u8 *)UART_REG(offset)))
#define UART_REGW(offset)                                                      \
    (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart) {
    80004e18:	1101                	addi	sp,sp,-32
    80004e1a:	ec06                	sd	ra,24(sp)
    80004e1c:	e822                	sd	s0,16(sp)
    80004e1e:	1000                	addi	s0,sp,32
    80004e20:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:38
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
    80004e24:	fe843503          	ld	a0,-24(s0)
    80004e28:	efbff0ef          	jal	ra,80004d22 <__metal_driver_sifive_uart0_interrupt_parent>
    80004e2c:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:39
}
    80004e2e:	853e                	mv	a0,a5
    80004e30:	60e2                	ld	ra,24(sp)
    80004e32:	6442                	ld	s0,16(sp)
    80004e34:	6105                	addi	sp,sp,32
    80004e36:	8082                	ret

0000000080004e38 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:41

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart) {
    80004e38:	1101                	addi	sp,sp,-32
    80004e3a:	ec06                	sd	ra,24(sp)
    80004e3c:	e822                	sd	s0,16(sp)
    80004e3e:	1000                	addi	s0,sp,32
    80004e40:	fea43423          	sd	a0,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:42
    return __metal_driver_sifive_uart0_interrupt_line(uart);
    80004e44:	fe843503          	ld	a0,-24(s0)
    80004e48:	f09ff0ef          	jal	ra,80004d50 <__metal_driver_sifive_uart0_interrupt_line>
    80004e4c:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:43
}
    80004e4e:	853e                	mv	a0,a5
    80004e50:	60e2                	ld	ra,24(sp)
    80004e52:	6442                	ld	s0,16(sp)
    80004e54:	6105                	addi	sp,sp,32
    80004e56:	8082                	ret

0000000080004e58 <__metal_driver_sifive_uart0_tx_interrupt_enable>:
__metal_driver_sifive_uart0_tx_interrupt_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:45

int __metal_driver_sifive_uart0_tx_interrupt_enable(struct metal_uart *uart) {
    80004e58:	7179                	addi	sp,sp,-48
    80004e5a:	f406                	sd	ra,40(sp)
    80004e5c:	f022                	sd	s0,32(sp)
    80004e5e:	1800                	addi	s0,sp,48
    80004e60:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:46
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80004e64:	fd843503          	ld	a0,-40(s0)
    80004e68:	e91ff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    80004e6c:	87aa                	mv	a5,a0
    80004e6e:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:48

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_TXWM;
    80004e72:	fe843783          	ld	a5,-24(s0)
    80004e76:	07c1                	addi	a5,a5,16
    80004e78:	439c                	lw	a5,0(a5)
    80004e7a:	0007869b          	sext.w	a3,a5
    80004e7e:	fe843783          	ld	a5,-24(s0)
    80004e82:	07c1                	addi	a5,a5,16
    80004e84:	873e                	mv	a4,a5
    80004e86:	87b6                	mv	a5,a3
    80004e88:	0017e793          	ori	a5,a5,1
    80004e8c:	2781                	sext.w	a5,a5
    80004e8e:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:49
    return 0;
    80004e90:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:50
}
    80004e92:	853e                	mv	a0,a5
    80004e94:	70a2                	ld	ra,40(sp)
    80004e96:	7402                	ld	s0,32(sp)
    80004e98:	6145                	addi	sp,sp,48
    80004e9a:	8082                	ret

0000000080004e9c <__metal_driver_sifive_uart0_tx_interrupt_disable>:
__metal_driver_sifive_uart0_tx_interrupt_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:52

int __metal_driver_sifive_uart0_tx_interrupt_disable(struct metal_uart *uart) {
    80004e9c:	7179                	addi	sp,sp,-48
    80004e9e:	f406                	sd	ra,40(sp)
    80004ea0:	f022                	sd	s0,32(sp)
    80004ea2:	1800                	addi	s0,sp,48
    80004ea4:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:53
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80004ea8:	fd843503          	ld	a0,-40(s0)
    80004eac:	e4dff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    80004eb0:	87aa                	mv	a5,a0
    80004eb2:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:55

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_TXWM;
    80004eb6:	fe843783          	ld	a5,-24(s0)
    80004eba:	07c1                	addi	a5,a5,16
    80004ebc:	439c                	lw	a5,0(a5)
    80004ebe:	0007869b          	sext.w	a3,a5
    80004ec2:	fe843783          	ld	a5,-24(s0)
    80004ec6:	07c1                	addi	a5,a5,16
    80004ec8:	873e                	mv	a4,a5
    80004eca:	87b6                	mv	a5,a3
    80004ecc:	9bf9                	andi	a5,a5,-2
    80004ece:	2781                	sext.w	a5,a5
    80004ed0:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:56
    return 0;
    80004ed2:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:57
}
    80004ed4:	853e                	mv	a0,a5
    80004ed6:	70a2                	ld	ra,40(sp)
    80004ed8:	7402                	ld	s0,32(sp)
    80004eda:	6145                	addi	sp,sp,48
    80004edc:	8082                	ret

0000000080004ede <__metal_driver_sifive_uart0_rx_interrupt_enable>:
__metal_driver_sifive_uart0_rx_interrupt_enable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:59

int __metal_driver_sifive_uart0_rx_interrupt_enable(struct metal_uart *uart) {
    80004ede:	7179                	addi	sp,sp,-48
    80004ee0:	f406                	sd	ra,40(sp)
    80004ee2:	f022                	sd	s0,32(sp)
    80004ee4:	1800                	addi	s0,sp,48
    80004ee6:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:60
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80004eea:	fd843503          	ld	a0,-40(s0)
    80004eee:	e0bff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    80004ef2:	87aa                	mv	a5,a0
    80004ef4:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:62

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_RXWM;
    80004ef8:	fe843783          	ld	a5,-24(s0)
    80004efc:	07c1                	addi	a5,a5,16
    80004efe:	439c                	lw	a5,0(a5)
    80004f00:	0007869b          	sext.w	a3,a5
    80004f04:	fe843783          	ld	a5,-24(s0)
    80004f08:	07c1                	addi	a5,a5,16
    80004f0a:	873e                	mv	a4,a5
    80004f0c:	87b6                	mv	a5,a3
    80004f0e:	0027e793          	ori	a5,a5,2
    80004f12:	2781                	sext.w	a5,a5
    80004f14:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:63
    return 0;
    80004f16:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:64
}
    80004f18:	853e                	mv	a0,a5
    80004f1a:	70a2                	ld	ra,40(sp)
    80004f1c:	7402                	ld	s0,32(sp)
    80004f1e:	6145                	addi	sp,sp,48
    80004f20:	8082                	ret

0000000080004f22 <__metal_driver_sifive_uart0_rx_interrupt_disable>:
__metal_driver_sifive_uart0_rx_interrupt_disable():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:66

int __metal_driver_sifive_uart0_rx_interrupt_disable(struct metal_uart *uart) {
    80004f22:	7179                	addi	sp,sp,-48
    80004f24:	f406                	sd	ra,40(sp)
    80004f26:	f022                	sd	s0,32(sp)
    80004f28:	1800                	addi	s0,sp,48
    80004f2a:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:67
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80004f2e:	fd843503          	ld	a0,-40(s0)
    80004f32:	dc7ff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    80004f36:	87aa                	mv	a5,a0
    80004f38:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:69

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_RXWM;
    80004f3c:	fe843783          	ld	a5,-24(s0)
    80004f40:	07c1                	addi	a5,a5,16
    80004f42:	439c                	lw	a5,0(a5)
    80004f44:	0007869b          	sext.w	a3,a5
    80004f48:	fe843783          	ld	a5,-24(s0)
    80004f4c:	07c1                	addi	a5,a5,16
    80004f4e:	873e                	mv	a4,a5
    80004f50:	87b6                	mv	a5,a3
    80004f52:	9bf5                	andi	a5,a5,-3
    80004f54:	2781                	sext.w	a5,a5
    80004f56:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:70
    return 0;
    80004f58:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:71
}
    80004f5a:	853e                	mv	a0,a5
    80004f5c:	70a2                	ld	ra,40(sp)
    80004f5e:	7402                	ld	s0,32(sp)
    80004f60:	6145                	addi	sp,sp,48
    80004f62:	8082                	ret

0000000080004f64 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:73

int __metal_driver_sifive_uart0_txready(struct metal_uart *uart) {
    80004f64:	7179                	addi	sp,sp,-48
    80004f66:	f406                	sd	ra,40(sp)
    80004f68:	f022                	sd	s0,32(sp)
    80004f6a:	1800                	addi	s0,sp,48
    80004f6c:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:74
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80004f70:	fd843503          	ld	a0,-40(s0)
    80004f74:	d85ff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    80004f78:	87aa                	mv	a5,a0
    80004f7a:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:76

    return !!((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
    80004f7e:	fe843783          	ld	a5,-24(s0)
    80004f82:	439c                	lw	a5,0(a5)
    80004f84:	2781                	sext.w	a5,a5
    80004f86:	2781                	sext.w	a5,a5
    80004f88:	01f7d79b          	srliw	a5,a5,0x1f
    80004f8c:	0ff7f793          	andi	a5,a5,255
    80004f90:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:77
}
    80004f92:	853e                	mv	a0,a5
    80004f94:	70a2                	ld	ra,40(sp)
    80004f96:	7402                	ld	s0,32(sp)
    80004f98:	6145                	addi	sp,sp,48
    80004f9a:	8082                	ret

0000000080004f9c <__metal_driver_sifive_uart0_set_tx_watermark>:
__metal_driver_sifive_uart0_set_tx_watermark():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:80

int __metal_driver_sifive_uart0_set_tx_watermark(struct metal_uart *uart,
                                                 size_t level) {
    80004f9c:	7179                	addi	sp,sp,-48
    80004f9e:	f406                	sd	ra,40(sp)
    80004fa0:	f022                	sd	s0,32(sp)
    80004fa2:	1800                	addi	s0,sp,48
    80004fa4:	fca43c23          	sd	a0,-40(s0)
    80004fa8:	fcb43823          	sd	a1,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:81
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80004fac:	fd843503          	ld	a0,-40(s0)
    80004fb0:	d49ff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    80004fb4:	87aa                	mv	a5,a0
    80004fb6:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:83

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(level);
    80004fba:	fe843783          	ld	a5,-24(s0)
    80004fbe:	07a1                	addi	a5,a5,8
    80004fc0:	439c                	lw	a5,0(a5)
    80004fc2:	0007869b          	sext.w	a3,a5
    80004fc6:	fd043783          	ld	a5,-48(s0)
    80004fca:	2781                	sext.w	a5,a5
    80004fcc:	0107979b          	slliw	a5,a5,0x10
    80004fd0:	2781                	sext.w	a5,a5
    80004fd2:	873e                	mv	a4,a5
    80004fd4:	000707b7          	lui	a5,0x70
    80004fd8:	8ff9                	and	a5,a5,a4
    80004fda:	0007861b          	sext.w	a2,a5
    80004fde:	fe843783          	ld	a5,-24(s0)
    80004fe2:	07a1                	addi	a5,a5,8
    80004fe4:	873e                	mv	a4,a5
    80004fe6:	87b2                	mv	a5,a2
    80004fe8:	8fd5                	or	a5,a5,a3
    80004fea:	2781                	sext.w	a5,a5
    80004fec:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:84
    return 0;
    80004fee:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:85
}
    80004ff0:	853e                	mv	a0,a5
    80004ff2:	70a2                	ld	ra,40(sp)
    80004ff4:	7402                	ld	s0,32(sp)
    80004ff6:	6145                	addi	sp,sp,48
    80004ff8:	8082                	ret

0000000080004ffa <__metal_driver_sifive_uart0_get_tx_watermark>:
__metal_driver_sifive_uart0_get_tx_watermark():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:87

size_t __metal_driver_sifive_uart0_get_tx_watermark(struct metal_uart *uart) {
    80004ffa:	7179                	addi	sp,sp,-48
    80004ffc:	f406                	sd	ra,40(sp)
    80004ffe:	f022                	sd	s0,32(sp)
    80005000:	1800                	addi	s0,sp,48
    80005002:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:88
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80005006:	fd843503          	ld	a0,-40(s0)
    8000500a:	cefff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    8000500e:	87aa                	mv	a5,a0
    80005010:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:90

    return ((UART_REGW(METAL_SIFIVE_UART0_TXCTRL) >> 16) & 0x7);
    80005014:	fe843783          	ld	a5,-24(s0)
    80005018:	07a1                	addi	a5,a5,8
    8000501a:	439c                	lw	a5,0(a5)
    8000501c:	2781                	sext.w	a5,a5
    8000501e:	0107d79b          	srliw	a5,a5,0x10
    80005022:	2781                	sext.w	a5,a5
    80005024:	1782                	slli	a5,a5,0x20
    80005026:	9381                	srli	a5,a5,0x20
    80005028:	8b9d                	andi	a5,a5,7
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:91
}
    8000502a:	853e                	mv	a0,a5
    8000502c:	70a2                	ld	ra,40(sp)
    8000502e:	7402                	ld	s0,32(sp)
    80005030:	6145                	addi	sp,sp,48
    80005032:	8082                	ret

0000000080005034 <__metal_driver_sifive_uart0_set_rx_watermark>:
__metal_driver_sifive_uart0_set_rx_watermark():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:94

int __metal_driver_sifive_uart0_set_rx_watermark(struct metal_uart *uart,
                                                 size_t level) {
    80005034:	7179                	addi	sp,sp,-48
    80005036:	f406                	sd	ra,40(sp)
    80005038:	f022                	sd	s0,32(sp)
    8000503a:	1800                	addi	s0,sp,48
    8000503c:	fca43c23          	sd	a0,-40(s0)
    80005040:	fcb43823          	sd	a1,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:95
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80005044:	fd843503          	ld	a0,-40(s0)
    80005048:	cb1ff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    8000504c:	87aa                	mv	a5,a0
    8000504e:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:97

    UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXCNT(level);
    80005052:	fe843783          	ld	a5,-24(s0)
    80005056:	07b1                	addi	a5,a5,12
    80005058:	439c                	lw	a5,0(a5)
    8000505a:	0007869b          	sext.w	a3,a5
    8000505e:	fd043783          	ld	a5,-48(s0)
    80005062:	2781                	sext.w	a5,a5
    80005064:	0107979b          	slliw	a5,a5,0x10
    80005068:	2781                	sext.w	a5,a5
    8000506a:	873e                	mv	a4,a5
    8000506c:	000707b7          	lui	a5,0x70
    80005070:	8ff9                	and	a5,a5,a4
    80005072:	0007861b          	sext.w	a2,a5
    80005076:	fe843783          	ld	a5,-24(s0)
    8000507a:	07b1                	addi	a5,a5,12
    8000507c:	873e                	mv	a4,a5
    8000507e:	87b2                	mv	a5,a2
    80005080:	8fd5                	or	a5,a5,a3
    80005082:	2781                	sext.w	a5,a5
    80005084:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:98
    return 0;
    80005086:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:99
}
    80005088:	853e                	mv	a0,a5
    8000508a:	70a2                	ld	ra,40(sp)
    8000508c:	7402                	ld	s0,32(sp)
    8000508e:	6145                	addi	sp,sp,48
    80005090:	8082                	ret

0000000080005092 <__metal_driver_sifive_uart0_get_rx_watermark>:
__metal_driver_sifive_uart0_get_rx_watermark():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:101

size_t __metal_driver_sifive_uart0_get_rx_watermark(struct metal_uart *uart) {
    80005092:	7179                	addi	sp,sp,-48
    80005094:	f406                	sd	ra,40(sp)
    80005096:	f022                	sd	s0,32(sp)
    80005098:	1800                	addi	s0,sp,48
    8000509a:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:102
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    8000509e:	fd843503          	ld	a0,-40(s0)
    800050a2:	c57ff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    800050a6:	87aa                	mv	a5,a0
    800050a8:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:104

    return ((UART_REGW(METAL_SIFIVE_UART0_RXCTRL) >> 16) & 0x7);
    800050ac:	fe843783          	ld	a5,-24(s0)
    800050b0:	07b1                	addi	a5,a5,12
    800050b2:	439c                	lw	a5,0(a5)
    800050b4:	2781                	sext.w	a5,a5
    800050b6:	0107d79b          	srliw	a5,a5,0x10
    800050ba:	2781                	sext.w	a5,a5
    800050bc:	1782                	slli	a5,a5,0x20
    800050be:	9381                	srli	a5,a5,0x20
    800050c0:	8b9d                	andi	a5,a5,7
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:105
}
    800050c2:	853e                	mv	a0,a5
    800050c4:	70a2                	ld	ra,40(sp)
    800050c6:	7402                	ld	s0,32(sp)
    800050c8:	6145                	addi	sp,sp,48
    800050ca:	8082                	ret

00000000800050cc <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:107

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c) {
    800050cc:	7179                	addi	sp,sp,-48
    800050ce:	f406                	sd	ra,40(sp)
    800050d0:	f022                	sd	s0,32(sp)
    800050d2:	1800                	addi	s0,sp,48
    800050d4:	fca43c23          	sd	a0,-40(s0)
    800050d8:	87ae                	mv	a5,a1
    800050da:	fcf42a23          	sw	a5,-44(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:108
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    800050de:	fd843503          	ld	a0,-40(s0)
    800050e2:	c17ff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    800050e6:	87aa                	mv	a5,a0
    800050e8:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:110

    while (__metal_driver_sifive_uart0_txready(uart) != 0) {
    800050ec:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:110 (discriminator 1)
    800050ee:	fd843503          	ld	a0,-40(s0)
    800050f2:	e73ff0ef          	jal	ra,80004f64 <__metal_driver_sifive_uart0_txready>
    800050f6:	87aa                	mv	a5,a0
    800050f8:	fbfd                	bnez	a5,800050ee <__metal_driver_sifive_uart0_putc+0x22>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:113
        /* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
    800050fa:	fe843783          	ld	a5,-24(s0)
    800050fe:	fd442703          	lw	a4,-44(s0)
    80005102:	c398                	sw	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:114
    return 0;
    80005104:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:115
}
    80005106:	853e                	mv	a0,a5
    80005108:	70a2                	ld	ra,40(sp)
    8000510a:	7402                	ld	s0,32(sp)
    8000510c:	6145                	addi	sp,sp,48
    8000510e:	8082                	ret

0000000080005110 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:117

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c) {
    80005110:	7179                	addi	sp,sp,-48
    80005112:	f406                	sd	ra,40(sp)
    80005114:	f022                	sd	s0,32(sp)
    80005116:	1800                	addi	s0,sp,48
    80005118:	fca43c23          	sd	a0,-40(s0)
    8000511c:	fcb43823          	sd	a1,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:119
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
    80005120:	fd843503          	ld	a0,-40(s0)
    80005124:	bd5ff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    80005128:	87aa                	mv	a5,a0
    8000512a:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:121
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);
    8000512e:	fe843783          	ld	a5,-24(s0)
    80005132:	0791                	addi	a5,a5,4
    80005134:	439c                	lw	a5,0(a5)
    80005136:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:123
    ;
    if (ch & UART_RXEMPTY) {
    8000513a:	fe442783          	lw	a5,-28(s0)
    8000513e:	0007d763          	bgez	a5,8000514c <__metal_driver_sifive_uart0_getc+0x3c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:124
        *c = -1; /* aka: EOF in most of the world */
    80005142:	fd043783          	ld	a5,-48(s0)
    80005146:	577d                	li	a4,-1
    80005148:	c398                	sw	a4,0(a5)
    8000514a:	a811                	j	8000515e <__metal_driver_sifive_uart0_getc+0x4e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:126
    } else {
        *c = ch & 0x0ff;
    8000514c:	fe442783          	lw	a5,-28(s0)
    80005150:	0ff7f793          	andi	a5,a5,255
    80005154:	0007871b          	sext.w	a4,a5
    80005158:	fd043783          	ld	a5,-48(s0)
    8000515c:	c398                	sw	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:128
    }
    return 0;
    8000515e:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:129
}
    80005160:	853e                	mv	a0,a5
    80005162:	70a2                	ld	ra,40(sp)
    80005164:	7402                	ld	s0,32(sp)
    80005166:	6145                	addi	sp,sp,48
    80005168:	8082                	ret

000000008000516a <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:131

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart) {
    8000516a:	7179                	addi	sp,sp,-48
    8000516c:	f422                	sd	s0,40(sp)
    8000516e:	1800                	addi	s0,sp,48
    80005170:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:132
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
    80005174:	fd843783          	ld	a5,-40(s0)
    80005178:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:133
    return uart->baud_rate;
    8000517c:	fe843783          	ld	a5,-24(s0)
    80005180:	679c                	ld	a5,8(a5)
    80005182:	2781                	sext.w	a5,a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:134
}
    80005184:	853e                	mv	a0,a5
    80005186:	7422                	ld	s0,40(sp)
    80005188:	6145                	addi	sp,sp,48
    8000518a:	8082                	ret

000000008000518c <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:137

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart,
                                              int baud_rate) {
    8000518c:	7139                	addi	sp,sp,-64
    8000518e:	fc06                	sd	ra,56(sp)
    80005190:	f822                	sd	s0,48(sp)
    80005192:	0080                	addi	s0,sp,64
    80005194:	fca43423          	sd	a0,-56(s0)
    80005198:	87ae                	mv	a5,a1
    8000519a:	fcf42223          	sw	a5,-60(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:138
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
    8000519e:	fc843783          	ld	a5,-56(s0)
    800051a2:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:139
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
    800051a6:	fc843503          	ld	a0,-56(s0)
    800051aa:	b4fff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    800051ae:	87aa                	mv	a5,a0
    800051b0:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:140
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
    800051b4:	fc843503          	ld	a0,-56(s0)
    800051b8:	bc1ff0ef          	jal	ra,80004d78 <__metal_driver_sifive_uart0_clock>
    800051bc:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:142

    uart->baud_rate = baud_rate;
    800051c0:	fc442703          	lw	a4,-60(s0)
    800051c4:	fe843783          	ld	a5,-24(s0)
    800051c8:	e798                	sd	a4,8(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:144

    if (clock != NULL) {
    800051ca:	fd843783          	ld	a5,-40(s0)
    800051ce:	c7ad                	beqz	a5,80005238 <__metal_driver_sifive_uart0_set_baud_rate+0xac>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:145
        long clock_rate = clock->vtable->get_rate_hz(clock);
    800051d0:	fd843783          	ld	a5,-40(s0)
    800051d4:	639c                	ld	a5,0(a5)
    800051d6:	639c                	ld	a5,0(a5)
    800051d8:	fd843503          	ld	a0,-40(s0)
    800051dc:	9782                	jalr	a5
    800051de:	fca43823          	sd	a0,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:146
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
    800051e2:	fc442783          	lw	a5,-60(s0)
    800051e6:	fd043703          	ld	a4,-48(s0)
    800051ea:	02f747b3          	div	a5,a4,a5
    800051ee:	2781                	sext.w	a5,a5
    800051f0:	fe043703          	ld	a4,-32(s0)
    800051f4:	0761                	addi	a4,a4,24
    800051f6:	37fd                	addiw	a5,a5,-1
    800051f8:	2781                	sext.w	a5,a5
    800051fa:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:147
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
    800051fc:	fe043783          	ld	a5,-32(s0)
    80005200:	07a1                	addi	a5,a5,8
    80005202:	439c                	lw	a5,0(a5)
    80005204:	0007869b          	sext.w	a3,a5
    80005208:	fe043783          	ld	a5,-32(s0)
    8000520c:	07a1                	addi	a5,a5,8
    8000520e:	873e                	mv	a4,a5
    80005210:	87b6                	mv	a5,a3
    80005212:	0017e793          	ori	a5,a5,1
    80005216:	2781                	sext.w	a5,a5
    80005218:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:148
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
    8000521a:	fe043783          	ld	a5,-32(s0)
    8000521e:	07b1                	addi	a5,a5,12
    80005220:	439c                	lw	a5,0(a5)
    80005222:	0007869b          	sext.w	a3,a5
    80005226:	fe043783          	ld	a5,-32(s0)
    8000522a:	07b1                	addi	a5,a5,12
    8000522c:	873e                	mv	a4,a5
    8000522e:	87b6                	mv	a5,a3
    80005230:	0017e793          	ori	a5,a5,1
    80005234:	2781                	sext.w	a5,a5
    80005236:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:150
    }
    return 0;
    80005238:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:151
}
    8000523a:	853e                	mv	a0,a5
    8000523c:	70e2                	ld	ra,56(sp)
    8000523e:	7442                	ld	s0,48(sp)
    80005240:	6121                	addi	sp,sp,64
    80005242:	8082                	ret

0000000080005244 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:153

static void pre_rate_change_callback_func(void *priv) {
    80005244:	711d                	addi	sp,sp,-96
    80005246:	ec86                	sd	ra,88(sp)
    80005248:	e8a2                	sd	s0,80(sp)
    8000524a:	1080                	addi	s0,sp,96
    8000524c:	faa43423          	sd	a0,-88(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:154
    struct __metal_driver_sifive_uart0 *uart = priv;
    80005250:	fa843783          	ld	a5,-88(s0)
    80005254:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:156
    long control_base =
        __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
    80005258:	fa843503          	ld	a0,-88(s0)
    8000525c:	a9dff0ef          	jal	ra,80004cf8 <__metal_driver_sifive_uart0_control_base>
    80005260:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:155
    long control_base =
    80005262:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:158
    struct metal_clock *clock =
        __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
    80005266:	fa843503          	ld	a0,-88(s0)
    8000526a:	b0fff0ef          	jal	ra,80004d78 <__metal_driver_sifive_uart0_clock>
    8000526e:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:163

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
    80005272:	fe043783          	ld	a5,-32(s0)
    80005276:	07a1                	addi	a5,a5,8
    80005278:	439c                	lw	a5,0(a5)
    8000527a:	0007869b          	sext.w	a3,a5
    8000527e:	fe043783          	ld	a5,-32(s0)
    80005282:	07a1                	addi	a5,a5,8
    80005284:	873e                	mv	a4,a5
    80005286:	fff907b7          	lui	a5,0xfff90
    8000528a:	17fd                	addi	a5,a5,-1
    8000528c:	8ff5                	and	a5,a5,a3
    8000528e:	2781                	sext.w	a5,a5
    80005290:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:164
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
    80005292:	fe043783          	ld	a5,-32(s0)
    80005296:	07a1                	addi	a5,a5,8
    80005298:	439c                	lw	a5,0(a5)
    8000529a:	0007869b          	sext.w	a3,a5
    8000529e:	fe043783          	ld	a5,-32(s0)
    800052a2:	07a1                	addi	a5,a5,8
    800052a4:	873e                	mv	a4,a5
    800052a6:	67c1                	lui	a5,0x10
    800052a8:	8fd5                	or	a5,a5,a3
    800052aa:	2781                	sext.w	a5,a5
    800052ac:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:166

    while ((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0)
    800052ae:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:166 (discriminator 1)
    800052b0:	fe043783          	ld	a5,-32(s0)
    800052b4:	07d1                	addi	a5,a5,20
    800052b6:	439c                	lw	a5,0(a5)
    800052b8:	2781                	sext.w	a5,a5
    800052ba:	8b85                	andi	a5,a5,1
    800052bc:	2781                	sext.w	a5,a5
    800052be:	dbed                	beqz	a5,800052b0 <pre_rate_change_callback_func+0x6c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:174
    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol =
        (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
    800052c0:	fe043783          	ld	a5,-32(s0)
    800052c4:	07a1                	addi	a5,a5,8
    800052c6:	439c                	lw	a5,0(a5)
    800052c8:	2781                	sext.w	a5,a5
    800052ca:	8b89                	andi	a5,a5,2
    800052cc:	2781                	sext.w	a5,a5
    800052ce:	c399                	beqz	a5,800052d4 <pre_rate_change_callback_func+0x90>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 1)
    800052d0:	47a5                	li	a5,9
    800052d2:	a011                	j	800052d6 <pre_rate_change_callback_func+0x92>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 2)
    800052d4:	47a9                	li	a5,10
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:173
    long bits_per_symbol =
    800052d6:	fcf43823          	sd	a5,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:175
    long clk_freq = clock->vtable->get_rate_hz(clock);
    800052da:	fd843783          	ld	a5,-40(s0)
    800052de:	639c                	ld	a5,0(a5)
    800052e0:	639c                	ld	a5,0(a5)
    800052e2:	fd843503          	ld	a0,-40(s0)
    800052e6:	9782                	jalr	a5
    800052e8:	fca43423          	sd	a0,-56(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:176
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
    800052ec:	fd043703          	ld	a4,-48(s0)
    800052f0:	fc843783          	ld	a5,-56(s0)
    800052f4:	02f707b3          	mul	a5,a4,a5
    800052f8:	873e                	mv	a4,a5
    800052fa:	fe843783          	ld	a5,-24(s0)
    800052fe:	679c                	ld	a5,8(a5)
    80005300:	02f757b3          	divu	a5,a4,a5
    80005304:	fcf43023          	sd	a5,-64(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:178

    for (volatile long x = 0; x < cycles_to_wait; x++)
    80005308:	fa043c23          	sd	zero,-72(s0)
    8000530c:	a039                	j	8000531a <pre_rate_change_callback_func+0xd6>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:179 (discriminator 3)
        __asm__("nop");
    8000530e:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 3)
    for (volatile long x = 0; x < cycles_to_wait; x++)
    80005310:	fb843783          	ld	a5,-72(s0)
    80005314:	0785                	addi	a5,a5,1
    80005316:	faf43c23          	sd	a5,-72(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 1)
    8000531a:	fb843783          	ld	a5,-72(s0)
    8000531e:	fc043703          	ld	a4,-64(s0)
    80005322:	fee7c6e3          	blt	a5,a4,8000530e <pre_rate_change_callback_func+0xca>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:180
}
    80005326:	0001                	nop
    80005328:	60e6                	ld	ra,88(sp)
    8000532a:	6446                	ld	s0,80(sp)
    8000532c:	6125                	addi	sp,sp,96
    8000532e:	8082                	ret

0000000080005330 <post_rate_change_callback_func>:
post_rate_change_callback_func():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:182

static void post_rate_change_callback_func(void *priv) {
    80005330:	7179                	addi	sp,sp,-48
    80005332:	f406                	sd	ra,40(sp)
    80005334:	f022                	sd	s0,32(sp)
    80005336:	1800                	addi	s0,sp,48
    80005338:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:183
    struct __metal_driver_sifive_uart0 *uart = priv;
    8000533c:	fd843783          	ld	a5,-40(s0)
    80005340:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:184
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
    80005344:	fe843703          	ld	a4,-24(s0)
    80005348:	fe843783          	ld	a5,-24(s0)
    8000534c:	679c                	ld	a5,8(a5)
    8000534e:	2781                	sext.w	a5,a5
    80005350:	85be                	mv	a1,a5
    80005352:	853a                	mv	a0,a4
    80005354:	f9afc0ef          	jal	ra,80001aee <metal_uart_set_baud_rate>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:185
}
    80005358:	0001                	nop
    8000535a:	70a2                	ld	ra,40(sp)
    8000535c:	7402                	ld	s0,32(sp)
    8000535e:	6145                	addi	sp,sp,48
    80005360:	8082                	ret

0000000080005362 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:187

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate) {
    80005362:	715d                	addi	sp,sp,-80
    80005364:	e486                	sd	ra,72(sp)
    80005366:	e0a2                	sd	s0,64(sp)
    80005368:	0880                	addi	s0,sp,80
    8000536a:	faa43c23          	sd	a0,-72(s0)
    8000536e:	87ae                	mv	a5,a1
    80005370:	faf42a23          	sw	a5,-76(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:188
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
    80005374:	fb843783          	ld	a5,-72(s0)
    80005378:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:189
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
    8000537c:	fb843503          	ld	a0,-72(s0)
    80005380:	9f9ff0ef          	jal	ra,80004d78 <__metal_driver_sifive_uart0_clock>
    80005384:	fea43023          	sd	a0,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:191
    struct __metal_driver_sifive_gpio0 *pinmux =
        __metal_driver_sifive_uart0_pinmux(guart);
    80005388:	fb843503          	ld	a0,-72(s0)
    8000538c:	a15ff0ef          	jal	ra,80004da0 <__metal_driver_sifive_uart0_pinmux>
    80005390:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:193

    if (clock != NULL) {
    80005394:	fe043783          	ld	a5,-32(s0)
    80005398:	cbb1                	beqz	a5,800053ec <__metal_driver_sifive_uart0_init+0x8a>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:194
        uart->pre_rate_change_callback.callback =
    8000539a:	fe843783          	ld	a5,-24(s0)
    8000539e:	00000717          	auipc	a4,0x0
    800053a2:	ea670713          	addi	a4,a4,-346 # 80005244 <pre_rate_change_callback_func>
    800053a6:	eb98                	sd	a4,16(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:196
            &pre_rate_change_callback_func;
        uart->pre_rate_change_callback.priv = guart;
    800053a8:	fe843783          	ld	a5,-24(s0)
    800053ac:	fb843703          	ld	a4,-72(s0)
    800053b0:	ef98                	sd	a4,24(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:197
        metal_clock_register_pre_rate_change_callback(
    800053b2:	fe843783          	ld	a5,-24(s0)
    800053b6:	07c1                	addi	a5,a5,16
    800053b8:	85be                	mv	a1,a5
    800053ba:	fe043503          	ld	a0,-32(s0)
    800053be:	0d4000ef          	jal	ra,80005492 <metal_clock_register_pre_rate_change_callback>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:200
            clock, &(uart->pre_rate_change_callback));

        uart->post_rate_change_callback.callback =
    800053c2:	fe843783          	ld	a5,-24(s0)
    800053c6:	00000717          	auipc	a4,0x0
    800053ca:	f6a70713          	addi	a4,a4,-150 # 80005330 <post_rate_change_callback_func>
    800053ce:	f798                	sd	a4,40(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:202
            &post_rate_change_callback_func;
        uart->post_rate_change_callback.priv = guart;
    800053d0:	fe843783          	ld	a5,-24(s0)
    800053d4:	fb843703          	ld	a4,-72(s0)
    800053d8:	fb98                	sd	a4,48(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:203
        metal_clock_register_post_rate_change_callback(
    800053da:	fe843783          	ld	a5,-24(s0)
    800053de:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
    800053e2:	85be                	mv	a1,a5
    800053e4:	fe043503          	ld	a0,-32(s0)
    800053e8:	0dc000ef          	jal	ra,800054c4 <metal_clock_register_post_rate_change_callback>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:207
            clock, &(uart->post_rate_change_callback));
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
    800053ec:	fe843783          	ld	a5,-24(s0)
    800053f0:	fb442703          	lw	a4,-76(s0)
    800053f4:	85ba                	mv	a1,a4
    800053f6:	853e                	mv	a0,a5
    800053f8:	ef6fc0ef          	jal	ra,80001aee <metal_uart_set_baud_rate>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:209

    if (pinmux != NULL) {
    800053fc:	fd843783          	ld	a5,-40(s0)
    80005400:	cb95                	beqz	a5,80005434 <__metal_driver_sifive_uart0_init+0xd2>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:211
        long pinmux_output_selector =
            __metal_driver_sifive_uart0_pinmux_output_selector(guart);
    80005402:	fb843503          	ld	a0,-72(s0)
    80005406:	9c3ff0ef          	jal	ra,80004dc8 <__metal_driver_sifive_uart0_pinmux_output_selector>
    8000540a:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:210
        long pinmux_output_selector =
    8000540c:	fcf43823          	sd	a5,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:213
        long pinmux_source_selector =
            __metal_driver_sifive_uart0_pinmux_source_selector(guart);
    80005410:	fb843503          	ld	a0,-72(s0)
    80005414:	9ddff0ef          	jal	ra,80004df0 <__metal_driver_sifive_uart0_pinmux_source_selector>
    80005418:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:212
        long pinmux_source_selector =
    8000541a:	fcf43423          	sd	a5,-56(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:214
        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
    8000541e:	fd843783          	ld	a5,-40(s0)
    80005422:	639c                	ld	a5,0(a5)
    80005424:	67bc                	ld	a5,72(a5)
    80005426:	fc843603          	ld	a2,-56(s0)
    8000542a:	fd043583          	ld	a1,-48(s0)
    8000542e:	fd843503          	ld	a0,-40(s0)
    80005432:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/drivers/sifive_uart0.c:218
                                       pinmux_output_selector,
                                       pinmux_source_selector);
    }
}
    80005434:	0001                	nop
    80005436:	60a6                	ld	ra,72(sp)
    80005438:	6406                	ld	s0,64(sp)
    8000543a:	6161                	addi	sp,sp,80
    8000543c:	8082                	ret

000000008000543e <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:63
/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *
_metal_clock_append_to_callbacks(metal_clock_callback *list,
                                 metal_clock_callback *const cb) {
    8000543e:	7179                	addi	sp,sp,-48
    80005440:	f422                	sd	s0,40(sp)
    80005442:	1800                	addi	s0,sp,48
    80005444:	fca43c23          	sd	a0,-40(s0)
    80005448:	fcb43823          	sd	a1,-48(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:64
    cb->_next = NULL;
    8000544c:	fd043783          	ld	a5,-48(s0)
    80005450:	0007b823          	sd	zero,16(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:66

    if (!list) {
    80005454:	fd843783          	ld	a5,-40(s0)
    80005458:	e781                	bnez	a5,80005460 <_metal_clock_append_to_callbacks+0x22>
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:67
        return cb;
    8000545a:	fd043783          	ld	a5,-48(s0)
    8000545e:	a035                	j	8000548a <_metal_clock_append_to_callbacks+0x4c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:70
    }

    metal_clock_callback *current = list;
    80005460:	fd843783          	ld	a5,-40(s0)
    80005464:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:72

    while ((current->_next) != NULL) {
    80005468:	a031                	j	80005474 <_metal_clock_append_to_callbacks+0x36>
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:73
        current = current->_next;
    8000546a:	fe843783          	ld	a5,-24(s0)
    8000546e:	6b9c                	ld	a5,16(a5)
    80005470:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:72
    while ((current->_next) != NULL) {
    80005474:	fe843783          	ld	a5,-24(s0)
    80005478:	6b9c                	ld	a5,16(a5)
    8000547a:	fbe5                	bnez	a5,8000546a <_metal_clock_append_to_callbacks+0x2c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:76
    }

    current->_next = cb;
    8000547c:	fe843783          	ld	a5,-24(s0)
    80005480:	fd043703          	ld	a4,-48(s0)
    80005484:	eb98                	sd	a4,16(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:78

    return list;
    80005486:	fd843783          	ld	a5,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:79
}
    8000548a:	853e                	mv	a0,a5
    8000548c:	7422                	ld	s0,40(sp)
    8000548e:	6145                	addi	sp,sp,48
    80005490:	8082                	ret

0000000080005492 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:146
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_pre_rate_change_callback(struct metal_clock *clk,
                                              metal_clock_callback *cb) {
    80005492:	1101                	addi	sp,sp,-32
    80005494:	ec06                	sd	ra,24(sp)
    80005496:	e822                	sd	s0,16(sp)
    80005498:	1000                	addi	s0,sp,32
    8000549a:	fea43423          	sd	a0,-24(s0)
    8000549e:	feb43023          	sd	a1,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:148
    clk->_pre_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
    800054a2:	fe843783          	ld	a5,-24(s0)
    800054a6:	679c                	ld	a5,8(a5)
    800054a8:	fe043583          	ld	a1,-32(s0)
    800054ac:	853e                	mv	a0,a5
    800054ae:	f91ff0ef          	jal	ra,8000543e <_metal_clock_append_to_callbacks>
    800054b2:	872a                	mv	a4,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:147
    clk->_pre_rate_change_callback =
    800054b4:	fe843783          	ld	a5,-24(s0)
    800054b8:	e798                	sd	a4,8(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:149
}
    800054ba:	0001                	nop
    800054bc:	60e2                	ld	ra,24(sp)
    800054be:	6442                	ld	s0,16(sp)
    800054c0:	6105                	addi	sp,sp,32
    800054c2:	8082                	ret

00000000800054c4 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:159
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_post_rate_change_callback(struct metal_clock *clk,
                                               metal_clock_callback *cb) {
    800054c4:	1101                	addi	sp,sp,-32
    800054c6:	ec06                	sd	ra,24(sp)
    800054c8:	e822                	sd	s0,16(sp)
    800054ca:	1000                	addi	s0,sp,32
    800054cc:	fea43423          	sd	a0,-24(s0)
    800054d0:	feb43023          	sd	a1,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:161
    clk->_post_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
    800054d4:	fe843783          	ld	a5,-24(s0)
    800054d8:	6b9c                	ld	a5,16(a5)
    800054da:	fe043583          	ld	a1,-32(s0)
    800054de:	853e                	mv	a0,a5
    800054e0:	f5fff0ef          	jal	ra,8000543e <_metal_clock_append_to_callbacks>
    800054e4:	872a                	mv	a4,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:160
    clk->_post_rate_change_callback =
    800054e6:	fe843783          	ld	a5,-24(s0)
    800054ea:	eb98                	sd	a4,16(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/clock.h:162
}
    800054ec:	0001                	nop
    800054ee:	60e2                	ld	ra,24(sp)
    800054f0:	6442                	ld	s0,16(sp)
    800054f2:	6105                	addi	sp,sp,32
    800054f4:	8082                	ret

00000000800054f6 <__metal_shutdown_exit>:
__metal_shutdown_exit():
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/shutdown.h:26
};

__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd,
                                      int code) __attribute__((noreturn));
__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd,
                                      int code) {
    800054f6:	1101                	addi	sp,sp,-32
    800054f8:	ec06                	sd	ra,24(sp)
    800054fa:	e822                	sd	s0,16(sp)
    800054fc:	1000                	addi	s0,sp,32
    800054fe:	fea43423          	sd	a0,-24(s0)
    80005502:	87ae                	mv	a5,a1
    80005504:	fef42223          	sw	a5,-28(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/metal/shutdown.h:27
    sd->vtable->exit(sd, code);
    80005508:	fe843783          	ld	a5,-24(s0)
    8000550c:	639c                	ld	a5,0(a5)
    8000550e:	6398                	ld	a4,0(a5)
    80005510:	fe442783          	lw	a5,-28(s0)
    80005514:	85be                	mv	a1,a5
    80005516:	fe843503          	ld	a0,-24(s0)
    8000551a:	9702                	jalr	a4

000000008000551c <metal_shutdown>:
metal_shutdown():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/shutdown.c:11

extern __inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd,
                                             int code);

#if defined(__METAL_DT_SHUTDOWN_HANDLE)
void metal_shutdown(int code) {
    8000551c:	1101                	addi	sp,sp,-32
    8000551e:	ec06                	sd	ra,24(sp)
    80005520:	e822                	sd	s0,16(sp)
    80005522:	1000                	addi	s0,sp,32
    80005524:	87aa                	mv	a5,a0
    80005526:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/shutdown.c:12
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
    8000552a:	fec42783          	lw	a5,-20(s0)
    8000552e:	85be                	mv	a1,a5
    80005530:	83018513          	addi	a0,gp,-2000 # 80006bd8 <__metal_dt_test_100000>
    80005534:	fc3ff0ef          	jal	ra,800054f6 <__metal_shutdown_exit>
	...

0000000080005600 <__metal_vector_table>:
IRQ_0():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
    80005600:	f69fc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005604 <IRQ_1>:
IRQ_1():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
    80005604:	f65fc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005608 <IRQ_2>:
IRQ_2():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
    80005608:	f61fc06f          	j	80002568 <metal_interrupt_vector_handler>

000000008000560c <IRQ_3>:
IRQ_3():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
    8000560c:	fb3fc06f          	j	800025be <metal_software_interrupt_vector_handler>

0000000080005610 <IRQ_4>:
IRQ_4():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
    80005610:	f59fc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005614 <IRQ_5>:
IRQ_5():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
    80005614:	f55fc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005618 <IRQ_6>:
IRQ_6():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
    80005618:	f51fc06f          	j	80002568 <metal_interrupt_vector_handler>

000000008000561c <IRQ_7>:
IRQ_7():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
    8000561c:	8f0fd06f          	j	8000270c <metal_timer_interrupt_vector_handler>

0000000080005620 <IRQ_8>:
IRQ_8():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
    80005620:	f49fc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005624 <IRQ_9>:
IRQ_9():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
    80005624:	f45fc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005628 <IRQ_10>:
IRQ_10():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
    80005628:	f41fc06f          	j	80002568 <metal_interrupt_vector_handler>

000000008000562c <IRQ_11>:
IRQ_11():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
    8000562c:	f3dfc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005630 <IRQ_12>:
IRQ_12():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
    80005630:	f39fc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005634 <IRQ_13>:
IRQ_13():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
    80005634:	f35fc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005638 <IRQ_14>:
IRQ_14():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
    80005638:	f31fc06f          	j	80002568 <metal_interrupt_vector_handler>

000000008000563c <IRQ_15>:
IRQ_15():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
    8000563c:	f2dfc06f          	j	80002568 <metal_interrupt_vector_handler>

0000000080005640 <IRQ_LC0>:
IRQ_LC0():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
    80005640:	c36fd06f          	j	80002a76 <metal_lc0_interrupt_vector_handler>

0000000080005644 <IRQ_LC1>:
IRQ_LC1():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
    80005644:	d14fd06f          	j	80002b58 <metal_lc1_interrupt_vector_handler>

0000000080005648 <IRQ_LC2>:
IRQ_LC2():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
    80005648:	df2fd06f          	j	80002c3a <metal_lc2_interrupt_vector_handler>

000000008000564c <IRQ_LC3>:
IRQ_LC3():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
    8000564c:	ed0fd06f          	j	80002d1c <metal_lc3_interrupt_vector_handler>

0000000080005650 <IRQ_LC4>:
IRQ_LC4():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
    80005650:	faefd06f          	j	80002dfe <metal_lc4_interrupt_vector_handler>

0000000080005654 <IRQ_LC5>:
IRQ_LC5():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
    80005654:	88dfd06f          	j	80002ee0 <metal_lc5_interrupt_vector_handler>

0000000080005658 <IRQ_LC6>:
IRQ_LC6():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
    80005658:	96bfd06f          	j	80002fc2 <metal_lc6_interrupt_vector_handler>

000000008000565c <IRQ_LC7>:
IRQ_LC7():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
    8000565c:	a49fd06f          	j	800030a4 <metal_lc7_interrupt_vector_handler>

0000000080005660 <IRQ_LC8>:
IRQ_LC8():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
    80005660:	b27fd06f          	j	80003186 <metal_lc8_interrupt_vector_handler>

0000000080005664 <IRQ_LC9>:
IRQ_LC9():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
    80005664:	c05fd06f          	j	80003268 <metal_lc9_interrupt_vector_handler>

0000000080005668 <IRQ_LC10>:
IRQ_LC10():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
    80005668:	ce3fd06f          	j	8000334a <metal_lc10_interrupt_vector_handler>

000000008000566c <IRQ_LC11>:
IRQ_LC11():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
    8000566c:	dc1fd06f          	j	8000342c <metal_lc11_interrupt_vector_handler>

0000000080005670 <IRQ_LC12>:
IRQ_LC12():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
    80005670:	e9ffd06f          	j	8000350e <metal_lc12_interrupt_vector_handler>

0000000080005674 <IRQ_LC13>:
IRQ_LC13():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
    80005674:	f7dfd06f          	j	800035f0 <metal_lc13_interrupt_vector_handler>

0000000080005678 <IRQ_LC14>:
IRQ_LC14():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
    80005678:	85afe06f          	j	800036d2 <metal_lc14_interrupt_vector_handler>

000000008000567c <IRQ_LC15>:
IRQ_LC15():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
    8000567c:	938fe06f          	j	800037b4 <metal_lc15_interrupt_vector_handler>
	...

0000000080005700 <_close>:
_close():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_close.c:3
#include <errno.h>

int _close(int file) {
    80005700:	1101                	addi	sp,sp,-32
    80005702:	ec06                	sd	ra,24(sp)
    80005704:	e822                	sd	s0,16(sp)
    80005706:	1000                	addi	s0,sp,32
    80005708:	87aa                	mv	a5,a0
    8000570a:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_close.c:4
    errno = ENOSYS;
    8000570e:	1b6000ef          	jal	ra,800058c4 <__errno>
    80005712:	872a                	mv	a4,a0
    80005714:	05800793          	li	a5,88
    80005718:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_close.c:5
    return -1;
    8000571a:	57fd                	li	a5,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_close.c:6
}
    8000571c:	853e                	mv	a0,a5
    8000571e:	60e2                	ld	ra,24(sp)
    80005720:	6442                	ld	s0,16(sp)
    80005722:	6105                	addi	sp,sp,32
    80005724:	8082                	ret

0000000080005726 <_fstat>:
_fstat():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_fstat.c:4
#include <errno.h>
#include <sys/stat.h>

int _fstat(int file, struct stat *st) {
    80005726:	1101                	addi	sp,sp,-32
    80005728:	ec06                	sd	ra,24(sp)
    8000572a:	e822                	sd	s0,16(sp)
    8000572c:	1000                	addi	s0,sp,32
    8000572e:	87aa                	mv	a5,a0
    80005730:	feb43023          	sd	a1,-32(s0)
    80005734:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_fstat.c:5
    errno = -ENOSYS;
    80005738:	18c000ef          	jal	ra,800058c4 <__errno>
    8000573c:	872a                	mv	a4,a0
    8000573e:	fa800793          	li	a5,-88
    80005742:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_fstat.c:6
    return -1;
    80005744:	57fd                	li	a5,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_fstat.c:7
}
    80005746:	853e                	mv	a0,a5
    80005748:	60e2                	ld	ra,24(sp)
    8000574a:	6442                	ld	s0,16(sp)
    8000574c:	6105                	addi	sp,sp,32
    8000574e:	8082                	ret

0000000080005750 <_isatty>:
_isatty():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_isatty.c:3
#include <unistd.h>

int _isatty(int file) { return (file == STDOUT_FILENO); }
    80005750:	1101                	addi	sp,sp,-32
    80005752:	ec22                	sd	s0,24(sp)
    80005754:	1000                	addi	s0,sp,32
    80005756:	87aa                	mv	a5,a0
    80005758:	fef42623          	sw	a5,-20(s0)
    8000575c:	fec42783          	lw	a5,-20(s0)
    80005760:	0007871b          	sext.w	a4,a5
    80005764:	4785                	li	a5,1
    80005766:	40f707b3          	sub	a5,a4,a5
    8000576a:	0017b793          	seqz	a5,a5
    8000576e:	0ff7f793          	andi	a5,a5,255
    80005772:	2781                	sext.w	a5,a5
    80005774:	853e                	mv	a0,a5
    80005776:	6462                	ld	s0,24(sp)
    80005778:	6105                	addi	sp,sp,32
    8000577a:	8082                	ret

000000008000577c <_lseek>:
_lseek():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_lseek.c:4
#include <errno.h>
#include <sys/types.h>

off_t _lseek(int file, off_t ptr, int dir) {
    8000577c:	1101                	addi	sp,sp,-32
    8000577e:	ec06                	sd	ra,24(sp)
    80005780:	e822                	sd	s0,16(sp)
    80005782:	1000                	addi	s0,sp,32
    80005784:	87aa                	mv	a5,a0
    80005786:	feb43023          	sd	a1,-32(s0)
    8000578a:	8732                	mv	a4,a2
    8000578c:	fef42623          	sw	a5,-20(s0)
    80005790:	87ba                	mv	a5,a4
    80005792:	fef42423          	sw	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_lseek.c:5
    errno = ENOSYS;
    80005796:	12e000ef          	jal	ra,800058c4 <__errno>
    8000579a:	872a                	mv	a4,a0
    8000579c:	05800793          	li	a5,88
    800057a0:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_lseek.c:6
    return -1;
    800057a2:	57fd                	li	a5,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_lseek.c:7
}
    800057a4:	853e                	mv	a0,a5
    800057a6:	60e2                	ld	ra,24(sp)
    800057a8:	6442                	ld	s0,16(sp)
    800057aa:	6105                	addi	sp,sp,32
    800057ac:	8082                	ret

00000000800057ae <_read>:
_read():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_read.c:4
#include <errno.h>
#include <sys/types.h>

ssize_t _read(int file, void *ptr, size_t len) {
    800057ae:	7179                	addi	sp,sp,-48
    800057b0:	f406                	sd	ra,40(sp)
    800057b2:	f022                	sd	s0,32(sp)
    800057b4:	1800                	addi	s0,sp,48
    800057b6:	87aa                	mv	a5,a0
    800057b8:	feb43023          	sd	a1,-32(s0)
    800057bc:	fcc43c23          	sd	a2,-40(s0)
    800057c0:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_read.c:5
    errno = ENOSYS;
    800057c4:	100000ef          	jal	ra,800058c4 <__errno>
    800057c8:	872a                	mv	a4,a0
    800057ca:	05800793          	li	a5,88
    800057ce:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_read.c:6
    return -1;
    800057d0:	57fd                	li	a5,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_read.c:7
}
    800057d2:	853e                	mv	a0,a5
    800057d4:	70a2                	ld	ra,40(sp)
    800057d6:	7402                	ld	s0,32(sp)
    800057d8:	6145                	addi	sp,sp,48
    800057da:	8082                	ret

00000000800057dc <_sbrk>:
_sbrk():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:23
int _brk(void *addr) {
    __brk = addr;
    return 0;
}

char *_sbrk(ptrdiff_t incr) {
    800057dc:	7179                	addi	sp,sp,-48
    800057de:	f422                	sd	s0,40(sp)
    800057e0:	1800                	addi	s0,sp,48
    800057e2:	fca43c23          	sd	a0,-40(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:24
    char *old = __brk;
    800057e6:	84018793          	addi	a5,gp,-1984 # 80006be8 <__brk>
    800057ea:	639c                	ld	a5,0(a5)
    800057ec:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:27

    /* If __heap_size == 0, we can't allocate memory on the heap */
    if (&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
    800057f0:	dc818713          	addi	a4,gp,-568 # 80007170 <_sp>
    800057f4:	5c818793          	addi	a5,gp,1480 # 80007970 <metal_segment_heap_target_end>
    800057f8:	00f71463          	bne	a4,a5,80005800 <_sbrk+0x24>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:28
        return (void *)-1;
    800057fc:	57fd                	li	a5,-1
    800057fe:	a82d                	j	80005838 <_sbrk+0x5c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:32
    }

    /* Don't move the break past the end of the heap */
    if ((__brk + incr) < &metal_segment_heap_target_end) {
    80005800:	84018793          	addi	a5,gp,-1984 # 80006be8 <__brk>
    80005804:	6398                	ld	a4,0(a5)
    80005806:	fd843783          	ld	a5,-40(s0)
    8000580a:	973e                	add	a4,a4,a5
    8000580c:	5c818793          	addi	a5,gp,1480 # 80007970 <metal_segment_heap_target_end>
    80005810:	00f77e63          	bgeu	a4,a5,8000582c <_sbrk+0x50>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:33
        __brk += incr;
    80005814:	84018793          	addi	a5,gp,-1984 # 80006be8 <__brk>
    80005818:	6398                	ld	a4,0(a5)
    8000581a:	fd843783          	ld	a5,-40(s0)
    8000581e:	973e                	add	a4,a4,a5
    80005820:	84018793          	addi	a5,gp,-1984 # 80006be8 <__brk>
    80005824:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:39
    } else {
        __brk = &metal_segment_heap_target_end;
        return (void *)-1;
    }

    return old;
    80005826:	fe843783          	ld	a5,-24(s0)
    8000582a:	a039                	j	80005838 <_sbrk+0x5c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:35
        __brk = &metal_segment_heap_target_end;
    8000582c:	84018793          	addi	a5,gp,-1984 # 80006be8 <__brk>
    80005830:	5c818713          	addi	a4,gp,1480 # 80007970 <metal_segment_heap_target_end>
    80005834:	e398                	sd	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:36
        return (void *)-1;
    80005836:	57fd                	li	a5,-1
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_sbrk.c:40
}
    80005838:	853e                	mv	a0,a5
    8000583a:	7422                	ld	s0,40(sp)
    8000583c:	6145                	addi	sp,sp,48
    8000583e:	8082                	ret

0000000080005840 <_write>:
_write():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:7
#include <metal/tty.h>
#include <sys/types.h>
#include <unistd.h>

/* Write to a file.  */
ssize_t _write(int file, const void *ptr, size_t len) {
    80005840:	7139                	addi	sp,sp,-64
    80005842:	fc06                	sd	ra,56(sp)
    80005844:	f822                	sd	s0,48(sp)
    80005846:	0080                	addi	s0,sp,64
    80005848:	87aa                	mv	a5,a0
    8000584a:	fcb43823          	sd	a1,-48(s0)
    8000584e:	fcc43423          	sd	a2,-56(s0)
    80005852:	fcf42e23          	sw	a5,-36(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:8
    if (file != STDOUT_FILENO) {
    80005856:	fdc42783          	lw	a5,-36(s0)
    8000585a:	0007871b          	sext.w	a4,a5
    8000585e:	4785                	li	a5,1
    80005860:	00f70a63          	beq	a4,a5,80005874 <_write+0x34>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:9
        errno = ENOSYS;
    80005864:	060000ef          	jal	ra,800058c4 <__errno>
    80005868:	872a                	mv	a4,a0
    8000586a:	05800793          	li	a5,88
    8000586e:	c31c                	sw	a5,0(a4)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:10
        return -1;
    80005870:	57fd                	li	a5,-1
    80005872:	a83d                	j	800058b0 <_write+0x70>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:13
    }

    const char *bptr = ptr;
    80005874:	fd043783          	ld	a5,-48(s0)
    80005878:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:14
    for (size_t i = 0; i < len; ++i)
    8000587c:	fe043423          	sd	zero,-24(s0)
    80005880:	a00d                	j	800058a2 <_write+0x62>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:15 (discriminator 3)
        metal_tty_putc(bptr[i]);
    80005882:	fe043703          	ld	a4,-32(s0)
    80005886:	fe843783          	ld	a5,-24(s0)
    8000588a:	97ba                	add	a5,a5,a4
    8000588c:	0007c783          	lbu	a5,0(a5)
    80005890:	2781                	sext.w	a5,a5
    80005892:	853e                	mv	a0,a5
    80005894:	378000ef          	jal	ra,80005c0c <metal_tty_putc>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:14 (discriminator 3)
    for (size_t i = 0; i < len; ++i)
    80005898:	fe843783          	ld	a5,-24(s0)
    8000589c:	0785                	addi	a5,a5,1
    8000589e:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:14 (discriminator 1)
    800058a2:	fe843703          	ld	a4,-24(s0)
    800058a6:	fc843783          	ld	a5,-56(s0)
    800058aa:	fcf76ce3          	bltu	a4,a5,80005882 <_write+0x42>
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:16
    return 0;
    800058ae:	4781                	li	a5,0
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_write.c:17
}
    800058b0:	853e                	mv	a0,a5
    800058b2:	70e2                	ld	ra,56(sp)
    800058b4:	7442                	ld	s0,48(sp)
    800058b6:	6121                	addi	sp,sp,64
    800058b8:	8082                	ret

00000000800058ba <atexit>:
atexit():
    800058ba:	85aa                	mv	a1,a0
    800058bc:	4681                	li	a3,0
    800058be:	4601                	li	a2,0
    800058c0:	4501                	li	a0,0
    800058c2:	a8d9                	j	80005998 <__register_exitproc>

00000000800058c4 <__errno>:
__errno():
    800058c4:	81018793          	addi	a5,gp,-2032 # 80006bb8 <_impure_ptr>
    800058c8:	6388                	ld	a0,0(a5)
    800058ca:	8082                	ret

00000000800058cc <exit>:
exit():
    800058cc:	1141                	addi	sp,sp,-16
    800058ce:	e022                	sd	s0,0(sp)
    800058d0:	e406                	sd	ra,8(sp)
    800058d2:	00000797          	auipc	a5,0x0
    800058d6:	15078793          	addi	a5,a5,336 # 80005a22 <__call_exitprocs>
    800058da:	842a                	mv	s0,a0
    800058dc:	c781                	beqz	a5,800058e4 <exit+0x18>
    800058de:	4581                	li	a1,0
    800058e0:	142000ef          	jal	ra,80005a22 <__call_exitprocs>
    800058e4:	81818793          	addi	a5,gp,-2024 # 80006bc0 <_global_impure_ptr>
    800058e8:	6388                	ld	a0,0(a5)
    800058ea:	653c                	ld	a5,72(a0)
    800058ec:	c391                	beqz	a5,800058f0 <exit+0x24>
    800058ee:	9782                	jalr	a5
    800058f0:	8522                	mv	a0,s0
    800058f2:	37e000ef          	jal	ra,80005c70 <_exit>

00000000800058f6 <__libc_fini_array>:
__libc_fini_array():
    800058f6:	1101                	addi	sp,sp,-32
    800058f8:	ffffb797          	auipc	a5,0xffffb
    800058fc:	a0078793          	addi	a5,a5,-1536 # 800002f8 <__fini_array_end>
    80005900:	e822                	sd	s0,16(sp)
    80005902:	ffffb417          	auipc	s0,0xffffb
    80005906:	9f640413          	addi	s0,s0,-1546 # 800002f8 <__fini_array_end>
    8000590a:	8c1d                	sub	s0,s0,a5
    8000590c:	e426                	sd	s1,8(sp)
    8000590e:	ec06                	sd	ra,24(sp)
    80005910:	840d                	srai	s0,s0,0x3
    80005912:	84be                	mv	s1,a5
    80005914:	e411                	bnez	s0,80005920 <__libc_fini_array+0x2a>
    80005916:	60e2                	ld	ra,24(sp)
    80005918:	6442                	ld	s0,16(sp)
    8000591a:	64a2                	ld	s1,8(sp)
    8000591c:	6105                	addi	sp,sp,32
    8000591e:	8082                	ret
    80005920:	147d                	addi	s0,s0,-1
    80005922:	00341793          	slli	a5,s0,0x3
    80005926:	97a6                	add	a5,a5,s1
    80005928:	639c                	ld	a5,0(a5)
    8000592a:	9782                	jalr	a5
    8000592c:	b7e5                	j	80005914 <__libc_fini_array+0x1e>

000000008000592e <__libc_init_array>:
__libc_init_array():
    8000592e:	1101                	addi	sp,sp,-32
    80005930:	ffffb797          	auipc	a5,0xffffb
    80005934:	9c078793          	addi	a5,a5,-1600 # 800002f0 <_metal_tty_init_ptr>
    80005938:	e822                	sd	s0,16(sp)
    8000593a:	ffffb417          	auipc	s0,0xffffb
    8000593e:	9b640413          	addi	s0,s0,-1610 # 800002f0 <_metal_tty_init_ptr>
    80005942:	8c1d                	sub	s0,s0,a5
    80005944:	e426                	sd	s1,8(sp)
    80005946:	e04a                	sd	s2,0(sp)
    80005948:	ec06                	sd	ra,24(sp)
    8000594a:	840d                	srai	s0,s0,0x3
    8000594c:	4481                	li	s1,0
    8000594e:	893e                	mv	s2,a5
    80005950:	02849663          	bne	s1,s0,8000597c <__libc_init_array+0x4e>
    80005954:	ffffb797          	auipc	a5,0xffffb
    80005958:	99c78793          	addi	a5,a5,-1636 # 800002f0 <_metal_tty_init_ptr>
    8000595c:	ffffb417          	auipc	s0,0xffffb
    80005960:	99440413          	addi	s0,s0,-1644 # 800002f0 <_metal_tty_init_ptr>
    80005964:	8c1d                	sub	s0,s0,a5
    80005966:	840d                	srai	s0,s0,0x3
    80005968:	4481                	li	s1,0
    8000596a:	893e                	mv	s2,a5
    8000596c:	00849f63          	bne	s1,s0,8000598a <__libc_init_array+0x5c>
    80005970:	60e2                	ld	ra,24(sp)
    80005972:	6442                	ld	s0,16(sp)
    80005974:	64a2                	ld	s1,8(sp)
    80005976:	6902                	ld	s2,0(sp)
    80005978:	6105                	addi	sp,sp,32
    8000597a:	8082                	ret
    8000597c:	00349793          	slli	a5,s1,0x3
    80005980:	97ca                	add	a5,a5,s2
    80005982:	639c                	ld	a5,0(a5)
    80005984:	0485                	addi	s1,s1,1
    80005986:	9782                	jalr	a5
    80005988:	b7e1                	j	80005950 <__libc_init_array+0x22>
    8000598a:	00349793          	slli	a5,s1,0x3
    8000598e:	97ca                	add	a5,a5,s2
    80005990:	639c                	ld	a5,0(a5)
    80005992:	0485                	addi	s1,s1,1
    80005994:	9782                	jalr	a5
    80005996:	bfd9                	j	8000596c <__libc_init_array+0x3e>

0000000080005998 <__register_exitproc>:
__register_exitproc():
    80005998:	00001797          	auipc	a5,0x1
    8000599c:	26878793          	addi	a5,a5,616 # 80006c00 <_global_atexit>
    800059a0:	639c                	ld	a5,0(a5)
    800059a2:	8e2a                	mv	t3,a0
    800059a4:	e39d                	bnez	a5,800059ca <__register_exitproc+0x32>
    800059a6:	00001717          	auipc	a4,0x1
    800059aa:	26a70713          	addi	a4,a4,618 # 80006c10 <_global_atexit0>
    800059ae:	00001797          	auipc	a5,0x1
    800059b2:	24e7b923          	sd	a4,594(a5) # 80006c00 <_global_atexit>
    800059b6:	00000537          	lui	a0,0x0
    800059ba:	00050513          	mv	a0,a0
    800059be:	87ba                	mv	a5,a4
    800059c0:	c509                	beqz	a0,800059ca <__register_exitproc+0x32>
    800059c2:	611c                	ld	a5,0(a0)
    800059c4:	96f1bc23          	sd	a5,-1672(gp) # 80006d20 <_global_atexit0+0x110>
    800059c8:	87ba                	mv	a5,a4
    800059ca:	4798                	lw	a4,8(a5)
    800059cc:	487d                	li	a6,31
    800059ce:	557d                	li	a0,-1
    800059d0:	04e84863          	blt	a6,a4,80005a20 <__register_exitproc+0x88>
    800059d4:	020e0e63          	beqz	t3,80005a10 <__register_exitproc+0x78>
    800059d8:	1107b803          	ld	a6,272(a5)
    800059dc:	04080263          	beqz	a6,80005a20 <__register_exitproc+0x88>
    800059e0:	00371893          	slli	a7,a4,0x3
    800059e4:	98c2                	add	a7,a7,a6
    800059e6:	00c8b023          	sd	a2,0(a7)
    800059ea:	20082303          	lw	t1,512(a6)
    800059ee:	4605                	li	a2,1
    800059f0:	00e6163b          	sllw	a2,a2,a4
    800059f4:	00c36333          	or	t1,t1,a2
    800059f8:	20682023          	sw	t1,512(a6)
    800059fc:	10d8b023          	sd	a3,256(a7)
    80005a00:	4689                	li	a3,2
    80005a02:	00de1763          	bne	t3,a3,80005a10 <__register_exitproc+0x78>
    80005a06:	20482683          	lw	a3,516(a6)
    80005a0a:	8e55                	or	a2,a2,a3
    80005a0c:	20c82223          	sw	a2,516(a6)
    80005a10:	0017069b          	addiw	a3,a4,1
    80005a14:	0709                	addi	a4,a4,2
    80005a16:	070e                	slli	a4,a4,0x3
    80005a18:	c794                	sw	a3,8(a5)
    80005a1a:	97ba                	add	a5,a5,a4
    80005a1c:	e38c                	sd	a1,0(a5)
    80005a1e:	4501                	li	a0,0
    80005a20:	8082                	ret

0000000080005a22 <__call_exitprocs>:
__call_exitprocs():
    80005a22:	715d                	addi	sp,sp,-80
    80005a24:	f44e                	sd	s3,40(sp)
    80005a26:	f052                	sd	s4,32(sp)
    80005a28:	ec56                	sd	s5,24(sp)
    80005a2a:	e85a                	sd	s6,16(sp)
    80005a2c:	e486                	sd	ra,72(sp)
    80005a2e:	e0a2                	sd	s0,64(sp)
    80005a30:	fc26                	sd	s1,56(sp)
    80005a32:	f84a                	sd	s2,48(sp)
    80005a34:	e45e                	sd	s7,8(sp)
    80005a36:	8aaa                	mv	s5,a0
    80005a38:	89ae                	mv	s3,a1
    80005a3a:	00001a17          	auipc	s4,0x1
    80005a3e:	1c6a0a13          	addi	s4,s4,454 # 80006c00 <_global_atexit>
    80005a42:	4b05                	li	s6,1
    80005a44:	000a3403          	ld	s0,0(s4)
    80005a48:	c809                	beqz	s0,80005a5a <__call_exitprocs+0x38>
    80005a4a:	4404                	lw	s1,8(s0)
    80005a4c:	11043903          	ld	s2,272(s0)
    80005a50:	34fd                	addiw	s1,s1,-1
    80005a52:	0004879b          	sext.w	a5,s1
    80005a56:	0007dd63          	bgez	a5,80005a70 <__call_exitprocs+0x4e>
    80005a5a:	60a6                	ld	ra,72(sp)
    80005a5c:	6406                	ld	s0,64(sp)
    80005a5e:	74e2                	ld	s1,56(sp)
    80005a60:	7942                	ld	s2,48(sp)
    80005a62:	79a2                	ld	s3,40(sp)
    80005a64:	7a02                	ld	s4,32(sp)
    80005a66:	6ae2                	ld	s5,24(sp)
    80005a68:	6b42                	ld	s6,16(sp)
    80005a6a:	6ba2                	ld	s7,8(sp)
    80005a6c:	6161                	addi	sp,sp,80
    80005a6e:	8082                	ret
    80005a70:	00098d63          	beqz	s3,80005a8a <__call_exitprocs+0x68>
    80005a74:	00091463          	bnez	s2,80005a7c <__call_exitprocs+0x5a>
    80005a78:	14fd                	addi	s1,s1,-1
    80005a7a:	bfe1                	j	80005a52 <__call_exitprocs+0x30>
    80005a7c:	00349713          	slli	a4,s1,0x3
    80005a80:	974a                	add	a4,a4,s2
    80005a82:	10073703          	ld	a4,256(a4)
    80005a86:	ff3719e3          	bne	a4,s3,80005a78 <__call_exitprocs+0x56>
    80005a8a:	4418                	lw	a4,8(s0)
    80005a8c:	00349613          	slli	a2,s1,0x3
    80005a90:	00c405b3          	add	a1,s0,a2
    80005a94:	377d                	addiw	a4,a4,-1
    80005a96:	6994                	ld	a3,16(a1)
    80005a98:	02f71863          	bne	a4,a5,80005ac8 <__call_exitprocs+0xa6>
    80005a9c:	c41c                	sw	a5,8(s0)
    80005a9e:	dee9                	beqz	a3,80005a78 <__call_exitprocs+0x56>
    80005aa0:	00842b83          	lw	s7,8(s0)
    80005aa4:	00090963          	beqz	s2,80005ab6 <__call_exitprocs+0x94>
    80005aa8:	20092703          	lw	a4,512(s2)
    80005aac:	00fb17bb          	sllw	a5,s6,a5
    80005ab0:	8f7d                	and	a4,a4,a5
    80005ab2:	2701                	sext.w	a4,a4
    80005ab4:	ef09                	bnez	a4,80005ace <__call_exitprocs+0xac>
    80005ab6:	9682                	jalr	a3
    80005ab8:	4418                	lw	a4,8(s0)
    80005aba:	000a3783          	ld	a5,0(s4)
    80005abe:	f97713e3          	bne	a4,s7,80005a44 <__call_exitprocs+0x22>
    80005ac2:	faf40be3          	beq	s0,a5,80005a78 <__call_exitprocs+0x56>
    80005ac6:	bfbd                	j	80005a44 <__call_exitprocs+0x22>
    80005ac8:	0005b823          	sd	zero,16(a1)
    80005acc:	bfc9                	j	80005a9e <__call_exitprocs+0x7c>
    80005ace:	20492703          	lw	a4,516(s2)
    80005ad2:	964a                	add	a2,a2,s2
    80005ad4:	620c                	ld	a1,0(a2)
    80005ad6:	8ff9                	and	a5,a5,a4
    80005ad8:	2781                	sext.w	a5,a5
    80005ada:	e781                	bnez	a5,80005ae2 <__call_exitprocs+0xc0>
    80005adc:	8556                	mv	a0,s5
    80005ade:	9682                	jalr	a3
    80005ae0:	bfe1                	j	80005ab8 <__call_exitprocs+0x96>
    80005ae2:	852e                	mv	a0,a1
    80005ae4:	9682                	jalr	a3
    80005ae6:	bfc9                	j	80005ab8 <__call_exitprocs+0x96>

0000000080005ae8 <metal_init>:
metal_init():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:17
extern metal_constructor_t metal_constructors_start;
extern metal_constructor_t metal_constructors_end;
extern metal_destructor_t metal_destructors_start;
extern metal_destructor_t metal_destructors_end;

void metal_init(void) {
    80005ae8:	1101                	addi	sp,sp,-32
    80005aea:	ec06                	sd	ra,24(sp)
    80005aec:	e822                	sd	s0,16(sp)
    80005aee:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:20
    /* Make sure the constructors only run once */
    static int init_done = 0;
    if (init_done) {
    80005af0:	00001797          	auipc	a5,0x1
    80005af4:	11878793          	addi	a5,a5,280 # 80006c08 <init_done.1567>
    80005af8:	439c                	lw	a5,0(a5)
    80005afa:	efb1                	bnez	a5,80005b56 <metal_init+0x6e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:23
        return;
    }
    init_done = 1;
    80005afc:	00001797          	auipc	a5,0x1
    80005b00:	10c78793          	addi	a5,a5,268 # 80006c08 <init_done.1567>
    80005b04:	4705                	li	a4,1
    80005b06:	c398                	sw	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:25

    if (&metal_constructors_end <= &metal_constructors_start) {
    80005b08:	ffffa717          	auipc	a4,0xffffa
    80005b0c:	7f070713          	addi	a4,a4,2032 # 800002f8 <__fini_array_end>
    80005b10:	ffffa797          	auipc	a5,0xffffa
    80005b14:	7e078793          	addi	a5,a5,2016 # 800002f0 <_metal_tty_init_ptr>
    80005b18:	04e7f163          	bgeu	a5,a4,80005b5a <metal_init+0x72>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:29
        return;
    }

    metal_constructor_t *funcptr = &metal_constructors_start;
    80005b1c:	ffffa797          	auipc	a5,0xffffa
    80005b20:	7d478793          	addi	a5,a5,2004 # 800002f0 <_metal_tty_init_ptr>
    80005b24:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:30
    while (funcptr != &metal_constructors_end) {
    80005b28:	a831                	j	80005b44 <metal_init+0x5c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:31
        metal_constructor_t func = *funcptr;
    80005b2a:	fe843783          	ld	a5,-24(s0)
    80005b2e:	639c                	ld	a5,0(a5)
    80005b30:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:33

        func();
    80005b34:	fe043783          	ld	a5,-32(s0)
    80005b38:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:35

        funcptr += 1;
    80005b3a:	fe843783          	ld	a5,-24(s0)
    80005b3e:	07a1                	addi	a5,a5,8
    80005b40:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:30
    while (funcptr != &metal_constructors_end) {
    80005b44:	fe843703          	ld	a4,-24(s0)
    80005b48:	ffffa797          	auipc	a5,0xffffa
    80005b4c:	7b078793          	addi	a5,a5,1968 # 800002f8 <__fini_array_end>
    80005b50:	fcf71de3          	bne	a4,a5,80005b2a <metal_init+0x42>
    80005b54:	a021                	j	80005b5c <metal_init+0x74>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:21
        return;
    80005b56:	0001                	nop
    80005b58:	a011                	j	80005b5c <metal_init+0x74>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:26
        return;
    80005b5a:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:37
    }
}
    80005b5c:	60e2                	ld	ra,24(sp)
    80005b5e:	6442                	ld	s0,16(sp)
    80005b60:	6105                	addi	sp,sp,32
    80005b62:	8082                	ret

0000000080005b64 <metal_fini>:
metal_fini():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:39

void metal_fini(void) {
    80005b64:	1101                	addi	sp,sp,-32
    80005b66:	ec06                	sd	ra,24(sp)
    80005b68:	e822                	sd	s0,16(sp)
    80005b6a:	1000                	addi	s0,sp,32
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:42
    /* Make sure the destructors only run once */
    static int fini_done = 0;
    if (fini_done) {
    80005b6c:	00001797          	auipc	a5,0x1
    80005b70:	0a078793          	addi	a5,a5,160 # 80006c0c <fini_done.1576>
    80005b74:	439c                	lw	a5,0(a5)
    80005b76:	efb1                	bnez	a5,80005bd2 <metal_fini+0x6e>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:45
        return;
    }
    fini_done = 1;
    80005b78:	00001797          	auipc	a5,0x1
    80005b7c:	09478793          	addi	a5,a5,148 # 80006c0c <fini_done.1576>
    80005b80:	4705                	li	a4,1
    80005b82:	c398                	sw	a4,0(a5)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:47

    if (&metal_destructors_end <= &metal_destructors_start) {
    80005b84:	ffffa717          	auipc	a4,0xffffa
    80005b88:	77470713          	addi	a4,a4,1908 # 800002f8 <__fini_array_end>
    80005b8c:	ffffa797          	auipc	a5,0xffffa
    80005b90:	76c78793          	addi	a5,a5,1900 # 800002f8 <__fini_array_end>
    80005b94:	04e7f163          	bgeu	a5,a4,80005bd6 <metal_fini+0x72>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:51
        return;
    }

    metal_destructor_t *funcptr = &metal_destructors_start;
    80005b98:	ffffa797          	auipc	a5,0xffffa
    80005b9c:	76078793          	addi	a5,a5,1888 # 800002f8 <__fini_array_end>
    80005ba0:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:52
    while (funcptr != &metal_destructors_end) {
    80005ba4:	a831                	j	80005bc0 <metal_fini+0x5c>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:53
        metal_destructor_t func = *funcptr;
    80005ba6:	fe843783          	ld	a5,-24(s0)
    80005baa:	639c                	ld	a5,0(a5)
    80005bac:	fef43023          	sd	a5,-32(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:55

        func();
    80005bb0:	fe043783          	ld	a5,-32(s0)
    80005bb4:	9782                	jalr	a5
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:57

        funcptr += 1;
    80005bb6:	fe843783          	ld	a5,-24(s0)
    80005bba:	07a1                	addi	a5,a5,8
    80005bbc:	fef43423          	sd	a5,-24(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:52
    while (funcptr != &metal_destructors_end) {
    80005bc0:	fe843703          	ld	a4,-24(s0)
    80005bc4:	ffffa797          	auipc	a5,0xffffa
    80005bc8:	73478793          	addi	a5,a5,1844 # 800002f8 <__fini_array_end>
    80005bcc:	fcf71de3          	bne	a4,a5,80005ba6 <metal_fini+0x42>
    80005bd0:	a021                	j	80005bd8 <metal_fini+0x74>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:43
        return;
    80005bd2:	0001                	nop
    80005bd4:	a011                	j	80005bd8 <metal_fini+0x74>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:48
        return;
    80005bd6:	0001                	nop
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:59
    }
}
    80005bd8:	60e2                	ld	ra,24(sp)
    80005bda:	6442                	ld	s0,16(sp)
    80005bdc:	6105                	addi	sp,sp,32
    80005bde:	8082                	ret

0000000080005be0 <metal_init_run>:
metal_init_run():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:69
 * in the case that users don't want the metal constructors or
 * destructors to run.
 */

void metal_init_run(void) __attribute__((weak));
void metal_init_run(void) { metal_init(); }
    80005be0:	1141                	addi	sp,sp,-16
    80005be2:	e406                	sd	ra,8(sp)
    80005be4:	e022                	sd	s0,0(sp)
    80005be6:	0800                	addi	s0,sp,16
    80005be8:	f01ff0ef          	jal	ra,80005ae8 <metal_init>
    80005bec:	0001                	nop
    80005bee:	60a2                	ld	ra,8(sp)
    80005bf0:	6402                	ld	s0,0(sp)
    80005bf2:	0141                	addi	sp,sp,16
    80005bf4:	8082                	ret

0000000080005bf6 <metal_fini_run>:
metal_fini_run():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/init.c:72

void metal_fini_run(void) __attribute__((weak));
void metal_fini_run(void) { metal_fini(); }
    80005bf6:	1141                	addi	sp,sp,-16
    80005bf8:	e406                	sd	ra,8(sp)
    80005bfa:	e022                	sd	s0,0(sp)
    80005bfc:	0800                	addi	s0,sp,16
    80005bfe:	f67ff0ef          	jal	ra,80005b64 <metal_fini>
    80005c02:	0001                	nop
    80005c04:	60a2                	ld	ra,8(sp)
    80005c06:	6402                	ld	s0,0(sp)
    80005c08:	0141                	addi	sp,sp,16
    80005c0a:	8082                	ret

0000000080005c0c <metal_tty_putc>:
metal_tty_putc():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:12
int metal_tty_putc(int c) {
    80005c0c:	1101                	addi	sp,sp,-32
    80005c0e:	ec06                	sd	ra,24(sp)
    80005c10:	e822                	sd	s0,16(sp)
    80005c12:	1000                	addi	s0,sp,32
    80005c14:	87aa                	mv	a5,a0
    80005c16:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:13
    if (c == '\n') {
    80005c1a:	fec42783          	lw	a5,-20(s0)
    80005c1e:	0007871b          	sext.w	a4,a5
    80005c22:	47a9                	li	a5,10
    80005c24:	00f71563          	bne	a4,a5,80005c2e <metal_tty_putc+0x22>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:14
        metal_tty_putc_raw('\r');
    80005c28:	4535                	li	a0,13
    80005c2a:	01a000ef          	jal	ra,80005c44 <metal_tty_putc_raw>
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:16
    return metal_tty_putc_raw(c);
    80005c2e:	fec42783          	lw	a5,-20(s0)
    80005c32:	853e                	mv	a0,a5
    80005c34:	010000ef          	jal	ra,80005c44 <metal_tty_putc_raw>
    80005c38:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:17
}
    80005c3a:	853e                	mv	a0,a5
    80005c3c:	60e2                	ld	ra,24(sp)
    80005c3e:	6442                	ld	s0,16(sp)
    80005c40:	6105                	addi	sp,sp,32
    80005c42:	8082                	ret

0000000080005c44 <metal_tty_putc_raw>:
metal_tty_putc_raw():
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:19
int metal_tty_putc_raw(int c) {
    80005c44:	1101                	addi	sp,sp,-32
    80005c46:	ec06                	sd	ra,24(sp)
    80005c48:	e822                	sd	s0,16(sp)
    80005c4a:	1000                	addi	s0,sp,32
    80005c4c:	87aa                	mv	a5,a0
    80005c4e:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:20
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
    80005c52:	fec42783          	lw	a5,-20(s0)
    80005c56:	85be                	mv	a1,a5
    80005c58:	00001517          	auipc	a0,0x1
    80005c5c:	f1050513          	addi	a0,a0,-240 # 80006b68 <__metal_dt_uart_10013000>
    80005c60:	e37fb0ef          	jal	ra,80001a96 <metal_uart_putc>
    80005c64:	87aa                	mv	a5,a0
C:/Users/Igor/git/tests/test_u54/freedom-metal/src/tty.c:21
}
    80005c66:	853e                	mv	a0,a5
    80005c68:	60e2                	ld	ra,24(sp)
    80005c6a:	6442                	ld	s0,16(sp)
    80005c6c:	6105                	addi	sp,sp,32
    80005c6e:	8082                	ret

0000000080005c70 <_exit>:
_exit():
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_exit.c:3
#include <metal/shutdown.h>

void _exit(int exit_status) {
    80005c70:	1101                	addi	sp,sp,-32
    80005c72:	ec06                	sd	ra,24(sp)
    80005c74:	e822                	sd	s0,16(sp)
    80005c76:	1000                	addi	s0,sp,32
    80005c78:	87aa                	mv	a5,a0
    80005c7a:	fef42623          	sw	a5,-20(s0)
C:/Users/Igor/git/tests/test_u54/freedom-metal/gloss/sys_exit.c:4
    metal_shutdown(exit_status);
    80005c7e:	fec42783          	lw	a5,-20(s0)
    80005c82:	853e                	mv	a0,a5
    80005c84:	899ff0ef          	jal	ra,8000551c <metal_shutdown>
